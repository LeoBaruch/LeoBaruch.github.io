{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/alipay.jpeg","path":"img/alipay.jpeg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/weChatPay.jpeg","path":"img/weChatPay.jpeg","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/.nojekyll","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653556848509},{"_id":"source/_posts/hello-world.md","hash":"55b849d8497046647339ba1661ba072992ffcf56","modified":1653556848528},{"_id":"source/_posts/mac-tools.md","hash":"02a4c60ed154209ae262ba615bdc89fa7b905885","modified":1658935714726},{"_id":"source/_drafts/webpack-cli2.md","hash":"3ac6ca1c3bc8fb793647b5384a71f659f37da4de","modified":1653556848509},{"_id":"source/_posts/commit-message.md","hash":"4ecfa032be1ec92f8f50d73dd6fd007aa4c85a07","modified":1653577501547},{"_id":"source/.DS_Store","hash":"0bece225dd16eb01679f625a174009c6f79303cf","modified":1653577361093},{"_id":"source/_posts/tapable.md","hash":"1ae3684b6fefa38d93856190bdff05a5ebfe2f27","modified":1653556848528},{"_id":"source/_posts/search.md","hash":"8ed333bc3c71d571737f409b9305eec92a06f260","modified":1655877885872},{"_id":"source/_posts/.DS_Store","hash":"d420f74bafb3cd470ee0551b8265d993eec2509d","modified":1653577361112},{"_id":"source/_posts/webpack-cli1.md","hash":"8e6ad2f7c721b46aa6b9d59858f9c67dfcf31d31","modified":1653556848565},{"_id":"source/_posts/commit-message/.DS_Store","hash":"c548bcb4723564599f500d589c73c55a0b2b639f","modified":1653577366164},{"_id":"source/_drafts/.DS_Store","hash":"6e4fce8033e077db1229d947ae88808561d8f3ff","modified":1651840423241},{"_id":"source/_posts/tapable/同异步分类.webp","hash":"264c307e5cb9eb95d4ec9cc55f1d14e5380174f9","modified":1653556848546},{"_id":"source/_posts/commit-message/commit.png","hash":"40060d191a75e0dfbb98a10a95075c93bd1c3eb8","modified":1653577072212},{"_id":"themes/icarus/source/.nojekyll","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653556848828},{"_id":"themes/icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653556848771},{"_id":"themes/icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653556848791},{"_id":"themes/icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653556848827},{"_id":"themes/icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653556848791},{"_id":"themes/icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653556848827},{"_id":"themes/icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653556848658},{"_id":"themes/icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653556848678},{"_id":"themes/icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653556848678},{"_id":"themes/icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653556848678},{"_id":"themes/icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1653556848679},{"_id":"themes/icarus/.eslintignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1653556848566},{"_id":"themes/icarus/.gitignore","hash":"36084c0851a22bfd393933abb8e262562ffc6802","modified":1653556848620},{"_id":"themes/icarus/.eslintrc.json","hash":"43c7740158c8690242720b4ff7fa11426fc20c79","modified":1653556848600},{"_id":"themes/icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1653556848638},{"_id":"themes/icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1653556848638},{"_id":"themes/icarus/README.md","hash":"32f9f4fc8cd7ec60b30544bd2e558b593519ae5d","modified":1653556848638},{"_id":"themes/icarus/package.json","hash":"267268fc762a208640e0eb570e213294f9553758","modified":1653556848828},{"_id":"themes/icarus/include/register.js","hash":"ec6596b63bfb4349ba61792d905abe8e06fea625","modified":1653556848640},{"_id":"themes/icarus/include/dependency.js","hash":"0ca35dec92ccf383f45db905db1a5a0e92d7209e","modified":1653556848639},{"_id":"themes/icarus/.npmignore","hash":"42242c8da7a020a3295e7dd3d18bf022cb08b661","modified":1653556848637},{"_id":"themes/icarus/.github/dependabot.yml","hash":"d532d0db30e42211f35823b9885f3ed1b2d51777","modified":1653556848619},{"_id":"themes/icarus/.github/stale.yml","hash":"88c73f6216c5666d2f60b1e8fe690a3f6e561e42","modified":1653556848619},{"_id":"themes/icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1653556848715},{"_id":"themes/icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1653556848733},{"_id":"themes/icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1653556848716},{"_id":"themes/icarus/languages/fr.yml","hash":"06d5c819d6108a42b28cff7b52e5410d0bed55d1","modified":1653556848734},{"_id":"themes/icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1653556848734},{"_id":"themes/icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1653556848734},{"_id":"themes/icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":1653556848639},{"_id":"themes/icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1653556848734},{"_id":"themes/icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1653556848735},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1653556848735},{"_id":"themes/icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1653556848735},{"_id":"themes/icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1653556848735},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1653556848753},{"_id":"themes/icarus/languages/tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":1653556848753},{"_id":"themes/icarus/layout/archive.jsx","hash":"05677e93d4a43f417dbbf0d63ca37a99e6349e3b","modified":1653556848754},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1653556848753},{"_id":"themes/icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1653556848753},{"_id":"themes/icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1653556848754},{"_id":"themes/icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1653556848754},{"_id":"themes/icarus/layout/layout.jsx","hash":"ac7c4e3465a116c7f05f8c2e09ee6d6b9467abf1","modified":1653556848791},{"_id":"themes/icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1653556848827},{"_id":"themes/icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1653556848791},{"_id":"themes/icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1653556848828},{"_id":"themes/icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1653556848792},{"_id":"themes/icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1653556848827},{"_id":"themes/icarus/.github/PULL_REQUEST_TEMPLATE/pull_request_template.md","hash":"e106fa240c24c8bfbdd623549651600c6d786c9c","modified":1653556848618},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/Bug反馈.md","hash":"d801be6937df21e63113be8840b2e23c465db87b","modified":1653556848600},{"_id":"themes/icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1653556848827},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/feature_request.md","hash":"05313e241a3d43fdadb0f74390b562c07c25d4d0","modified":1653556848601},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/bug_report.md","hash":"5d3abdc1a2a79ef9822865184eced6e31066d8f6","modified":1653556848600},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/config.yml","hash":"b49270a202d839c298e584b5d017f56140c7e7a0","modified":1653556848601},{"_id":"themes/icarus/.github/workflows/github-release.yml","hash":"48b6bd2cc567687a7b1648c55c8f9de9d44fa9e1","modified":1653556848619},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/功能建议.md","hash":"c6f60f37e6cd0bc21a81b3b07f84e04e9e80fb57","modified":1653556848601},{"_id":"themes/icarus/include/migration/head.js","hash":"75bb762d715aa3b27037512051641a06fc31fb5d","modified":1653556848639},{"_id":"themes/icarus/.github/workflows/npm-publish.yml","hash":"4eabc0c60cb7102fdd5e4b0fbd8c0ac4c17cc8d0","modified":1653556848620},{"_id":"themes/icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1653556848640},{"_id":"themes/icarus/include/migration/v4_v5.js","hash":"6342310892d113763b5544789b45d44c0ccf2854","modified":1653556848640},{"_id":"themes/icarus/.github/workflows/test.yml","hash":"45c59d56b198faeb9f38b88170810b98d54ebed1","modified":1653556848620},{"_id":"themes/icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1653556848640},{"_id":"themes/icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1653556848713},{"_id":"themes/icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1653556848713},{"_id":"themes/icarus/.github/workflows/lint.yml","hash":"3e55bcb2156dd31ff7bf4bed12f9fb69fd1b21cd","modified":1653556848619},{"_id":"themes/icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1653556848714},{"_id":"themes/icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1653556848713},{"_id":"themes/icarus/include/style/codeblock.styl","hash":"30bee4cf6792e9665eb648cc20b352d9eaff1207","modified":1653556848714},{"_id":"themes/icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1653556848714},{"_id":"themes/icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1653556848714},{"_id":"themes/icarus/include/style/navbar.styl","hash":"34f09b144cb46a25ec2cc7260a6c207dd34ff1fe","modified":1653556848714},{"_id":"themes/icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1653556848714},{"_id":"themes/icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1653556848714},{"_id":"themes/icarus/include/style/plugin.styl","hash":"679b61b5fc5b3281735a21c37aeb64229d9c51ea","modified":1653556848714},{"_id":"themes/icarus/include/schema/config.json","hash":"b949c52d02d5ee520ae4666a016ce91faf6fb350","modified":1653556848678},{"_id":"themes/icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1653556848715},{"_id":"themes/icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1653556848715},{"_id":"themes/icarus/source/.DS_Store","hash":"758dd2bf268da91e28806733f80c93ec21d69bd5","modified":1652016293950},{"_id":"themes/icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1653556848714},{"_id":"themes/icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1653556848715},{"_id":"themes/icarus/layout/common/article.jsx","hash":"e2765287c6bc6eb97975a1bb4e325b046e95b392","modified":1653556848772},{"_id":"themes/icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1653556848772},{"_id":"themes/icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1653556848772},{"_id":"themes/icarus/layout/common/footer.jsx","hash":"baa8e40e036a3ec0114d96893b708435104b4ba9","modified":1653556848772},{"_id":"themes/icarus/layout/common/head.jsx","hash":"2ec1f511f32e3a9c86d49f1338f57ae5ece18898","modified":1653556848772},{"_id":"themes/icarus/layout/common/navbar.jsx","hash":"d96e501e52861056474659f96ee0206588d8c93a","modified":1653556848772},{"_id":"themes/icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1653556848773},{"_id":"themes/icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1653556848791},{"_id":"themes/icarus/layout/common/scripts.jsx","hash":"0fe1fddab431fb9f63906d8c480d5cd6b33abc32","modified":1653556848790},{"_id":"themes/icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1653556848791},{"_id":"themes/icarus/layout/common/widgets.jsx","hash":"251263b97de12f2b8d1fce2514e83430f2515b94","modified":1653556848791},{"_id":"themes/icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1653556848715},{"_id":"themes/icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1653556848826},{"_id":"themes/icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1653556848826},{"_id":"themes/icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":1653556848827},{"_id":"themes/icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1653556848828},{"_id":"themes/icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1653556848828},{"_id":"themes/icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1653556848828},{"_id":"themes/icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1653556848869},{"_id":"themes/icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1653556848888},{"_id":"themes/icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1653556848886},{"_id":"themes/icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1653556848888},{"_id":"themes/icarus/source/js/.eslintrc.json","hash":"6bf0641cb69dffac97f69baea192d7fa3ab612cb","modified":1653556848906},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1653556848888},{"_id":"themes/icarus/include/schema/common/article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":1653556848658},{"_id":"themes/icarus/source/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1653556848906},{"_id":"themes/icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1653556848907},{"_id":"themes/icarus/source/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1653556848925},{"_id":"themes/icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1653556848658},{"_id":"themes/icarus/include/schema/common/comment.json","hash":"7d744391a8abee9a2c450b6fdd36a3866a488025","modified":1653556848658},{"_id":"themes/icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1653556848659},{"_id":"themes/icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1653556848659},{"_id":"themes/icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1653556848659},{"_id":"themes/icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":1653556848658},{"_id":"themes/icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1653556848907},{"_id":"themes/icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1653556848659},{"_id":"themes/icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1653556848677},{"_id":"themes/icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1653556848659},{"_id":"themes/icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1653556848678},{"_id":"themes/icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1653556848678},{"_id":"themes/icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1653556848678},{"_id":"themes/icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1653556848678},{"_id":"themes/icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1653556848679},{"_id":"themes/icarus/source/img/weChatPay.jpeg","hash":"2953db0e1b2a8b0236bfcaf816a4024fd997cd95","modified":1653556848905},{"_id":"source/_posts/search/WechatIMG167.png","hash":"efe69a1c48aa7eac80a887e10090bfdb1017dcd5","modified":1655223436445},{"_id":"themes/icarus/source/img/alipay.jpeg","hash":"c6bfa46917f753bbf545871b7fbd4f24460bb4aa","modified":1653556848848},{"_id":"themes/icarus/source/img/avatar.png","hash":"f4b32cd726fe0d526364308b621172f3a963ea35","modified":1653556848868},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1655223845932},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1655223845932},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1655223845932},{"_id":"public/content.json","hash":"3d00199f58cc623498a78cf2197f8efe745ac170","modified":1658935763458},{"_id":"public/manifest.json","hash":"e4526dbd660300aa40b425d5ecb6009297acef0f","modified":1655223845932},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1655223845932},{"_id":"public/archives/2022/06/index.html","hash":"0a33165c75d1c0810ce30fce5aefb7bc4ca7a4d0","modified":1655223845932},{"_id":"public/2022/06/12/search/index.html","hash":"5a8d06cda591c07c7c3494a9a2d04e6cedecce6c","modified":1658935763458},{"_id":"public/2022/05/26/commit-message/index.html","hash":"c85305216dc2bf791f5048bb6d4bf6fc10bd467a","modified":1655223845932},{"_id":"public/2022/05/26/tapable/index.html","hash":"ac74d0a5a7f0336eafa4e35a67b37dc2cf77495c","modified":1655223845932},{"_id":"public/2022/05/26/mac-tools/index.html","hash":"d0a2f0747f29102e2c70aac8fc36aec1b8db841a","modified":1658935763458},{"_id":"public/2022/05/26/hello-world/index.html","hash":"af3e5205d7d4ef66cb05406da383f7ccc5b0a1c4","modified":1655223845932},{"_id":"public/2022/05/03/webpack-cli1/index.html","hash":"521dbc205336876d13e24cc5df15f0d715b0adf1","modified":1655223845932},{"_id":"public/archives/index.html","hash":"452109d25bc133de6c3b8aa89d8eb7ea07afc3a6","modified":1655223845932},{"_id":"public/archives/2022/index.html","hash":"bae8288d96fbb021a9575de5a2124dd99758a087","modified":1655223845932},{"_id":"public/archives/2022/05/index.html","hash":"a955249cea1ac4d49ff04a59b158f14914daf200","modified":1655223845932},{"_id":"public/index.html","hash":"cc5ee09abbf132f088f16c502036f246e6cb3bb5","modified":1658935763458},{"_id":"public/categories/git/index.html","hash":"4500bfd0946aca628936656b3ec87041d5e24a4a","modified":1655223845932},{"_id":"public/categories/webpack/index.html","hash":"f31238a14378d8f0ceca02b73af80f9e6840c42e","modified":1655223845932},{"_id":"public/categories/algorithm/index.html","hash":"3ab4529730f7551252a26a412de1fca074aa6c6e","modified":1658935763458},{"_id":"public/categories/algorithm/binary-search-tree/index.html","hash":"d2f630b287855cc685ede555a3726c6426f0f8a1","modified":1658935763458},{"_id":"public/tags/tools-mac/index.html","hash":"0ea67ae3e6676caf9f6c20aef2f09584bd4794ed","modified":1658935763458},{"_id":"public/tags/前端工程化/index.html","hash":"588c3fbb1e9fab7d93dcbf569388ac27b4994f97","modified":1655223845932},{"_id":"public/tags/git/index.html","hash":"73ce40a8e93fc7b6e8b567abdb6bf0ca3d68c2a0","modified":1655223845932},{"_id":"public/categories/index.html","hash":"2bbf3402765cb27e5d9bd219b6e4d20a596a1431","modified":1655223845932},{"_id":"public/tags/index.html","hash":"70835ee04bc092b588a7ec843e0a5ef0c54d6697","modified":1655223845932},{"_id":"public/tags/algorithm/index.html","hash":"e42e52591e5fb1bd361f0a25636349f1349a778b","modified":1658935763458},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1655223845932},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1655223845932},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1655223845932},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1655223845932},{"_id":"public/2022/05/26/commit-message/commit.png","hash":"40060d191a75e0dfbb98a10a95075c93bd1c3eb8","modified":1655223845932},{"_id":"public/2022/05/26/tapable/同异步分类.webp","hash":"264c307e5cb9eb95d4ec9cc55f1d14e5380174f9","modified":1655223845932},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1655223845932},{"_id":"public/img/weChatPay.jpeg","hash":"2953db0e1b2a8b0236bfcaf816a4024fd997cd95","modified":1655223845932},{"_id":"public/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1655223845932},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1655223845932},{"_id":"public/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1655223845932},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1655223845932},{"_id":"public/css/style.css","hash":"1cfc8faa2c4fbdb80286a39ad0c1d7cd13f2e49a","modified":1655223845932},{"_id":"public/css/default.css","hash":"1cfc8faa2c4fbdb80286a39ad0c1d7cd13f2e49a","modified":1655223845932},{"_id":"public/css/cyberpunk.css","hash":"fdf17a1f36879911641158f25d30d97c8fb37395","modified":1655223845932},{"_id":"public/img/alipay.jpeg","hash":"c6bfa46917f753bbf545871b7fbd4f24460bb4aa","modified":1655223845932},{"_id":"public/img/avatar.png","hash":"f4b32cd726fe0d526364308b621172f3a963ea35","modified":1655223845932},{"_id":"public/2022/06/12/search/WechatIMG167.png","hash":"efe69a1c48aa7eac80a887e10090bfdb1017dcd5","modified":1655223845932},{"_id":"source/_posts/search/WechatIMG174.png","hash":"011f694aeca26a57d87800b21c771d7736b50c32","modified":1655309224815},{"_id":"source/_posts/search/WechatIMG170.png","hash":"52bd4c7e022165edd87741fa6a8974bbf7088f2a","modified":1655286024960},{"_id":"source/_posts/search/WechatIMG168.png","hash":"7c3663014c67df9b3bba0918ae28ee4b7d7c9228","modified":1655263314259},{"_id":"source/_posts/search/WechatIMG173.png","hash":"3a549c63641395c58350cad8fa3e108eb90c7b67","modified":1655305611075},{"_id":"source/_posts/search/WechatIMG176.png","hash":"31a91fe2f5cf59ea9e5b9c9d0b7523a981bfbed2","modified":1655311171709},{"_id":"source/_posts/search/WechatIMG180.png","hash":"fca062d5b003784eb9221c7e2e619f48c9f290ae","modified":1655312200222},{"_id":"source/_posts/search/WechatIMG182.png","hash":"24e211edfa6dabc2baa066bac057d200d3c76b76","modified":1655345163491},{"_id":"source/_posts/search/WechatIMG186.png","hash":"dc7ece98101e84a7e5121e451ab5a805abb9abc1","modified":1655355012436},{"_id":"source/_posts/search/WechatIMG171.png","hash":"8a439f20470c24289434654ef68eaf5636fb6a7a","modified":1655288767400},{"_id":"source/_posts/search/WechatIMG179.png","hash":"be43bd25400290d39340c784e3d5df7c8617c96e","modified":1655312177821},{"_id":"source/_posts/search/WechatIMG172.png","hash":"8b4cafd25c70ad21e51c76fb41e29d0ed0bd6632","modified":1655290402872},{"_id":"source/_posts/search/WechatIMG183.png","hash":"37eb21a16cb02327f74ef37f8863601663003ca9","modified":1655350461196},{"_id":"source/_posts/search/WechatIMG178.png","hash":"9d39fff8ef615ae0c0d3d646ae4bf0e761591996","modified":1655311618720},{"_id":"source/_posts/search/WechatIMG181.png","hash":"004e3b34e360f09da9c3a2e6ac8e1ab3f2a19f14","modified":1655345123320},{"_id":"source/_posts/search/WechatIMG185.png","hash":"d0616ac20a7c2ae305be387838b15c7d179057b5","modified":1655354994412},{"_id":"source/_posts/search/a5aaca89-5e3a-49d9-a821-d8a1c22ea46b.png","hash":"bd770dd112fc0021973f4f5f7ce7c333b6943bdd","modified":1655275173517},{"_id":"source/_posts/search/WechatIMG175.png","hash":"160fc4adbd6346f636de0d04d959012e81c492ac","modified":1655310541368},{"_id":"source/_posts/search/WechatIMG187.png","hash":"a6dc4938d8de9dc4a7cff8817b36da3483058d42","modified":1655355110125},{"_id":"source/_posts/search/WechatIMG189.png","hash":"6fdb2e445289edbcb10d43762863424c04e15742","modified":1655355906097},{"_id":"source/_posts/search/WechatIMG188.png","hash":"5e235596eea39f03134d6bc1d4231b4b7797c981","modified":1655355673224},{"_id":"source/_posts/search/WechatIMG184.png","hash":"9c49fe06a292a6f36df01d13e67ebe779e68ee01","modified":1655350517226},{"_id":"public/2022/06/12/search/WechatIMG174.png","hash":"011f694aeca26a57d87800b21c771d7736b50c32","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG170.png","hash":"52bd4c7e022165edd87741fa6a8974bbf7088f2a","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG173.png","hash":"3a549c63641395c58350cad8fa3e108eb90c7b67","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG168.png","hash":"7c3663014c67df9b3bba0918ae28ee4b7d7c9228","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG176.png","hash":"31a91fe2f5cf59ea9e5b9c9d0b7523a981bfbed2","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG180.png","hash":"fca062d5b003784eb9221c7e2e619f48c9f290ae","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG182.png","hash":"24e211edfa6dabc2baa066bac057d200d3c76b76","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG186.png","hash":"dc7ece98101e84a7e5121e451ab5a805abb9abc1","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG171.png","hash":"8a439f20470c24289434654ef68eaf5636fb6a7a","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG172.png","hash":"8b4cafd25c70ad21e51c76fb41e29d0ed0bd6632","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG179.png","hash":"be43bd25400290d39340c784e3d5df7c8617c96e","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG183.png","hash":"37eb21a16cb02327f74ef37f8863601663003ca9","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG178.png","hash":"9d39fff8ef615ae0c0d3d646ae4bf0e761591996","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG185.png","hash":"d0616ac20a7c2ae305be387838b15c7d179057b5","modified":1655356490305},{"_id":"public/2022/06/12/search/a5aaca89-5e3a-49d9-a821-d8a1c22ea46b.png","hash":"bd770dd112fc0021973f4f5f7ce7c333b6943bdd","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG181.png","hash":"004e3b34e360f09da9c3a2e6ac8e1ab3f2a19f14","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG175.png","hash":"160fc4adbd6346f636de0d04d959012e81c492ac","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG187.png","hash":"a6dc4938d8de9dc4a7cff8817b36da3483058d42","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG189.png","hash":"6fdb2e445289edbcb10d43762863424c04e15742","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG188.png","hash":"5e235596eea39f03134d6bc1d4231b4b7797c981","modified":1655356490305},{"_id":"public/2022/06/12/search/WechatIMG184.png","hash":"9c49fe06a292a6f36df01d13e67ebe779e68ee01","modified":1655356490305}],"Category":[{"name":"webpack","_id":"cl4edjhxq0002s696ex0s2oxj"},{"name":"git","_id":"cl4edjhxu0008s69642ab5cb0"},{"name":"algorithm","_id":"cl4edjhxw000fs696417029cz"},{"name":"binary search tree","parent":"cl4edjhxw000fs696417029cz","_id":"cl4edjhxx000ns6969jh11hzt"}],"Data":[],"Page":[],"Post":[{"title":"webpack-cli 源码解析(下)","_content":"\n## 开始\n\n\n","source":"_drafts/webpack-cli2.md","raw":"---\ntitle: webpack-cli 源码解析(下)\ntags: 前端工程化\ncategories: \n  - webpack\n---\n\n## 开始\n\n\n","slug":"webpack-cli2","published":0,"date":"2022-05-26T09:20:48.509Z","updated":"2022-05-26T09:20:48.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4edjhxk0000s696e4s1fle0","content":"<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<!--more-->\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n<!--more-->\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-05-26T09:20:48.526Z","updated":"2022-05-26T09:20:48.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4edjhxo0001s696ambral72","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>","more":"<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"mac-tools","date":"2022-05-26T09:21:11.000Z","_content":"\n## Mac各种效率工具\n\n<!--more-->\n\n### 开发\n\n- vscode: 编辑器\n- Charles: 抓包工具\n- postman: 测试api\n- iTerm2: 终端神器\n- navicat: 数据库gui\n- 命令行工具\n  - on my zsh: a delightful, open source, community-driven framework for managing your Zsh configuration\n  - fasd: Fasd offers quick access to files and directories for POSIX shells.\n\n### 效率\n\n- alfred4 \n- Bartender4: Menubar 菜单栏管理小助手\n- macdown: markdown\n- VPN:\n  - clashX\n- IINA: 视频播放器\n- Karabiner-Elements: mac键位修改神器\n- moom 窗口整理、排列、缩放工具\n- Manico 应用启动和切换工具\n\n ","source":"_posts/mac-tools.md","raw":"---\ntitle: mac-tools\ndate: 2022-05-26 17:21:11\ntags:\n  - tools mac\ncategories:\n---\n\n## Mac各种效率工具\n\n<!--more-->\n\n### 开发\n\n- vscode: 编辑器\n- Charles: 抓包工具\n- postman: 测试api\n- iTerm2: 终端神器\n- navicat: 数据库gui\n- 命令行工具\n  - on my zsh: a delightful, open source, community-driven framework for managing your Zsh configuration\n  - fasd: Fasd offers quick access to files and directories for POSIX shells.\n\n### 效率\n\n- alfred4 \n- Bartender4: Menubar 菜单栏管理小助手\n- macdown: markdown\n- VPN:\n  - clashX\n- IINA: 视频播放器\n- Karabiner-Elements: mac键位修改神器\n- moom 窗口整理、排列、缩放工具\n- Manico 应用启动和切换工具\n\n ","slug":"mac-tools","published":1,"updated":"2022-07-27T15:28:34.726Z","_id":"cl4edjhxs0004s6964l396lum","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Mac各种效率工具\"><a href=\"#Mac各种效率工具\" class=\"headerlink\" title=\"Mac各种效率工具\"></a>Mac各种效率工具</h2><span id=\"more\"></span>\n\n<h3 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h3><ul>\n<li>vscode: 编辑器</li>\n<li>Charles: 抓包工具</li>\n<li>postman: 测试api</li>\n<li>iTerm2: 终端神器</li>\n<li>navicat: 数据库gui</li>\n<li>命令行工具<ul>\n<li>on my zsh: a delightful, open source, community-driven framework for managing your Zsh configuration</li>\n<li>fasd: Fasd offers quick access to files and directories for POSIX shells.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"效率\"><a href=\"#效率\" class=\"headerlink\" title=\"效率\"></a>效率</h3><ul>\n<li>alfred4 </li>\n<li>Bartender4: Menubar 菜单栏管理小助手</li>\n<li>macdown: markdown</li>\n<li>VPN:<ul>\n<li>clashX</li>\n</ul>\n</li>\n<li>IINA: 视频播放器</li>\n<li>Karabiner-Elements: mac键位修改神器</li>\n<li>moom 窗口整理、排列、缩放工具</li>\n<li>Manico 应用启动和切换工具</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"Mac各种效率工具\"><a href=\"#Mac各种效率工具\" class=\"headerlink\" title=\"Mac各种效率工具\"></a>Mac各种效率工具</h2>","more":"<h3 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h3><ul>\n<li>vscode: 编辑器</li>\n<li>Charles: 抓包工具</li>\n<li>postman: 测试api</li>\n<li>iTerm2: 终端神器</li>\n<li>navicat: 数据库gui</li>\n<li>命令行工具<ul>\n<li>on my zsh: a delightful, open source, community-driven framework for managing your Zsh configuration</li>\n<li>fasd: Fasd offers quick access to files and directories for POSIX shells.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"效率\"><a href=\"#效率\" class=\"headerlink\" title=\"效率\"></a>效率</h3><ul>\n<li>alfred4 </li>\n<li>Bartender4: Menubar 菜单栏管理小助手</li>\n<li>macdown: markdown</li>\n<li>VPN:<ul>\n<li>clashX</li>\n</ul>\n</li>\n<li>IINA: 视频播放器</li>\n<li>Karabiner-Elements: mac键位修改神器</li>\n<li>moom 窗口整理、排列、缩放工具</li>\n<li>Manico 应用启动和切换工具</li>\n</ul>"},{"title":"commit-message","date":"2022-05-26T14:27:48.000Z","_content":"\n## Commit message 提交标准\n\nGit 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交, 一般来说，commit message 应该清晰明了，说明本次提交的目的\n\n本文介绍的是[Angular 规范](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#)\n\n<!--more-->\n\n### commit message的格式\n\n包含: Header、Body和Footer\n\n```html\n<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n```\n其中，Header 是必需的，Body 和 Footer 可以省略,暂时不讲\n\n不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）,简短,保持美观\n\n#### Header\n\nHeader部分只有一行，包括三个字段：\n- type（必需）\n- scope（可选）\n- subject（必需）\n\n##### type\n\ntype用于说明 commit 的类别，只允许使用下面7个标识。\n\n```\nfeat：新功能（feature）\nfix：修补bug\ndocs：文档（documentation）\nstyle： 格式（不影响代码运行的变动）\nrefactor：重构（即不是新增功能，也不是修改bug的代码变动）\ntest：增加测试\nchore：构建过程或辅助工具的变动\n```\n\n如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。\n\n##### scope\n\nscope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\n\n##### subject\n\nsubject是 commit 目的的简短描述，不超过50个字符。\n\n比较规范的提交应该如下:\n\n{% asset_img commit.png 'commit' %}\n\n\n","source":"_posts/commit-message.md","raw":"---\ntitle: commit-message\ndate: 2022-05-26 22:27:48\ntags: git \ncategories: git\n---\n\n## Commit message 提交标准\n\nGit 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交, 一般来说，commit message 应该清晰明了，说明本次提交的目的\n\n本文介绍的是[Angular 规范](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#)\n\n<!--more-->\n\n### commit message的格式\n\n包含: Header、Body和Footer\n\n```html\n<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n```\n其中，Header 是必需的，Body 和 Footer 可以省略,暂时不讲\n\n不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）,简短,保持美观\n\n#### Header\n\nHeader部分只有一行，包括三个字段：\n- type（必需）\n- scope（可选）\n- subject（必需）\n\n##### type\n\ntype用于说明 commit 的类别，只允许使用下面7个标识。\n\n```\nfeat：新功能（feature）\nfix：修补bug\ndocs：文档（documentation）\nstyle： 格式（不影响代码运行的变动）\nrefactor：重构（即不是新增功能，也不是修改bug的代码变动）\ntest：增加测试\nchore：构建过程或辅助工具的变动\n```\n\n如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。\n\n##### scope\n\nscope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\n\n##### subject\n\nsubject是 commit 目的的简短描述，不超过50个字符。\n\n比较规范的提交应该如下:\n\n{% asset_img commit.png 'commit' %}\n\n\n","slug":"commit-message","published":1,"updated":"2022-05-26T15:05:01.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4edjhxt0005s696gglod8nv","content":"<h2 id=\"Commit-message-提交标准\"><a href=\"#Commit-message-提交标准\" class=\"headerlink\" title=\"Commit message 提交标准\"></a>Commit message 提交标准</h2><p>Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交, 一般来说，commit message 应该清晰明了，说明本次提交的目的</p>\n<p>本文介绍的是<a href=\"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#\">Angular 规范</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"commit-message的格式\"><a href=\"#commit-message的格式\" class=\"headerlink\" title=\"commit message的格式\"></a>commit message的格式</h3><p>包含: Header、Body和Footer</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>(<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>): <span class=\"tag\">&lt;<span class=\"name\">subject</span>&gt;</span></span><br><span class=\"line\">// 空一行</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">// 空一行</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中，Header 是必需的，Body 和 Footer 可以省略,暂时不讲</p>\n<p>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）,简短,保持美观</p>\n<h4 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h4><p>Header部分只有一行，包括三个字段：</p>\n<ul>\n<li>type（必需）</li>\n<li>scope（可选）</li>\n<li>subject（必需）</li>\n</ul>\n<h5 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h5><p>type用于说明 commit 的类别，只允许使用下面7个标识。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feat：新功能（feature）</span><br><span class=\"line\">fix：修补bug</span><br><span class=\"line\">docs：文档（documentation）</span><br><span class=\"line\">style： 格式（不影响代码运行的变动）</span><br><span class=\"line\">refactor：重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class=\"line\">test：增加测试</span><br><span class=\"line\">chore：构建过程或辅助工具的变动</span><br></pre></td></tr></table></figure>\n\n<p>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。</p>\n<h5 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"scope\"></a>scope</h5><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>\n<h5 id=\"subject\"><a href=\"#subject\" class=\"headerlink\" title=\"subject\"></a>subject</h5><p>subject是 commit 目的的简短描述，不超过50个字符。</p>\n<p>比较规范的提交应该如下:</p>\n<img src=\"/2022/05/26/commit-message/commit.png\" class=\"\" title=\"commit\">\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"Commit-message-提交标准\"><a href=\"#Commit-message-提交标准\" class=\"headerlink\" title=\"Commit message 提交标准\"></a>Commit message 提交标准</h2><p>Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交, 一般来说，commit message 应该清晰明了，说明本次提交的目的</p>\n<p>本文介绍的是<a href=\"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#\">Angular 规范</a></p>","more":"<h3 id=\"commit-message的格式\"><a href=\"#commit-message的格式\" class=\"headerlink\" title=\"commit message的格式\"></a>commit message的格式</h3><p>包含: Header、Body和Footer</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>(<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>): <span class=\"tag\">&lt;<span class=\"name\">subject</span>&gt;</span></span><br><span class=\"line\">// 空一行</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">// 空一行</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中，Header 是必需的，Body 和 Footer 可以省略,暂时不讲</p>\n<p>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）,简短,保持美观</p>\n<h4 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h4><p>Header部分只有一行，包括三个字段：</p>\n<ul>\n<li>type（必需）</li>\n<li>scope（可选）</li>\n<li>subject（必需）</li>\n</ul>\n<h5 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h5><p>type用于说明 commit 的类别，只允许使用下面7个标识。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feat：新功能（feature）</span><br><span class=\"line\">fix：修补bug</span><br><span class=\"line\">docs：文档（documentation）</span><br><span class=\"line\">style： 格式（不影响代码运行的变动）</span><br><span class=\"line\">refactor：重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class=\"line\">test：增加测试</span><br><span class=\"line\">chore：构建过程或辅助工具的变动</span><br></pre></td></tr></table></figure>\n\n<p>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。</p>\n<h5 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"scope\"></a>scope</h5><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>\n<h5 id=\"subject\"><a href=\"#subject\" class=\"headerlink\" title=\"subject\"></a>subject</h5><p>subject是 commit 目的的简短描述，不超过50个字符。</p>\n<p>比较规范的提交应该如下:</p>\n<img src=\"/2022/05/26/commit-message/commit.png\" class=\"\" title=\"commit\">"},{"title":"几种查找的数据结构(二叉搜索树、2-3树及红黑树)","date":"2022-06-12T15:46:38.000Z","_content":"\n现代计算机和网络使我们能够访问海量的信息。高效检索这些信息的能力是处理它们的重要前提.本文主要介绍几种经典的数据结构,及分析其插入和查找效率\n\n<!--more-->\n## 链表\n\n下图为一个基于单向链表的添加与查找的轨迹.每次插入一个新元素前先查找是否存在相同的key,不存在则在首部新增一个节点,存在则替换当前节点的值.\n\n{% asset_img WechatIMG167.png '同异步分类' %}\n\n由上图可知,一个链表长度为N插入一个新数据的时间复杂度为 O(1), 即只需在首部插入即可.而查找,需要每个节点依次寻找,最好为1,最差为N.\n平均时间复杂度为O(N)\n\n## 有序数组\n\n无序数组与链表类似,查询依次为O(N),添加为O(1);\n\n有序数组的查找分两种: 一种是顺序查找时间复杂度为O(N), 另一种是二分查找时间复杂度是O(logN).添加时间复杂度为O(N), 插入流程如下图:\n\n{% asset_img WechatIMG168.png '同异步分类' %}\n\n## 二叉查找树\n\n以上两种数据结构插入和查找的时间复杂度如下表\n\n| 数据结构  |   查找   |   插入   |\n| :----: | :----: | :----:|\n| 链表 | O(N) | O(1) |\n| 有序数组(顺序查找) | O(N) | O(N) |\n| 有序数组(二分查找) | O(log N) | O(N) |\n\n由上图可以看出不论是链表与数组,他的查找和插入顺序都不是很尽如人意, 若构建一个长度为N的数据,两种存储方式:\n\n- 链表: 插入次数 为 N * 1, 查询替换为 N * N, 查询速度太慢\n- 数组(二分查找): 插入为 N * N, 查询替换为 NlogN, 插入速度太慢\n\n那有没有一个数据结构能不能兼具查询和插入都足够效率的优点呢.这里我们先介绍下二叉查找树的基本特征.然后再分析\n\n### 二叉查找树定义\n\n一颗二叉查找树（BST）是一颗二叉树，其中每个结点都含有一个Comparable的键（以及相关的值）且每个结点的键都大于其左子树的任意结点的键而小于右子树的任意结点的键.\n\n每一个二叉搜索树的左右子树也都是一个二叉搜索树\n\n二叉搜索树如果用中序遍历一下，就是一个从小到大的递增序列\n\n下图是一颗二叉查找树, 中序遍历得到的结果是 A C E H R S X\n\n{% asset_img WechatIMG170.png '二叉查找树' %}\n\n### 二叉查找树查找\n\n在二叉查找树中分别查找 R 和 T\n\n- R: 先找根节点 **S**, R小于S, 在 S的左子树查找, 左子树根节点 **E**, R大于 E, 则在E的右子树找, 右子树根节点 **R**, 命中.\n- T: 先找根节点 **S**, T小于S, 在 S的右子树查找, 左子树根节点 **X**, T小于 X, 则在E的右子树找, 左子树根节点为空, 未命中\n\n{% asset_img WechatIMG171.png '二叉查找树查找' %}\n\n### 二叉查找树插入 \n\n二叉查找树的查找几乎和二分查找的一样简单,而且插入的实现难度和查找差不多,\n当要插入的节点的键在二叉查找树查找树命中时,则直接替换命中键的值.未被命中为空节点时,如果被查找的键小于空节点根结点的键，我们会继续在左子树中插入该键，否则在右子树中插入该键。\n\n{% asset_img WechatIMG172.png '二叉查找树插入' %}\n\n\n### 平衡二叉树的2-3树·概念\n\n什么是平衡二叉树:\n\n- 可以是空树。\n- 假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过 1。\n\n### 分析\n\n使用二叉查找树的算法的运行时间取决于树的形状，而树的形状又取决于键被插入的先后顺序。在最好的情况下，一棵含有 N 个结点的树是完全平衡的，每条空链接和根结点的距离都为 **logN**。在最坏的情况下，搜索路径上可能有 **N**个结点, 变成了一个链表.如图所示。但在一般情况下树的形状和最好情况更接近。\n\n{% asset_img WechatIMG173.png '二叉查找树的最优和最坏情况' %}\n\n## 2-3树\n\n上面说到,一颗二叉查找树在最差情况下会退化为链表,它的插入和查找的时间复杂度均为**N**,此时的性能是很糟糕的.为了保证二分查找树的平衡性,将运行时间控制在对数级,引入了**2-3树**概念\n\n### 2-3树定义\n\n为了保证查找树的平衡性,我们允许树中一个节点储存多个键来获得更多的灵活性.一个2-3查找树或由以下节点组成:\n\n- 2-节点: 标准的二叉查找树中的节点.含有**一个键**（及其对应的值）和**两条链接**,左链接指向的目标节点中的键都小于该结点，右链接指向的目标节点的键都大于该结点。 \n\n- 3-节点: 含有**两个键**（及其对应的值）和**三条链接**，**左链接**指向的目标节点的键都**小于**该结点，中链接指向的目标节点中的键都位于该结点的两个键之间，右链接指向的目标节点中的键都大于该结点。\n\n**注: 一棵完美平衡的 2-3 查找树中的所有空链接到根结点的距离都应该是相同的。简洁起见，这里我们用 2-3 树指代一棵完美平衡的 2-3 查找树（在其他情况下这个词应该表示一种更一般的结构）**\n\n{% asset_img WechatIMG174.png '2-3树·' %}\n\n### 2-3树的查找\n\n将二叉查找树的查找算法一般化我们就能够直接得到 2-3 树的查找算法。要判断一个键是否在树中，我们先将它和根结点中的键比较。如果它和其中任意一个相等，查找命中；否则我们就根据比较的结果找到指向相应区间的链接，并在其指向的子树中递归地继续查找。如果这是个空链接，查找未命中\n\n下图为对H的命中查找及对B的未命中查找:\n\n{% asset_img WechatIMG175.png '2-3树查找' %}\n\n### 2-3树插入\n\n空树的插入很简单,创建一个节点即可.非空树则分四种情况:\n\n- 向2-节点中插入元素；\n \n- 向一颗只含有一个3-节点的树中插入元素；\n \n- 向一个父节点为2-节点的3-节点中插入元素；\n \n- 向一个父节点为3-节点的3-节点中插入元素2-3树\n\n#### 向2-节点中插入元素\n\n如果未命中查找结束于2-节点, 我们只要把这个 2- 结点替换为一个 3- 结点\n\n{% asset_img WechatIMG176.png '向2-节点中插入元素' %}\n\n#### 向一颗只含有一个3-节点的树中插入元素\n\n我们先临时将新键存入该结点中，使之成为一个 4- 结点, 然后将它转换为一棵由 3 个 2- 结点组成的 2-3 树, 中间的节点变成左右节点的父节点. 构成的这棵树既是一棵含有 3 个结点的二叉查找树，同时也是一棵完美平衡的 2-3 树\n\n{% asset_img WechatIMG177.png '向一棵只含有一个3-结点的树中插入新键' %}\n\n#### 向一个父节点为2-节点的3-节点中插入元素\n\n我们先像刚才一样构造一个临时的 4- 结点并将其分解, 但此时我们不会为中键创建一个新结点，而是将其移动至原来的父结点中, 父结点是一个 2- 结点（一个键两条链接），\n插入之后变为了一个 3- 结点. 这次转换也并不影响（完美平衡的）2-3 树的主要性质。树仍然是有序的，因为中键被移动到父结点中去了；树仍然是完美平衡的，\n插入后所有的空链接到根结点的距离仍然相同\n\n{% asset_img WechatIMG178.png '向一个父节点为2-节点的3-节点中插入元素' %}\n\n#### 向一个父节点为3-节点的3-节点中插入元素\n\n再次和刚才一样构造一个临时的 4- 结点并分解它，然后将它的中键插入它的父结点中。但父结点也是一个 3- 结点，因此我们再用这个中键构造一个新的临时 4- 结点，然后在这个结点上进行相同的变换，即分解这个父结点并将它的中键插入到它的父结点中去。推广到一般情况，我们就这样一直向上不断分解临时的 4- 结点并将中键插入更高层的父结点，直至遇到一个 2- 结点并将它替换为一个不需要继续分解的 3- 结点，或者是到达 3- 结点的根,然后将它转换为一棵由 3 个 2- 结点组成的 2-3 树\n\n{% asset_img WechatIMG179.png '向一个父节点为3-节点的3-节点中插入元素' %}\n\n分解根节点\n\n{% asset_img WechatIMG180.png '分解根节点' %}\n\n### 2-3树节点关系\n\n{% asset_img WechatIMG181.png '2-3树节点关系' %}\n\n### 2-3树构造轨迹: 即使升序插入也不会退化为链表,如下图所示:\n\n{% asset_img WechatIMG182.png '2-3树构造轨迹' %}\n\n### 性质:\n\n和标准的二叉查找树由上向下生长不同，2-3 树的生长是由下向上的\n\n> **命题 F**在一棵大小为  的 2-3 树中，查找和插入操作访问的结点必然不超过**lgN**\n\n> **证明**。一棵含有 N 个结点的 2-3 树的高度在 **log3 N**（如果树中全是 3- 结点）和 **log2 N**（如果树中全是 2- 结点）之间\n\n## 红黑树二叉搜索树\n\n上文中2-3树可以实现树的**有序性**与**平衡性**,但是要维护两种不同类型的节点(2-节点与**3-节点**),将被查找的键和结点中的每个键进行比较，将链接和其他信息从一种结点复制到另一种结点，将结点从一种数据类型转换到另一种数据类型，等等。实现这些不仅需要大量的代码，而且它们所产生的额外开销可能会使算法比标准的二叉查找树更慢.\n\n### 红黑树二叉搜索树替换2-3树\n\n红黑二叉查找树背后的基本思想是用标准的二叉查找树（完全由 2- 结点构成）和一些额外的\n信息（替换 3- 结点）来表示 2-3 树.树的链接分为两种: **红链接**将两个 2- 结点\n连\n\n{% asset_img WechatIMG183.png '红黑树二叉搜索树替换2-3树' %}\n\n### 红黑树二叉搜索树定义\n\n红黑树是含有红黑链接并满足下列条件的二叉查找树：\n\n- 红链接均为左链接；\n- 没有任何一个结点同时和两条红链接相连；\n- 该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同。\n\n满足这样定义的红黑树和相应的 2-3 树是一一对应的\n\n{% asset_img WechatIMG184.png '红黑树和相应的2-3 树' %}\n\n### 红黑树二叉搜索树的插入\n\n每次插入的节点的时候都将节点的颜色初始化为红色\n\n#### 旋转\n\n在我们实现的某些操作中(比如插入)可能会出现红色右链接或者两条连续的红链接,\n需要通过**旋转**和**变换颜色**修复,旋转操作会改变红链接的指向, \n\n#### 左旋转\n\n{% asset_img WechatIMG185.png '红黑树左旋转' %}\n\n#### 右旋转\n\n{% asset_img WechatIMG186.png '红黑树右旋转' %}\n\n无论是rotateRight()或rotateLeft() , 我们总是将其返回值重置父结点（或是根结点),且保留原来父节点的颜色(将 x.color 设为 h.color)\n\n#### 颜色变换\n\n当我们的节点经过左右旋转时,有可能出现左右节点均为红色的场景,此时,我们需要颜色变换.\n\n我们专门用一个方法 **flipColors()** 来转换一个结点的两个红色子结点\n的颜色。除了将子结点的颜色由红变黑之外，我们同时还要将**父结点的颜色由黑变红**(相当于父节点上浮,和它的父节点结合成为一个3-节点),这项\n操作和旋转操作一样是局部变换，不会影响整棵树的黑色平衡性.\n\n{% asset_img WechatIMG187.png '红黑树颜色变换' %}\n\n### 红黑树的链接向上传递\n\n只要谨慎地使用左旋转、右旋转和颜色转换这三种简单的操作, 在沿着插入点到根结点的路径向上移动时在所经过\n的每个结点中顺序完成以下操作，我们就能完成插入操作：\n\n- 如果右子结点是红色的而左子结点是黑色的，进行左旋转；\n- 如果左子结点是红色的且它的左子结点也是红色的，进行右旋转；\n- 如果左右子结点均为红色，进行颜色转换。\n\n注意,红黑树的根节点为黑色!\n\n### 复合的插入过程\n\n{% asset_img WechatIMG188.png '复合的插入过程' %}\n\n### 完整得建立一颗红黑树\n\n{% asset_img WechatIMG189.png '完整得建立一颗红黑树' %}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/search.md","raw":"---\ntitle: 几种查找的数据结构(二叉搜索树、2-3树及红黑树)\ndate: 2022-06-12 23:46:38\ntags: algorithm\ncategories: \n- algorithm\n- binary search tree\n---\n\n现代计算机和网络使我们能够访问海量的信息。高效检索这些信息的能力是处理它们的重要前提.本文主要介绍几种经典的数据结构,及分析其插入和查找效率\n\n<!--more-->\n## 链表\n\n下图为一个基于单向链表的添加与查找的轨迹.每次插入一个新元素前先查找是否存在相同的key,不存在则在首部新增一个节点,存在则替换当前节点的值.\n\n{% asset_img WechatIMG167.png '同异步分类' %}\n\n由上图可知,一个链表长度为N插入一个新数据的时间复杂度为 O(1), 即只需在首部插入即可.而查找,需要每个节点依次寻找,最好为1,最差为N.\n平均时间复杂度为O(N)\n\n## 有序数组\n\n无序数组与链表类似,查询依次为O(N),添加为O(1);\n\n有序数组的查找分两种: 一种是顺序查找时间复杂度为O(N), 另一种是二分查找时间复杂度是O(logN).添加时间复杂度为O(N), 插入流程如下图:\n\n{% asset_img WechatIMG168.png '同异步分类' %}\n\n## 二叉查找树\n\n以上两种数据结构插入和查找的时间复杂度如下表\n\n| 数据结构  |   查找   |   插入   |\n| :----: | :----: | :----:|\n| 链表 | O(N) | O(1) |\n| 有序数组(顺序查找) | O(N) | O(N) |\n| 有序数组(二分查找) | O(log N) | O(N) |\n\n由上图可以看出不论是链表与数组,他的查找和插入顺序都不是很尽如人意, 若构建一个长度为N的数据,两种存储方式:\n\n- 链表: 插入次数 为 N * 1, 查询替换为 N * N, 查询速度太慢\n- 数组(二分查找): 插入为 N * N, 查询替换为 NlogN, 插入速度太慢\n\n那有没有一个数据结构能不能兼具查询和插入都足够效率的优点呢.这里我们先介绍下二叉查找树的基本特征.然后再分析\n\n### 二叉查找树定义\n\n一颗二叉查找树（BST）是一颗二叉树，其中每个结点都含有一个Comparable的键（以及相关的值）且每个结点的键都大于其左子树的任意结点的键而小于右子树的任意结点的键.\n\n每一个二叉搜索树的左右子树也都是一个二叉搜索树\n\n二叉搜索树如果用中序遍历一下，就是一个从小到大的递增序列\n\n下图是一颗二叉查找树, 中序遍历得到的结果是 A C E H R S X\n\n{% asset_img WechatIMG170.png '二叉查找树' %}\n\n### 二叉查找树查找\n\n在二叉查找树中分别查找 R 和 T\n\n- R: 先找根节点 **S**, R小于S, 在 S的左子树查找, 左子树根节点 **E**, R大于 E, 则在E的右子树找, 右子树根节点 **R**, 命中.\n- T: 先找根节点 **S**, T小于S, 在 S的右子树查找, 左子树根节点 **X**, T小于 X, 则在E的右子树找, 左子树根节点为空, 未命中\n\n{% asset_img WechatIMG171.png '二叉查找树查找' %}\n\n### 二叉查找树插入 \n\n二叉查找树的查找几乎和二分查找的一样简单,而且插入的实现难度和查找差不多,\n当要插入的节点的键在二叉查找树查找树命中时,则直接替换命中键的值.未被命中为空节点时,如果被查找的键小于空节点根结点的键，我们会继续在左子树中插入该键，否则在右子树中插入该键。\n\n{% asset_img WechatIMG172.png '二叉查找树插入' %}\n\n\n### 平衡二叉树的2-3树·概念\n\n什么是平衡二叉树:\n\n- 可以是空树。\n- 假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过 1。\n\n### 分析\n\n使用二叉查找树的算法的运行时间取决于树的形状，而树的形状又取决于键被插入的先后顺序。在最好的情况下，一棵含有 N 个结点的树是完全平衡的，每条空链接和根结点的距离都为 **logN**。在最坏的情况下，搜索路径上可能有 **N**个结点, 变成了一个链表.如图所示。但在一般情况下树的形状和最好情况更接近。\n\n{% asset_img WechatIMG173.png '二叉查找树的最优和最坏情况' %}\n\n## 2-3树\n\n上面说到,一颗二叉查找树在最差情况下会退化为链表,它的插入和查找的时间复杂度均为**N**,此时的性能是很糟糕的.为了保证二分查找树的平衡性,将运行时间控制在对数级,引入了**2-3树**概念\n\n### 2-3树定义\n\n为了保证查找树的平衡性,我们允许树中一个节点储存多个键来获得更多的灵活性.一个2-3查找树或由以下节点组成:\n\n- 2-节点: 标准的二叉查找树中的节点.含有**一个键**（及其对应的值）和**两条链接**,左链接指向的目标节点中的键都小于该结点，右链接指向的目标节点的键都大于该结点。 \n\n- 3-节点: 含有**两个键**（及其对应的值）和**三条链接**，**左链接**指向的目标节点的键都**小于**该结点，中链接指向的目标节点中的键都位于该结点的两个键之间，右链接指向的目标节点中的键都大于该结点。\n\n**注: 一棵完美平衡的 2-3 查找树中的所有空链接到根结点的距离都应该是相同的。简洁起见，这里我们用 2-3 树指代一棵完美平衡的 2-3 查找树（在其他情况下这个词应该表示一种更一般的结构）**\n\n{% asset_img WechatIMG174.png '2-3树·' %}\n\n### 2-3树的查找\n\n将二叉查找树的查找算法一般化我们就能够直接得到 2-3 树的查找算法。要判断一个键是否在树中，我们先将它和根结点中的键比较。如果它和其中任意一个相等，查找命中；否则我们就根据比较的结果找到指向相应区间的链接，并在其指向的子树中递归地继续查找。如果这是个空链接，查找未命中\n\n下图为对H的命中查找及对B的未命中查找:\n\n{% asset_img WechatIMG175.png '2-3树查找' %}\n\n### 2-3树插入\n\n空树的插入很简单,创建一个节点即可.非空树则分四种情况:\n\n- 向2-节点中插入元素；\n \n- 向一颗只含有一个3-节点的树中插入元素；\n \n- 向一个父节点为2-节点的3-节点中插入元素；\n \n- 向一个父节点为3-节点的3-节点中插入元素2-3树\n\n#### 向2-节点中插入元素\n\n如果未命中查找结束于2-节点, 我们只要把这个 2- 结点替换为一个 3- 结点\n\n{% asset_img WechatIMG176.png '向2-节点中插入元素' %}\n\n#### 向一颗只含有一个3-节点的树中插入元素\n\n我们先临时将新键存入该结点中，使之成为一个 4- 结点, 然后将它转换为一棵由 3 个 2- 结点组成的 2-3 树, 中间的节点变成左右节点的父节点. 构成的这棵树既是一棵含有 3 个结点的二叉查找树，同时也是一棵完美平衡的 2-3 树\n\n{% asset_img WechatIMG177.png '向一棵只含有一个3-结点的树中插入新键' %}\n\n#### 向一个父节点为2-节点的3-节点中插入元素\n\n我们先像刚才一样构造一个临时的 4- 结点并将其分解, 但此时我们不会为中键创建一个新结点，而是将其移动至原来的父结点中, 父结点是一个 2- 结点（一个键两条链接），\n插入之后变为了一个 3- 结点. 这次转换也并不影响（完美平衡的）2-3 树的主要性质。树仍然是有序的，因为中键被移动到父结点中去了；树仍然是完美平衡的，\n插入后所有的空链接到根结点的距离仍然相同\n\n{% asset_img WechatIMG178.png '向一个父节点为2-节点的3-节点中插入元素' %}\n\n#### 向一个父节点为3-节点的3-节点中插入元素\n\n再次和刚才一样构造一个临时的 4- 结点并分解它，然后将它的中键插入它的父结点中。但父结点也是一个 3- 结点，因此我们再用这个中键构造一个新的临时 4- 结点，然后在这个结点上进行相同的变换，即分解这个父结点并将它的中键插入到它的父结点中去。推广到一般情况，我们就这样一直向上不断分解临时的 4- 结点并将中键插入更高层的父结点，直至遇到一个 2- 结点并将它替换为一个不需要继续分解的 3- 结点，或者是到达 3- 结点的根,然后将它转换为一棵由 3 个 2- 结点组成的 2-3 树\n\n{% asset_img WechatIMG179.png '向一个父节点为3-节点的3-节点中插入元素' %}\n\n分解根节点\n\n{% asset_img WechatIMG180.png '分解根节点' %}\n\n### 2-3树节点关系\n\n{% asset_img WechatIMG181.png '2-3树节点关系' %}\n\n### 2-3树构造轨迹: 即使升序插入也不会退化为链表,如下图所示:\n\n{% asset_img WechatIMG182.png '2-3树构造轨迹' %}\n\n### 性质:\n\n和标准的二叉查找树由上向下生长不同，2-3 树的生长是由下向上的\n\n> **命题 F**在一棵大小为  的 2-3 树中，查找和插入操作访问的结点必然不超过**lgN**\n\n> **证明**。一棵含有 N 个结点的 2-3 树的高度在 **log3 N**（如果树中全是 3- 结点）和 **log2 N**（如果树中全是 2- 结点）之间\n\n## 红黑树二叉搜索树\n\n上文中2-3树可以实现树的**有序性**与**平衡性**,但是要维护两种不同类型的节点(2-节点与**3-节点**),将被查找的键和结点中的每个键进行比较，将链接和其他信息从一种结点复制到另一种结点，将结点从一种数据类型转换到另一种数据类型，等等。实现这些不仅需要大量的代码，而且它们所产生的额外开销可能会使算法比标准的二叉查找树更慢.\n\n### 红黑树二叉搜索树替换2-3树\n\n红黑二叉查找树背后的基本思想是用标准的二叉查找树（完全由 2- 结点构成）和一些额外的\n信息（替换 3- 结点）来表示 2-3 树.树的链接分为两种: **红链接**将两个 2- 结点\n连\n\n{% asset_img WechatIMG183.png '红黑树二叉搜索树替换2-3树' %}\n\n### 红黑树二叉搜索树定义\n\n红黑树是含有红黑链接并满足下列条件的二叉查找树：\n\n- 红链接均为左链接；\n- 没有任何一个结点同时和两条红链接相连；\n- 该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同。\n\n满足这样定义的红黑树和相应的 2-3 树是一一对应的\n\n{% asset_img WechatIMG184.png '红黑树和相应的2-3 树' %}\n\n### 红黑树二叉搜索树的插入\n\n每次插入的节点的时候都将节点的颜色初始化为红色\n\n#### 旋转\n\n在我们实现的某些操作中(比如插入)可能会出现红色右链接或者两条连续的红链接,\n需要通过**旋转**和**变换颜色**修复,旋转操作会改变红链接的指向, \n\n#### 左旋转\n\n{% asset_img WechatIMG185.png '红黑树左旋转' %}\n\n#### 右旋转\n\n{% asset_img WechatIMG186.png '红黑树右旋转' %}\n\n无论是rotateRight()或rotateLeft() , 我们总是将其返回值重置父结点（或是根结点),且保留原来父节点的颜色(将 x.color 设为 h.color)\n\n#### 颜色变换\n\n当我们的节点经过左右旋转时,有可能出现左右节点均为红色的场景,此时,我们需要颜色变换.\n\n我们专门用一个方法 **flipColors()** 来转换一个结点的两个红色子结点\n的颜色。除了将子结点的颜色由红变黑之外，我们同时还要将**父结点的颜色由黑变红**(相当于父节点上浮,和它的父节点结合成为一个3-节点),这项\n操作和旋转操作一样是局部变换，不会影响整棵树的黑色平衡性.\n\n{% asset_img WechatIMG187.png '红黑树颜色变换' %}\n\n### 红黑树的链接向上传递\n\n只要谨慎地使用左旋转、右旋转和颜色转换这三种简单的操作, 在沿着插入点到根结点的路径向上移动时在所经过\n的每个结点中顺序完成以下操作，我们就能完成插入操作：\n\n- 如果右子结点是红色的而左子结点是黑色的，进行左旋转；\n- 如果左子结点是红色的且它的左子结点也是红色的，进行右旋转；\n- 如果左右子结点均为红色，进行颜色转换。\n\n注意,红黑树的根节点为黑色!\n\n### 复合的插入过程\n\n{% asset_img WechatIMG188.png '复合的插入过程' %}\n\n### 完整得建立一颗红黑树\n\n{% asset_img WechatIMG189.png '完整得建立一颗红黑树' %}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"search","published":1,"updated":"2022-06-22T06:04:45.872Z","_id":"cl4edjhxu0006s696ctvd1631","comments":1,"layout":"post","photos":[],"link":"","content":"<p>现代计算机和网络使我们能够访问海量的信息。高效检索这些信息的能力是处理它们的重要前提.本文主要介绍几种经典的数据结构,及分析其插入和查找效率</p>\n<span id=\"more\"></span>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p>下图为一个基于单向链表的添加与查找的轨迹.每次插入一个新元素前先查找是否存在相同的key,不存在则在首部新增一个节点,存在则替换当前节点的值.</p>\n<img src=\"/2022/06/12/search/WechatIMG167.png\" class=\"\" title=\"同异步分类\">\n\n<p>由上图可知,一个链表长度为N插入一个新数据的时间复杂度为 O(1), 即只需在首部插入即可.而查找,需要每个节点依次寻找,最好为1,最差为N.<br>平均时间复杂度为O(N)</p>\n<h2 id=\"有序数组\"><a href=\"#有序数组\" class=\"headerlink\" title=\"有序数组\"></a>有序数组</h2><p>无序数组与链表类似,查询依次为O(N),添加为O(1);</p>\n<p>有序数组的查找分两种: 一种是顺序查找时间复杂度为O(N), 另一种是二分查找时间复杂度是O(logN).添加时间复杂度为O(N), 插入流程如下图:</p>\n<img src=\"/2022/06/12/search/WechatIMG168.png\" class=\"\" title=\"同异步分类\">\n\n<h2 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h2><p>以上两种数据结构插入和查找的时间复杂度如下表</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">数据结构</th>\n<th align=\"center\">查找</th>\n<th align=\"center\">插入</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">链表</td>\n<td align=\"center\">O(N)</td>\n<td align=\"center\">O(1)</td>\n</tr>\n<tr>\n<td align=\"center\">有序数组(顺序查找)</td>\n<td align=\"center\">O(N)</td>\n<td align=\"center\">O(N)</td>\n</tr>\n<tr>\n<td align=\"center\">有序数组(二分查找)</td>\n<td align=\"center\">O(log N)</td>\n<td align=\"center\">O(N)</td>\n</tr>\n</tbody></table>\n<p>由上图可以看出不论是链表与数组,他的查找和插入顺序都不是很尽如人意, 若构建一个长度为N的数据,两种存储方式:</p>\n<ul>\n<li>链表: 插入次数 为 N * 1, 查询替换为 N * N, 查询速度太慢</li>\n<li>数组(二分查找): 插入为 N * N, 查询替换为 NlogN, 插入速度太慢</li>\n</ul>\n<p>那有没有一个数据结构能不能兼具查询和插入都足够效率的优点呢.这里我们先介绍下二叉查找树的基本特征.然后再分析</p>\n<h3 id=\"二叉查找树定义\"><a href=\"#二叉查找树定义\" class=\"headerlink\" title=\"二叉查找树定义\"></a>二叉查找树定义</h3><p>一颗二叉查找树（BST）是一颗二叉树，其中每个结点都含有一个Comparable的键（以及相关的值）且每个结点的键都大于其左子树的任意结点的键而小于右子树的任意结点的键.</p>\n<p>每一个二叉搜索树的左右子树也都是一个二叉搜索树</p>\n<p>二叉搜索树如果用中序遍历一下，就是一个从小到大的递增序列</p>\n<p>下图是一颗二叉查找树, 中序遍历得到的结果是 A C E H R S X</p>\n<img src=\"/2022/06/12/search/WechatIMG170.png\" class=\"\" title=\"二叉查找树\">\n\n<h3 id=\"二叉查找树查找\"><a href=\"#二叉查找树查找\" class=\"headerlink\" title=\"二叉查找树查找\"></a>二叉查找树查找</h3><p>在二叉查找树中分别查找 R 和 T</p>\n<ul>\n<li>R: 先找根节点 <strong>S</strong>, R小于S, 在 S的左子树查找, 左子树根节点 <strong>E</strong>, R大于 E, 则在E的右子树找, 右子树根节点 <strong>R</strong>, 命中.</li>\n<li>T: 先找根节点 <strong>S</strong>, T小于S, 在 S的右子树查找, 左子树根节点 <strong>X</strong>, T小于 X, 则在E的右子树找, 左子树根节点为空, 未命中</li>\n</ul>\n<img src=\"/2022/06/12/search/WechatIMG171.png\" class=\"\" title=\"二叉查找树查找\">\n\n<h3 id=\"二叉查找树插入\"><a href=\"#二叉查找树插入\" class=\"headerlink\" title=\"二叉查找树插入\"></a>二叉查找树插入</h3><p>二叉查找树的查找几乎和二分查找的一样简单,而且插入的实现难度和查找差不多,<br>当要插入的节点的键在二叉查找树查找树命中时,则直接替换命中键的值.未被命中为空节点时,如果被查找的键小于空节点根结点的键，我们会继续在左子树中插入该键，否则在右子树中插入该键。</p>\n<img src=\"/2022/06/12/search/WechatIMG172.png\" class=\"\" title=\"二叉查找树插入\">\n\n\n<h3 id=\"平衡二叉树的2-3树·概念\"><a href=\"#平衡二叉树的2-3树·概念\" class=\"headerlink\" title=\"平衡二叉树的2-3树·概念\"></a>平衡二叉树的2-3树·概念</h3><p>什么是平衡二叉树:</p>\n<ul>\n<li>可以是空树。</li>\n<li>假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过 1。</li>\n</ul>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>使用二叉查找树的算法的运行时间取决于树的形状，而树的形状又取决于键被插入的先后顺序。在最好的情况下，一棵含有 N 个结点的树是完全平衡的，每条空链接和根结点的距离都为 <strong>logN</strong>。在最坏的情况下，搜索路径上可能有 <strong>N</strong>个结点, 变成了一个链表.如图所示。但在一般情况下树的形状和最好情况更接近。</p>\n<img src=\"/2022/06/12/search/WechatIMG173.png\" class=\"\" title=\"二叉查找树的最优和最坏情况\">\n\n<h2 id=\"2-3树\"><a href=\"#2-3树\" class=\"headerlink\" title=\"2-3树\"></a>2-3树</h2><p>上面说到,一颗二叉查找树在最差情况下会退化为链表,它的插入和查找的时间复杂度均为<strong>N</strong>,此时的性能是很糟糕的.为了保证二分查找树的平衡性,将运行时间控制在对数级,引入了<strong>2-3树</strong>概念</p>\n<h3 id=\"2-3树定义\"><a href=\"#2-3树定义\" class=\"headerlink\" title=\"2-3树定义\"></a>2-3树定义</h3><p>为了保证查找树的平衡性,我们允许树中一个节点储存多个键来获得更多的灵活性.一个2-3查找树或由以下节点组成:</p>\n<ul>\n<li><p>2-节点: 标准的二叉查找树中的节点.含有<strong>一个键</strong>（及其对应的值）和<strong>两条链接</strong>,左链接指向的目标节点中的键都小于该结点，右链接指向的目标节点的键都大于该结点。 </p>\n</li>\n<li><p>3-节点: 含有<strong>两个键</strong>（及其对应的值）和<strong>三条链接</strong>，<strong>左链接</strong>指向的目标节点的键都<strong>小于</strong>该结点，中链接指向的目标节点中的键都位于该结点的两个键之间，右链接指向的目标节点中的键都大于该结点。</p>\n</li>\n</ul>\n<p><strong>注: 一棵完美平衡的 2-3 查找树中的所有空链接到根结点的距离都应该是相同的。简洁起见，这里我们用 2-3 树指代一棵完美平衡的 2-3 查找树（在其他情况下这个词应该表示一种更一般的结构）</strong></p>\n<img src=\"/2022/06/12/search/WechatIMG174.png\" class=\"\" title=\"2-3树·\">\n\n<h3 id=\"2-3树的查找\"><a href=\"#2-3树的查找\" class=\"headerlink\" title=\"2-3树的查找\"></a>2-3树的查找</h3><p>将二叉查找树的查找算法一般化我们就能够直接得到 2-3 树的查找算法。要判断一个键是否在树中，我们先将它和根结点中的键比较。如果它和其中任意一个相等，查找命中；否则我们就根据比较的结果找到指向相应区间的链接，并在其指向的子树中递归地继续查找。如果这是个空链接，查找未命中</p>\n<p>下图为对H的命中查找及对B的未命中查找:</p>\n<img src=\"/2022/06/12/search/WechatIMG175.png\" class=\"\" title=\"2-3树查找\">\n\n<h3 id=\"2-3树插入\"><a href=\"#2-3树插入\" class=\"headerlink\" title=\"2-3树插入\"></a>2-3树插入</h3><p>空树的插入很简单,创建一个节点即可.非空树则分四种情况:</p>\n<ul>\n<li><p>向2-节点中插入元素；</p>\n</li>\n<li><p>向一颗只含有一个3-节点的树中插入元素；</p>\n</li>\n<li><p>向一个父节点为2-节点的3-节点中插入元素；</p>\n</li>\n<li><p>向一个父节点为3-节点的3-节点中插入元素2-3树</p>\n</li>\n</ul>\n<h4 id=\"向2-节点中插入元素\"><a href=\"#向2-节点中插入元素\" class=\"headerlink\" title=\"向2-节点中插入元素\"></a>向2-节点中插入元素</h4><p>如果未命中查找结束于2-节点, 我们只要把这个 2- 结点替换为一个 3- 结点</p>\n<img src=\"/2022/06/12/search/WechatIMG176.png\" class=\"\" title=\"向2-节点中插入元素\">\n\n<h4 id=\"向一颗只含有一个3-节点的树中插入元素\"><a href=\"#向一颗只含有一个3-节点的树中插入元素\" class=\"headerlink\" title=\"向一颗只含有一个3-节点的树中插入元素\"></a>向一颗只含有一个3-节点的树中插入元素</h4><p>我们先临时将新键存入该结点中，使之成为一个 4- 结点, 然后将它转换为一棵由 3 个 2- 结点组成的 2-3 树, 中间的节点变成左右节点的父节点. 构成的这棵树既是一棵含有 3 个结点的二叉查找树，同时也是一棵完美平衡的 2-3 树</p>\n\n\n<h4 id=\"向一个父节点为2-节点的3-节点中插入元素\"><a href=\"#向一个父节点为2-节点的3-节点中插入元素\" class=\"headerlink\" title=\"向一个父节点为2-节点的3-节点中插入元素\"></a>向一个父节点为2-节点的3-节点中插入元素</h4><p>我们先像刚才一样构造一个临时的 4- 结点并将其分解, 但此时我们不会为中键创建一个新结点，而是将其移动至原来的父结点中, 父结点是一个 2- 结点（一个键两条链接），<br>插入之后变为了一个 3- 结点. 这次转换也并不影响（完美平衡的）2-3 树的主要性质。树仍然是有序的，因为中键被移动到父结点中去了；树仍然是完美平衡的，<br>插入后所有的空链接到根结点的距离仍然相同</p>\n<img src=\"/2022/06/12/search/WechatIMG178.png\" class=\"\" title=\"向一个父节点为2-节点的3-节点中插入元素\">\n\n<h4 id=\"向一个父节点为3-节点的3-节点中插入元素\"><a href=\"#向一个父节点为3-节点的3-节点中插入元素\" class=\"headerlink\" title=\"向一个父节点为3-节点的3-节点中插入元素\"></a>向一个父节点为3-节点的3-节点中插入元素</h4><p>再次和刚才一样构造一个临时的 4- 结点并分解它，然后将它的中键插入它的父结点中。但父结点也是一个 3- 结点，因此我们再用这个中键构造一个新的临时 4- 结点，然后在这个结点上进行相同的变换，即分解这个父结点并将它的中键插入到它的父结点中去。推广到一般情况，我们就这样一直向上不断分解临时的 4- 结点并将中键插入更高层的父结点，直至遇到一个 2- 结点并将它替换为一个不需要继续分解的 3- 结点，或者是到达 3- 结点的根,然后将它转换为一棵由 3 个 2- 结点组成的 2-3 树</p>\n<img src=\"/2022/06/12/search/WechatIMG179.png\" class=\"\" title=\"向一个父节点为3-节点的3-节点中插入元素\">\n\n<p>分解根节点</p>\n<img src=\"/2022/06/12/search/WechatIMG180.png\" class=\"\" title=\"分解根节点\">\n\n<h3 id=\"2-3树节点关系\"><a href=\"#2-3树节点关系\" class=\"headerlink\" title=\"2-3树节点关系\"></a>2-3树节点关系</h3><img src=\"/2022/06/12/search/WechatIMG181.png\" class=\"\" title=\"2-3树节点关系\">\n\n<h3 id=\"2-3树构造轨迹-即使升序插入也不会退化为链表-如下图所示\"><a href=\"#2-3树构造轨迹-即使升序插入也不会退化为链表-如下图所示\" class=\"headerlink\" title=\"2-3树构造轨迹: 即使升序插入也不会退化为链表,如下图所示:\"></a>2-3树构造轨迹: 即使升序插入也不会退化为链表,如下图所示:</h3><img src=\"/2022/06/12/search/WechatIMG182.png\" class=\"\" title=\"2-3树构造轨迹\">\n\n<h3 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质:\"></a>性质:</h3><p>和标准的二叉查找树由上向下生长不同，2-3 树的生长是由下向上的</p>\n<blockquote>\n<p><strong>命题 F</strong>在一棵大小为  的 2-3 树中，查找和插入操作访问的结点必然不超过<strong>lgN</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>证明</strong>。一棵含有 N 个结点的 2-3 树的高度在 <strong>log3 N</strong>（如果树中全是 3- 结点）和 <strong>log2 N</strong>（如果树中全是 2- 结点）之间</p>\n</blockquote>\n<h2 id=\"红黑树二叉搜索树\"><a href=\"#红黑树二叉搜索树\" class=\"headerlink\" title=\"红黑树二叉搜索树\"></a>红黑树二叉搜索树</h2><p>上文中2-3树可以实现树的<strong>有序性</strong>与<strong>平衡性</strong>,但是要维护两种不同类型的节点(2-节点与<strong>3-节点</strong>),将被查找的键和结点中的每个键进行比较，将链接和其他信息从一种结点复制到另一种结点，将结点从一种数据类型转换到另一种数据类型，等等。实现这些不仅需要大量的代码，而且它们所产生的额外开销可能会使算法比标准的二叉查找树更慢.</p>\n<h3 id=\"红黑树二叉搜索树替换2-3树\"><a href=\"#红黑树二叉搜索树替换2-3树\" class=\"headerlink\" title=\"红黑树二叉搜索树替换2-3树\"></a>红黑树二叉搜索树替换2-3树</h3><p>红黑二叉查找树背后的基本思想是用标准的二叉查找树（完全由 2- 结点构成）和一些额外的<br>信息（替换 3- 结点）来表示 2-3 树.树的链接分为两种: <strong>红链接</strong>将两个 2- 结点<br>连</p>\n<img src=\"/2022/06/12/search/WechatIMG183.png\" class=\"\" title=\"红黑树二叉搜索树替换2-3树\">\n\n<h3 id=\"红黑树二叉搜索树定义\"><a href=\"#红黑树二叉搜索树定义\" class=\"headerlink\" title=\"红黑树二叉搜索树定义\"></a>红黑树二叉搜索树定义</h3><p>红黑树是含有红黑链接并满足下列条件的二叉查找树：</p>\n<ul>\n<li>红链接均为左链接；</li>\n<li>没有任何一个结点同时和两条红链接相连；</li>\n<li>该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同。</li>\n</ul>\n<p>满足这样定义的红黑树和相应的 2-3 树是一一对应的</p>\n<img src=\"/2022/06/12/search/WechatIMG184.png\" class=\"\" title=\"红黑树和相应的2-3 树\">\n\n<h3 id=\"红黑树二叉搜索树的插入\"><a href=\"#红黑树二叉搜索树的插入\" class=\"headerlink\" title=\"红黑树二叉搜索树的插入\"></a>红黑树二叉搜索树的插入</h3><p>每次插入的节点的时候都将节点的颜色初始化为红色</p>\n<h4 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h4><p>在我们实现的某些操作中(比如插入)可能会出现红色右链接或者两条连续的红链接,<br>需要通过<strong>旋转</strong>和<strong>变换颜色</strong>修复,旋转操作会改变红链接的指向, </p>\n<h4 id=\"左旋转\"><a href=\"#左旋转\" class=\"headerlink\" title=\"左旋转\"></a>左旋转</h4><img src=\"/2022/06/12/search/WechatIMG185.png\" class=\"\" title=\"红黑树左旋转\">\n\n<h4 id=\"右旋转\"><a href=\"#右旋转\" class=\"headerlink\" title=\"右旋转\"></a>右旋转</h4><img src=\"/2022/06/12/search/WechatIMG186.png\" class=\"\" title=\"红黑树右旋转\">\n\n<p>无论是rotateRight()或rotateLeft() , 我们总是将其返回值重置父结点（或是根结点),且保留原来父节点的颜色(将 x.color 设为 h.color)</p>\n<h4 id=\"颜色变换\"><a href=\"#颜色变换\" class=\"headerlink\" title=\"颜色变换\"></a>颜色变换</h4><p>当我们的节点经过左右旋转时,有可能出现左右节点均为红色的场景,此时,我们需要颜色变换.</p>\n<p>我们专门用一个方法 <strong>flipColors()</strong> 来转换一个结点的两个红色子结点<br>的颜色。除了将子结点的颜色由红变黑之外，我们同时还要将<strong>父结点的颜色由黑变红</strong>(相当于父节点上浮,和它的父节点结合成为一个3-节点),这项<br>操作和旋转操作一样是局部变换，不会影响整棵树的黑色平衡性.</p>\n<img src=\"/2022/06/12/search/WechatIMG187.png\" class=\"\" title=\"红黑树颜色变换\">\n\n<h3 id=\"红黑树的链接向上传递\"><a href=\"#红黑树的链接向上传递\" class=\"headerlink\" title=\"红黑树的链接向上传递\"></a>红黑树的链接向上传递</h3><p>只要谨慎地使用左旋转、右旋转和颜色转换这三种简单的操作, 在沿着插入点到根结点的路径向上移动时在所经过<br>的每个结点中顺序完成以下操作，我们就能完成插入操作：</p>\n<ul>\n<li>如果右子结点是红色的而左子结点是黑色的，进行左旋转；</li>\n<li>如果左子结点是红色的且它的左子结点也是红色的，进行右旋转；</li>\n<li>如果左右子结点均为红色，进行颜色转换。</li>\n</ul>\n<p>注意,红黑树的根节点为黑色!</p>\n<h3 id=\"复合的插入过程\"><a href=\"#复合的插入过程\" class=\"headerlink\" title=\"复合的插入过程\"></a>复合的插入过程</h3><img src=\"/2022/06/12/search/WechatIMG188.png\" class=\"\" title=\"复合的插入过程\">\n\n<h3 id=\"完整得建立一颗红黑树\"><a href=\"#完整得建立一颗红黑树\" class=\"headerlink\" title=\"完整得建立一颗红黑树\"></a>完整得建立一颗红黑树</h3><img src=\"/2022/06/12/search/WechatIMG189.png\" class=\"\" title=\"完整得建立一颗红黑树\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p>现代计算机和网络使我们能够访问海量的信息。高效检索这些信息的能力是处理它们的重要前提.本文主要介绍几种经典的数据结构,及分析其插入和查找效率</p>","more":"<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p>下图为一个基于单向链表的添加与查找的轨迹.每次插入一个新元素前先查找是否存在相同的key,不存在则在首部新增一个节点,存在则替换当前节点的值.</p>\n<img src=\"/2022/06/12/search/WechatIMG167.png\" class=\"\" title=\"同异步分类\">\n\n<p>由上图可知,一个链表长度为N插入一个新数据的时间复杂度为 O(1), 即只需在首部插入即可.而查找,需要每个节点依次寻找,最好为1,最差为N.<br>平均时间复杂度为O(N)</p>\n<h2 id=\"有序数组\"><a href=\"#有序数组\" class=\"headerlink\" title=\"有序数组\"></a>有序数组</h2><p>无序数组与链表类似,查询依次为O(N),添加为O(1);</p>\n<p>有序数组的查找分两种: 一种是顺序查找时间复杂度为O(N), 另一种是二分查找时间复杂度是O(logN).添加时间复杂度为O(N), 插入流程如下图:</p>\n<img src=\"/2022/06/12/search/WechatIMG168.png\" class=\"\" title=\"同异步分类\">\n\n<h2 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h2><p>以上两种数据结构插入和查找的时间复杂度如下表</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">数据结构</th>\n<th align=\"center\">查找</th>\n<th align=\"center\">插入</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">链表</td>\n<td align=\"center\">O(N)</td>\n<td align=\"center\">O(1)</td>\n</tr>\n<tr>\n<td align=\"center\">有序数组(顺序查找)</td>\n<td align=\"center\">O(N)</td>\n<td align=\"center\">O(N)</td>\n</tr>\n<tr>\n<td align=\"center\">有序数组(二分查找)</td>\n<td align=\"center\">O(log N)</td>\n<td align=\"center\">O(N)</td>\n</tr>\n</tbody></table>\n<p>由上图可以看出不论是链表与数组,他的查找和插入顺序都不是很尽如人意, 若构建一个长度为N的数据,两种存储方式:</p>\n<ul>\n<li>链表: 插入次数 为 N * 1, 查询替换为 N * N, 查询速度太慢</li>\n<li>数组(二分查找): 插入为 N * N, 查询替换为 NlogN, 插入速度太慢</li>\n</ul>\n<p>那有没有一个数据结构能不能兼具查询和插入都足够效率的优点呢.这里我们先介绍下二叉查找树的基本特征.然后再分析</p>\n<h3 id=\"二叉查找树定义\"><a href=\"#二叉查找树定义\" class=\"headerlink\" title=\"二叉查找树定义\"></a>二叉查找树定义</h3><p>一颗二叉查找树（BST）是一颗二叉树，其中每个结点都含有一个Comparable的键（以及相关的值）且每个结点的键都大于其左子树的任意结点的键而小于右子树的任意结点的键.</p>\n<p>每一个二叉搜索树的左右子树也都是一个二叉搜索树</p>\n<p>二叉搜索树如果用中序遍历一下，就是一个从小到大的递增序列</p>\n<p>下图是一颗二叉查找树, 中序遍历得到的结果是 A C E H R S X</p>\n<img src=\"/2022/06/12/search/WechatIMG170.png\" class=\"\" title=\"二叉查找树\">\n\n<h3 id=\"二叉查找树查找\"><a href=\"#二叉查找树查找\" class=\"headerlink\" title=\"二叉查找树查找\"></a>二叉查找树查找</h3><p>在二叉查找树中分别查找 R 和 T</p>\n<ul>\n<li>R: 先找根节点 <strong>S</strong>, R小于S, 在 S的左子树查找, 左子树根节点 <strong>E</strong>, R大于 E, 则在E的右子树找, 右子树根节点 <strong>R</strong>, 命中.</li>\n<li>T: 先找根节点 <strong>S</strong>, T小于S, 在 S的右子树查找, 左子树根节点 <strong>X</strong>, T小于 X, 则在E的右子树找, 左子树根节点为空, 未命中</li>\n</ul>\n<img src=\"/2022/06/12/search/WechatIMG171.png\" class=\"\" title=\"二叉查找树查找\">\n\n<h3 id=\"二叉查找树插入\"><a href=\"#二叉查找树插入\" class=\"headerlink\" title=\"二叉查找树插入\"></a>二叉查找树插入</h3><p>二叉查找树的查找几乎和二分查找的一样简单,而且插入的实现难度和查找差不多,<br>当要插入的节点的键在二叉查找树查找树命中时,则直接替换命中键的值.未被命中为空节点时,如果被查找的键小于空节点根结点的键，我们会继续在左子树中插入该键，否则在右子树中插入该键。</p>\n<img src=\"/2022/06/12/search/WechatIMG172.png\" class=\"\" title=\"二叉查找树插入\">\n\n\n<h3 id=\"平衡二叉树的2-3树·概念\"><a href=\"#平衡二叉树的2-3树·概念\" class=\"headerlink\" title=\"平衡二叉树的2-3树·概念\"></a>平衡二叉树的2-3树·概念</h3><p>什么是平衡二叉树:</p>\n<ul>\n<li>可以是空树。</li>\n<li>假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过 1。</li>\n</ul>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>使用二叉查找树的算法的运行时间取决于树的形状，而树的形状又取决于键被插入的先后顺序。在最好的情况下，一棵含有 N 个结点的树是完全平衡的，每条空链接和根结点的距离都为 <strong>logN</strong>。在最坏的情况下，搜索路径上可能有 <strong>N</strong>个结点, 变成了一个链表.如图所示。但在一般情况下树的形状和最好情况更接近。</p>\n<img src=\"/2022/06/12/search/WechatIMG173.png\" class=\"\" title=\"二叉查找树的最优和最坏情况\">\n\n<h2 id=\"2-3树\"><a href=\"#2-3树\" class=\"headerlink\" title=\"2-3树\"></a>2-3树</h2><p>上面说到,一颗二叉查找树在最差情况下会退化为链表,它的插入和查找的时间复杂度均为<strong>N</strong>,此时的性能是很糟糕的.为了保证二分查找树的平衡性,将运行时间控制在对数级,引入了<strong>2-3树</strong>概念</p>\n<h3 id=\"2-3树定义\"><a href=\"#2-3树定义\" class=\"headerlink\" title=\"2-3树定义\"></a>2-3树定义</h3><p>为了保证查找树的平衡性,我们允许树中一个节点储存多个键来获得更多的灵活性.一个2-3查找树或由以下节点组成:</p>\n<ul>\n<li><p>2-节点: 标准的二叉查找树中的节点.含有<strong>一个键</strong>（及其对应的值）和<strong>两条链接</strong>,左链接指向的目标节点中的键都小于该结点，右链接指向的目标节点的键都大于该结点。 </p>\n</li>\n<li><p>3-节点: 含有<strong>两个键</strong>（及其对应的值）和<strong>三条链接</strong>，<strong>左链接</strong>指向的目标节点的键都<strong>小于</strong>该结点，中链接指向的目标节点中的键都位于该结点的两个键之间，右链接指向的目标节点中的键都大于该结点。</p>\n</li>\n</ul>\n<p><strong>注: 一棵完美平衡的 2-3 查找树中的所有空链接到根结点的距离都应该是相同的。简洁起见，这里我们用 2-3 树指代一棵完美平衡的 2-3 查找树（在其他情况下这个词应该表示一种更一般的结构）</strong></p>\n<img src=\"/2022/06/12/search/WechatIMG174.png\" class=\"\" title=\"2-3树·\">\n\n<h3 id=\"2-3树的查找\"><a href=\"#2-3树的查找\" class=\"headerlink\" title=\"2-3树的查找\"></a>2-3树的查找</h3><p>将二叉查找树的查找算法一般化我们就能够直接得到 2-3 树的查找算法。要判断一个键是否在树中，我们先将它和根结点中的键比较。如果它和其中任意一个相等，查找命中；否则我们就根据比较的结果找到指向相应区间的链接，并在其指向的子树中递归地继续查找。如果这是个空链接，查找未命中</p>\n<p>下图为对H的命中查找及对B的未命中查找:</p>\n<img src=\"/2022/06/12/search/WechatIMG175.png\" class=\"\" title=\"2-3树查找\">\n\n<h3 id=\"2-3树插入\"><a href=\"#2-3树插入\" class=\"headerlink\" title=\"2-3树插入\"></a>2-3树插入</h3><p>空树的插入很简单,创建一个节点即可.非空树则分四种情况:</p>\n<ul>\n<li><p>向2-节点中插入元素；</p>\n</li>\n<li><p>向一颗只含有一个3-节点的树中插入元素；</p>\n</li>\n<li><p>向一个父节点为2-节点的3-节点中插入元素；</p>\n</li>\n<li><p>向一个父节点为3-节点的3-节点中插入元素2-3树</p>\n</li>\n</ul>\n<h4 id=\"向2-节点中插入元素\"><a href=\"#向2-节点中插入元素\" class=\"headerlink\" title=\"向2-节点中插入元素\"></a>向2-节点中插入元素</h4><p>如果未命中查找结束于2-节点, 我们只要把这个 2- 结点替换为一个 3- 结点</p>\n<img src=\"/2022/06/12/search/WechatIMG176.png\" class=\"\" title=\"向2-节点中插入元素\">\n\n<h4 id=\"向一颗只含有一个3-节点的树中插入元素\"><a href=\"#向一颗只含有一个3-节点的树中插入元素\" class=\"headerlink\" title=\"向一颗只含有一个3-节点的树中插入元素\"></a>向一颗只含有一个3-节点的树中插入元素</h4><p>我们先临时将新键存入该结点中，使之成为一个 4- 结点, 然后将它转换为一棵由 3 个 2- 结点组成的 2-3 树, 中间的节点变成左右节点的父节点. 构成的这棵树既是一棵含有 3 个结点的二叉查找树，同时也是一棵完美平衡的 2-3 树</p>\n\n\n<h4 id=\"向一个父节点为2-节点的3-节点中插入元素\"><a href=\"#向一个父节点为2-节点的3-节点中插入元素\" class=\"headerlink\" title=\"向一个父节点为2-节点的3-节点中插入元素\"></a>向一个父节点为2-节点的3-节点中插入元素</h4><p>我们先像刚才一样构造一个临时的 4- 结点并将其分解, 但此时我们不会为中键创建一个新结点，而是将其移动至原来的父结点中, 父结点是一个 2- 结点（一个键两条链接），<br>插入之后变为了一个 3- 结点. 这次转换也并不影响（完美平衡的）2-3 树的主要性质。树仍然是有序的，因为中键被移动到父结点中去了；树仍然是完美平衡的，<br>插入后所有的空链接到根结点的距离仍然相同</p>\n<img src=\"/2022/06/12/search/WechatIMG178.png\" class=\"\" title=\"向一个父节点为2-节点的3-节点中插入元素\">\n\n<h4 id=\"向一个父节点为3-节点的3-节点中插入元素\"><a href=\"#向一个父节点为3-节点的3-节点中插入元素\" class=\"headerlink\" title=\"向一个父节点为3-节点的3-节点中插入元素\"></a>向一个父节点为3-节点的3-节点中插入元素</h4><p>再次和刚才一样构造一个临时的 4- 结点并分解它，然后将它的中键插入它的父结点中。但父结点也是一个 3- 结点，因此我们再用这个中键构造一个新的临时 4- 结点，然后在这个结点上进行相同的变换，即分解这个父结点并将它的中键插入到它的父结点中去。推广到一般情况，我们就这样一直向上不断分解临时的 4- 结点并将中键插入更高层的父结点，直至遇到一个 2- 结点并将它替换为一个不需要继续分解的 3- 结点，或者是到达 3- 结点的根,然后将它转换为一棵由 3 个 2- 结点组成的 2-3 树</p>\n<img src=\"/2022/06/12/search/WechatIMG179.png\" class=\"\" title=\"向一个父节点为3-节点的3-节点中插入元素\">\n\n<p>分解根节点</p>\n<img src=\"/2022/06/12/search/WechatIMG180.png\" class=\"\" title=\"分解根节点\">\n\n<h3 id=\"2-3树节点关系\"><a href=\"#2-3树节点关系\" class=\"headerlink\" title=\"2-3树节点关系\"></a>2-3树节点关系</h3><img src=\"/2022/06/12/search/WechatIMG181.png\" class=\"\" title=\"2-3树节点关系\">\n\n<h3 id=\"2-3树构造轨迹-即使升序插入也不会退化为链表-如下图所示\"><a href=\"#2-3树构造轨迹-即使升序插入也不会退化为链表-如下图所示\" class=\"headerlink\" title=\"2-3树构造轨迹: 即使升序插入也不会退化为链表,如下图所示:\"></a>2-3树构造轨迹: 即使升序插入也不会退化为链表,如下图所示:</h3><img src=\"/2022/06/12/search/WechatIMG182.png\" class=\"\" title=\"2-3树构造轨迹\">\n\n<h3 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质:\"></a>性质:</h3><p>和标准的二叉查找树由上向下生长不同，2-3 树的生长是由下向上的</p>\n<blockquote>\n<p><strong>命题 F</strong>在一棵大小为  的 2-3 树中，查找和插入操作访问的结点必然不超过<strong>lgN</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>证明</strong>。一棵含有 N 个结点的 2-3 树的高度在 <strong>log3 N</strong>（如果树中全是 3- 结点）和 <strong>log2 N</strong>（如果树中全是 2- 结点）之间</p>\n</blockquote>\n<h2 id=\"红黑树二叉搜索树\"><a href=\"#红黑树二叉搜索树\" class=\"headerlink\" title=\"红黑树二叉搜索树\"></a>红黑树二叉搜索树</h2><p>上文中2-3树可以实现树的<strong>有序性</strong>与<strong>平衡性</strong>,但是要维护两种不同类型的节点(2-节点与<strong>3-节点</strong>),将被查找的键和结点中的每个键进行比较，将链接和其他信息从一种结点复制到另一种结点，将结点从一种数据类型转换到另一种数据类型，等等。实现这些不仅需要大量的代码，而且它们所产生的额外开销可能会使算法比标准的二叉查找树更慢.</p>\n<h3 id=\"红黑树二叉搜索树替换2-3树\"><a href=\"#红黑树二叉搜索树替换2-3树\" class=\"headerlink\" title=\"红黑树二叉搜索树替换2-3树\"></a>红黑树二叉搜索树替换2-3树</h3><p>红黑二叉查找树背后的基本思想是用标准的二叉查找树（完全由 2- 结点构成）和一些额外的<br>信息（替换 3- 结点）来表示 2-3 树.树的链接分为两种: <strong>红链接</strong>将两个 2- 结点<br>连</p>\n<img src=\"/2022/06/12/search/WechatIMG183.png\" class=\"\" title=\"红黑树二叉搜索树替换2-3树\">\n\n<h3 id=\"红黑树二叉搜索树定义\"><a href=\"#红黑树二叉搜索树定义\" class=\"headerlink\" title=\"红黑树二叉搜索树定义\"></a>红黑树二叉搜索树定义</h3><p>红黑树是含有红黑链接并满足下列条件的二叉查找树：</p>\n<ul>\n<li>红链接均为左链接；</li>\n<li>没有任何一个结点同时和两条红链接相连；</li>\n<li>该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同。</li>\n</ul>\n<p>满足这样定义的红黑树和相应的 2-3 树是一一对应的</p>\n<img src=\"/2022/06/12/search/WechatIMG184.png\" class=\"\" title=\"红黑树和相应的2-3 树\">\n\n<h3 id=\"红黑树二叉搜索树的插入\"><a href=\"#红黑树二叉搜索树的插入\" class=\"headerlink\" title=\"红黑树二叉搜索树的插入\"></a>红黑树二叉搜索树的插入</h3><p>每次插入的节点的时候都将节点的颜色初始化为红色</p>\n<h4 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h4><p>在我们实现的某些操作中(比如插入)可能会出现红色右链接或者两条连续的红链接,<br>需要通过<strong>旋转</strong>和<strong>变换颜色</strong>修复,旋转操作会改变红链接的指向, </p>\n<h4 id=\"左旋转\"><a href=\"#左旋转\" class=\"headerlink\" title=\"左旋转\"></a>左旋转</h4><img src=\"/2022/06/12/search/WechatIMG185.png\" class=\"\" title=\"红黑树左旋转\">\n\n<h4 id=\"右旋转\"><a href=\"#右旋转\" class=\"headerlink\" title=\"右旋转\"></a>右旋转</h4><img src=\"/2022/06/12/search/WechatIMG186.png\" class=\"\" title=\"红黑树右旋转\">\n\n<p>无论是rotateRight()或rotateLeft() , 我们总是将其返回值重置父结点（或是根结点),且保留原来父节点的颜色(将 x.color 设为 h.color)</p>\n<h4 id=\"颜色变换\"><a href=\"#颜色变换\" class=\"headerlink\" title=\"颜色变换\"></a>颜色变换</h4><p>当我们的节点经过左右旋转时,有可能出现左右节点均为红色的场景,此时,我们需要颜色变换.</p>\n<p>我们专门用一个方法 <strong>flipColors()</strong> 来转换一个结点的两个红色子结点<br>的颜色。除了将子结点的颜色由红变黑之外，我们同时还要将<strong>父结点的颜色由黑变红</strong>(相当于父节点上浮,和它的父节点结合成为一个3-节点),这项<br>操作和旋转操作一样是局部变换，不会影响整棵树的黑色平衡性.</p>\n<img src=\"/2022/06/12/search/WechatIMG187.png\" class=\"\" title=\"红黑树颜色变换\">\n\n<h3 id=\"红黑树的链接向上传递\"><a href=\"#红黑树的链接向上传递\" class=\"headerlink\" title=\"红黑树的链接向上传递\"></a>红黑树的链接向上传递</h3><p>只要谨慎地使用左旋转、右旋转和颜色转换这三种简单的操作, 在沿着插入点到根结点的路径向上移动时在所经过<br>的每个结点中顺序完成以下操作，我们就能完成插入操作：</p>\n<ul>\n<li>如果右子结点是红色的而左子结点是黑色的，进行左旋转；</li>\n<li>如果左子结点是红色的且它的左子结点也是红色的，进行右旋转；</li>\n<li>如果左右子结点均为红色，进行颜色转换。</li>\n</ul>\n<p>注意,红黑树的根节点为黑色!</p>\n<h3 id=\"复合的插入过程\"><a href=\"#复合的插入过程\" class=\"headerlink\" title=\"复合的插入过程\"></a>复合的插入过程</h3><img src=\"/2022/06/12/search/WechatIMG188.png\" class=\"\" title=\"复合的插入过程\">\n\n<h3 id=\"完整得建立一颗红黑树\"><a href=\"#完整得建立一颗红黑树\" class=\"headerlink\" title=\"完整得建立一颗红黑树\"></a>完整得建立一颗红黑树</h3><img src=\"/2022/06/12/search/WechatIMG189.png\" class=\"\" title=\"完整得建立一颗红黑树\">"},{"title":"webpack-cli 源码解析(上)","date":"2022-05-03T14:32:11.000Z","_content":"\n文中所引用的源码版本:\n\n- webpack@4.46.0\n\n<!--more-->\n## webpack 命令\n\n当我们在项目中的package.json中的字段“scripts”对象配置属性: \"build\": \"webpack entry.js bundle.js\" . 然后npm run build会发生什么呢?\n\n首先npm会让命令行工具进入node_modules/.bin目录中查询是否存在“**webpack**“命令,若存在则执行,没找到则报错.实际命令的入口文件是“webpack”这个npm包的package.json中bin字段的文件路径, 即 node_modules/webpack/bin/webpack.js.\n\n```js\n\"bin\": \"./bin/webpack.js\",\n```\n\n## 分析 /bin/webpack.js源码\n\n大致流程是,判断是否安装了命令行工具webpack-cli(或者webpack-command, 默认webpack-cli), \n\n- 若没有安装,则提示安装webpack-cli,\n- 若安装了其中一个,则引用(执行)\n- 若两个命令行工具都安装了,则提示卸载其中一个或者直接执行他们自己的命令(webpack-cli xx xx). 原文: ***please remove one of them or use them directly via their binary***.\n\n\n### 判断命令行是否安装逻辑\n\n```js\n// 使用node内部的 require() 工具查找模块的位置，但不加载模块，只返回解析的文件名。\n// 如果找不到模块，则会抛出 MODULE_NOT_FOUND 错误。\nconst isInstalled = packageName => {\n\ttry {\n\t\trequire.resolve(packageName);\n\n\t\treturn true;\n\t} catch (err) {\n\t\treturn false;\n\t}\n};\n\nconst CLIs = [\n\t{\n\t\tname: \"webpack-cli\",\n\t\tpackage: \"webpack-cli\",\n\t\tbinName: \"webpack-cli\",\n\t\talias: \"cli\",\n\t\tinstalled: isInstalled(\"webpack-cli\"),\n\t\trecommended: true,\n\t\turl: \"https://github.com/webpack/webpack-cli\",\n\t\tdescription: \"The original webpack full-featured CLI.\"\n\t},\n\t{\n\t\tname: \"webpack-command\",\n\t\tpackage: \"webpack-command\",\n\t\tbinName: \"webpack-command\",\n\t\talias: \"command\",\n\t\tinstalled: isInstalled(\"webpack-command\"),\n\t\trecommended: false,\n\t\turl: \"https://github.com/webpack-contrib/webpack-command\",\n\t\tdescription: \"A lightweight, opinionated webpack CLI.\"\n\t}\n];\n\nconst installedClis = CLIs.filter(cli => cli.installed);\n\n```\n\n### 没有安装命令行\n\n当上面代码中的**installedClis.length === 0**时,即没有安装任何命令行工具,则提示安装webpack-cli\n\n```js\n\n  const runCommand = (command, args) => {\n    const cp = require(\"child_process\");\n    return new Promise((resolve, reject) => {\n      const executedCommand = cp.spawn(command, args, {\n        stdio: \"inherit\",\n        shell: true\n      });\n\n      executedCommand.on(\"error\", error => {\n        reject(error);\n      });\n\n      executedCommand.on(\"exit\", code => {\n        if (code === 0) {\n          resolve();\n        } else {\n          reject();\n        }\n      });\n    });\n  };\n  // 判断是否使用yarn安装包\n\tconst isYarn = fs.existsSync(path.resolve(process.cwd(), \"yarn.lock\"));\n\n\tconst packageManager = isYarn ? \"yarn\" : \"npm\";\n\tconst installOptions = [isYarn ? \"add\" : \"install\", \"-D\"];\n\n\tconsole.error(\n\t\t`We will use \"${packageManager}\" to install the CLI via \"${packageManager} ${installOptions.join(\n\t\t\t\" \"\n\t\t)}\".`\n\t);\n\n\tconst question = `Do you want to install 'webpack-cli' (yes/no): `;\n\n\tconst questionInterface = readLine.createInterface({\n\t\tinput: process.stdin,\n\t\toutput: process.stderr\n\t});\n\tquestionInterface.question(question, answer => {\n\t\tquestionInterface.close();\n\n\t\tconst normalizedAnswer = answer.toLowerCase().startsWith(\"y\");\n\n\t\tif (!normalizedAnswer) {\n\t\t\tconsole.error(\n\t\t\t\t\"You need to install 'webpack-cli' to use webpack via CLI.\\n\" +\n\t\t\t\t\t\"You can also install the CLI manually.\"\n\t\t\t);\n\t\t\tprocess.exitCode = 1;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst packageName = \"webpack-cli\";\n\n\t\tconsole.log(\n\t\t\t`Installing '${packageName}' (running '${packageManager} ${installOptions.join(\n\t\t\t\t\" \"\n\t\t\t)} ${packageName}')...`\n\t\t);\n    // 安装完webpack-cli 后 require 引入\n\t\trunCommand(packageManager, installOptions.concat(packageName))\n\t\t\t.then(() => {\n\t\t\t\trequire(packageName); //eslint-disable-line\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error);\n\t\t\t\tprocess.exitCode = 1;\n\t\t\t});\n\t});\n```\n\n### 只安装了一个命令行工具\n\n```js\n  const path = require(\"path\");\n  // 解析出package.json路径\n\tconst pkgPath = require.resolve(`${installedClis[0].package}/package.json`);\n\tconst pkg = require(pkgPath);\n  // 注意: 这里是为了拼接引入bin命令的文件,而不是模块主入口(默认引入“main”字段)\n\trequire(path.resolve(\n    // package.json所在目录\n\t\tpath.dirname(pkgPath),\n    // bin字段的入口文件相对路径\n\t\tpkg.bin[installedClis[0].binName]\n\t));\n\n```\n\n\n\n\n\n\n\n\n","source":"_posts/webpack-cli1.md","raw":"---\ntitle: webpack-cli 源码解析(上)\ndate: 2022-05-03 22:32:11\ntags: 前端工程化\ncategories: \n  - webpack\n---\n\n文中所引用的源码版本:\n\n- webpack@4.46.0\n\n<!--more-->\n## webpack 命令\n\n当我们在项目中的package.json中的字段“scripts”对象配置属性: \"build\": \"webpack entry.js bundle.js\" . 然后npm run build会发生什么呢?\n\n首先npm会让命令行工具进入node_modules/.bin目录中查询是否存在“**webpack**“命令,若存在则执行,没找到则报错.实际命令的入口文件是“webpack”这个npm包的package.json中bin字段的文件路径, 即 node_modules/webpack/bin/webpack.js.\n\n```js\n\"bin\": \"./bin/webpack.js\",\n```\n\n## 分析 /bin/webpack.js源码\n\n大致流程是,判断是否安装了命令行工具webpack-cli(或者webpack-command, 默认webpack-cli), \n\n- 若没有安装,则提示安装webpack-cli,\n- 若安装了其中一个,则引用(执行)\n- 若两个命令行工具都安装了,则提示卸载其中一个或者直接执行他们自己的命令(webpack-cli xx xx). 原文: ***please remove one of them or use them directly via their binary***.\n\n\n### 判断命令行是否安装逻辑\n\n```js\n// 使用node内部的 require() 工具查找模块的位置，但不加载模块，只返回解析的文件名。\n// 如果找不到模块，则会抛出 MODULE_NOT_FOUND 错误。\nconst isInstalled = packageName => {\n\ttry {\n\t\trequire.resolve(packageName);\n\n\t\treturn true;\n\t} catch (err) {\n\t\treturn false;\n\t}\n};\n\nconst CLIs = [\n\t{\n\t\tname: \"webpack-cli\",\n\t\tpackage: \"webpack-cli\",\n\t\tbinName: \"webpack-cli\",\n\t\talias: \"cli\",\n\t\tinstalled: isInstalled(\"webpack-cli\"),\n\t\trecommended: true,\n\t\turl: \"https://github.com/webpack/webpack-cli\",\n\t\tdescription: \"The original webpack full-featured CLI.\"\n\t},\n\t{\n\t\tname: \"webpack-command\",\n\t\tpackage: \"webpack-command\",\n\t\tbinName: \"webpack-command\",\n\t\talias: \"command\",\n\t\tinstalled: isInstalled(\"webpack-command\"),\n\t\trecommended: false,\n\t\turl: \"https://github.com/webpack-contrib/webpack-command\",\n\t\tdescription: \"A lightweight, opinionated webpack CLI.\"\n\t}\n];\n\nconst installedClis = CLIs.filter(cli => cli.installed);\n\n```\n\n### 没有安装命令行\n\n当上面代码中的**installedClis.length === 0**时,即没有安装任何命令行工具,则提示安装webpack-cli\n\n```js\n\n  const runCommand = (command, args) => {\n    const cp = require(\"child_process\");\n    return new Promise((resolve, reject) => {\n      const executedCommand = cp.spawn(command, args, {\n        stdio: \"inherit\",\n        shell: true\n      });\n\n      executedCommand.on(\"error\", error => {\n        reject(error);\n      });\n\n      executedCommand.on(\"exit\", code => {\n        if (code === 0) {\n          resolve();\n        } else {\n          reject();\n        }\n      });\n    });\n  };\n  // 判断是否使用yarn安装包\n\tconst isYarn = fs.existsSync(path.resolve(process.cwd(), \"yarn.lock\"));\n\n\tconst packageManager = isYarn ? \"yarn\" : \"npm\";\n\tconst installOptions = [isYarn ? \"add\" : \"install\", \"-D\"];\n\n\tconsole.error(\n\t\t`We will use \"${packageManager}\" to install the CLI via \"${packageManager} ${installOptions.join(\n\t\t\t\" \"\n\t\t)}\".`\n\t);\n\n\tconst question = `Do you want to install 'webpack-cli' (yes/no): `;\n\n\tconst questionInterface = readLine.createInterface({\n\t\tinput: process.stdin,\n\t\toutput: process.stderr\n\t});\n\tquestionInterface.question(question, answer => {\n\t\tquestionInterface.close();\n\n\t\tconst normalizedAnswer = answer.toLowerCase().startsWith(\"y\");\n\n\t\tif (!normalizedAnswer) {\n\t\t\tconsole.error(\n\t\t\t\t\"You need to install 'webpack-cli' to use webpack via CLI.\\n\" +\n\t\t\t\t\t\"You can also install the CLI manually.\"\n\t\t\t);\n\t\t\tprocess.exitCode = 1;\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst packageName = \"webpack-cli\";\n\n\t\tconsole.log(\n\t\t\t`Installing '${packageName}' (running '${packageManager} ${installOptions.join(\n\t\t\t\t\" \"\n\t\t\t)} ${packageName}')...`\n\t\t);\n    // 安装完webpack-cli 后 require 引入\n\t\trunCommand(packageManager, installOptions.concat(packageName))\n\t\t\t.then(() => {\n\t\t\t\trequire(packageName); //eslint-disable-line\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error);\n\t\t\t\tprocess.exitCode = 1;\n\t\t\t});\n\t});\n```\n\n### 只安装了一个命令行工具\n\n```js\n  const path = require(\"path\");\n  // 解析出package.json路径\n\tconst pkgPath = require.resolve(`${installedClis[0].package}/package.json`);\n\tconst pkg = require(pkgPath);\n  // 注意: 这里是为了拼接引入bin命令的文件,而不是模块主入口(默认引入“main”字段)\n\trequire(path.resolve(\n    // package.json所在目录\n\t\tpath.dirname(pkgPath),\n    // bin字段的入口文件相对路径\n\t\tpkg.bin[installedClis[0].binName]\n\t));\n\n```\n\n\n\n\n\n\n\n\n","slug":"webpack-cli1","published":1,"updated":"2022-05-26T09:20:48.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4edjhxv000as696diu6gjf6","content":"<p>文中所引用的源码版本:</p>\n<ul>\n<li><a href=\"mailto:&#119;&#101;&#98;&#112;&#x61;&#99;&#107;&#x40;&#x34;&#46;&#52;&#54;&#46;&#x30;\">&#119;&#101;&#98;&#112;&#x61;&#99;&#107;&#x40;&#x34;&#46;&#52;&#54;&#46;&#x30;</a></li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"webpack-命令\"><a href=\"#webpack-命令\" class=\"headerlink\" title=\"webpack 命令\"></a>webpack 命令</h2><p>当我们在项目中的package.json中的字段“scripts”对象配置属性: “build”: “webpack entry.js bundle.js” . 然后npm run build会发生什么呢?</p>\n<p>首先npm会让命令行工具进入node_modules&#x2F;.bin目录中查询是否存在“<strong>webpack</strong>“命令,若存在则执行,没找到则报错.实际命令的入口文件是“webpack”这个npm包的package.json中bin字段的文件路径, 即 node_modules&#x2F;webpack&#x2F;bin&#x2F;webpack.js.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;bin&quot;</span>: <span class=\"string\">&quot;./bin/webpack.js&quot;</span>,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析-x2F-bin-x2F-webpack-js源码\"><a href=\"#分析-x2F-bin-x2F-webpack-js源码\" class=\"headerlink\" title=\"分析 &#x2F;bin&#x2F;webpack.js源码\"></a>分析 &#x2F;bin&#x2F;webpack.js源码</h2><p>大致流程是,判断是否安装了命令行工具webpack-cli(或者webpack-command, 默认webpack-cli), </p>\n<ul>\n<li>若没有安装,则提示安装webpack-cli,</li>\n<li>若安装了其中一个,则引用(执行)</li>\n<li>若两个命令行工具都安装了,则提示卸载其中一个或者直接执行他们自己的命令(webpack-cli xx xx). 原文: <em><strong>please remove one of them or use them directly via their binary</strong></em>.</li>\n</ul>\n<h3 id=\"判断命令行是否安装逻辑\"><a href=\"#判断命令行是否安装逻辑\" class=\"headerlink\" title=\"判断命令行是否安装逻辑\"></a>判断命令行是否安装逻辑</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用node内部的 require() 工具查找模块的位置，但不加载模块，只返回解析的文件名。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果找不到模块，则会抛出 MODULE_NOT_FOUND 错误。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isInstalled</span> = packageName =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">require</span>.<span class=\"title function_\">resolve</span>(packageName);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CLIs</span> = [</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;webpack-cli&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">package</span>: <span class=\"string\">&quot;webpack-cli&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">binName</span>: <span class=\"string\">&quot;webpack-cli&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">alias</span>: <span class=\"string\">&quot;cli&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">installed</span>: <span class=\"title function_\">isInstalled</span>(<span class=\"string\">&quot;webpack-cli&quot;</span>),</span><br><span class=\"line\">\t\t<span class=\"attr\">recommended</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">url</span>: <span class=\"string\">&quot;https://github.com/webpack/webpack-cli&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">description</span>: <span class=\"string\">&quot;The original webpack full-featured CLI.&quot;</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;webpack-command&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">package</span>: <span class=\"string\">&quot;webpack-command&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">binName</span>: <span class=\"string\">&quot;webpack-command&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">alias</span>: <span class=\"string\">&quot;command&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">installed</span>: <span class=\"title function_\">isInstalled</span>(<span class=\"string\">&quot;webpack-command&quot;</span>),</span><br><span class=\"line\">\t\t<span class=\"attr\">recommended</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">url</span>: <span class=\"string\">&quot;https://github.com/webpack-contrib/webpack-command&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">description</span>: <span class=\"string\">&quot;A lightweight, opinionated webpack CLI.&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> installedClis = <span class=\"title class_\">CLIs</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">cli</span> =&gt;</span> cli.<span class=\"property\">installed</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"没有安装命令行\"><a href=\"#没有安装命令行\" class=\"headerlink\" title=\"没有安装命令行\"></a>没有安装命令行</h3><p>当上面代码中的<strong>installedClis.length &#x3D;&#x3D;&#x3D; 0</strong>时,即没有安装任何命令行工具,则提示安装webpack-cli</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"title function_\">runCommand</span> = (<span class=\"params\">command, args</span>) =&gt; &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;child_process&quot;</span>);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> executedCommand = cp.<span class=\"title function_\">spawn</span>(command, args, &#123;</span><br><span class=\"line\">       <span class=\"attr\">stdio</span>: <span class=\"string\">&quot;inherit&quot;</span>,</span><br><span class=\"line\">       <span class=\"attr\">shell</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">     executedCommand.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;error&quot;</span>, <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">     executedCommand.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;exit&quot;</span>, <span class=\"function\"><span class=\"params\">code</span> =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (code === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"title function_\">reject</span>();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"comment\">// 判断是否使用yarn安装包</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isYarn = fs.<span class=\"title function_\">existsSync</span>(path.<span class=\"title function_\">resolve</span>(process.<span class=\"title function_\">cwd</span>(), <span class=\"string\">&quot;yarn.lock&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> packageManager = isYarn ? <span class=\"string\">&quot;yarn&quot;</span> : <span class=\"string\">&quot;npm&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> installOptions = [isYarn ? <span class=\"string\">&quot;add&quot;</span> : <span class=\"string\">&quot;install&quot;</span>, <span class=\"string\">&quot;-D&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">\t<span class=\"string\">`We will use &quot;<span class=\"subst\">$&#123;packageManager&#125;</span>&quot; to install the CLI via &quot;<span class=\"subst\">$&#123;packageManager&#125;</span> <span class=\"subst\">$&#123;installOptions.join(</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t<span class=\"string\">&quot; &quot;</span></span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t)&#125;</span>&quot;.`</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> question = <span class=\"string\">`Do you want to install &#x27;webpack-cli&#x27; (yes/no): `</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> questionInterface = readLine.<span class=\"title function_\">createInterface</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">input</span>: process.<span class=\"property\">stdin</span>,</span><br><span class=\"line\">\t<span class=\"attr\">output</span>: process.<span class=\"property\">stderr</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">questionInterface.<span class=\"title function_\">question</span>(question, <span class=\"function\"><span class=\"params\">answer</span> =&gt;</span> &#123;</span><br><span class=\"line\">\tquestionInterface.<span class=\"title function_\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> normalizedAnswer = answer.<span class=\"title function_\">toLowerCase</span>().<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!normalizedAnswer) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;You need to install &#x27;webpack-cli&#x27; to use webpack via CLI.\\n&quot;</span> +</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;You can also install the CLI manually.&quot;</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\tprocess.<span class=\"property\">exitCode</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> packageName = <span class=\"string\">&quot;webpack-cli&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">\t\t<span class=\"string\">`Installing &#x27;<span class=\"subst\">$&#123;packageName&#125;</span>&#x27; (running &#x27;<span class=\"subst\">$&#123;packageManager&#125;</span> <span class=\"subst\">$&#123;installOptions.join(</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t<span class=\"string\">&quot; &quot;</span></span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t)&#125;</span> <span class=\"subst\">$&#123;packageName&#125;</span>&#x27;)...`</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">   <span class=\"comment\">// 安装完webpack-cli 后 require 引入</span></span><br><span class=\"line\">\t<span class=\"title function_\">runCommand</span>(packageManager, installOptions.<span class=\"title function_\">concat</span>(packageName))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">require</span>(packageName); <span class=\"comment\">//eslint-disable-line</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">\t\t\tprocess.<span class=\"property\">exitCode</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"只安装了一个命令行工具\"><a href=\"#只安装了一个命令行工具\" class=\"headerlink\" title=\"只安装了一个命令行工具\"></a>只安装了一个命令行工具</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"> <span class=\"comment\">// 解析出package.json路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pkgPath = <span class=\"built_in\">require</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">`<span class=\"subst\">$&#123;installedClis[<span class=\"number\">0</span>].package&#125;</span>/package.json`</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> pkg = <span class=\"built_in\">require</span>(pkgPath);</span><br><span class=\"line\"> <span class=\"comment\">// 注意: 这里是为了拼接引入bin命令的文件,而不是模块主入口(默认引入“main”字段)</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(path.<span class=\"title function_\">resolve</span>(</span><br><span class=\"line\">   <span class=\"comment\">// package.json所在目录</span></span><br><span class=\"line\">\tpath.<span class=\"title function_\">dirname</span>(pkgPath),</span><br><span class=\"line\">   <span class=\"comment\">// bin字段的入口文件相对路径</span></span><br><span class=\"line\">\tpkg.<span class=\"property\">bin</span>[installedClis[<span class=\"number\">0</span>].<span class=\"property\">binName</span>]</span><br><span class=\"line\">));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p>文中所引用的源码版本:</p>\n<ul>\n<li><a href=\"mailto:&#119;&#101;&#98;&#112;&#x61;&#99;&#107;&#x40;&#x34;&#46;&#52;&#54;&#46;&#x30;\">&#119;&#101;&#98;&#112;&#x61;&#99;&#107;&#x40;&#x34;&#46;&#52;&#54;&#46;&#x30;</a></li>\n</ul>","more":"<h2 id=\"webpack-命令\"><a href=\"#webpack-命令\" class=\"headerlink\" title=\"webpack 命令\"></a>webpack 命令</h2><p>当我们在项目中的package.json中的字段“scripts”对象配置属性: “build”: “webpack entry.js bundle.js” . 然后npm run build会发生什么呢?</p>\n<p>首先npm会让命令行工具进入node_modules&#x2F;.bin目录中查询是否存在“<strong>webpack</strong>“命令,若存在则执行,没找到则报错.实际命令的入口文件是“webpack”这个npm包的package.json中bin字段的文件路径, 即 node_modules&#x2F;webpack&#x2F;bin&#x2F;webpack.js.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;bin&quot;</span>: <span class=\"string\">&quot;./bin/webpack.js&quot;</span>,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析-x2F-bin-x2F-webpack-js源码\"><a href=\"#分析-x2F-bin-x2F-webpack-js源码\" class=\"headerlink\" title=\"分析 &#x2F;bin&#x2F;webpack.js源码\"></a>分析 &#x2F;bin&#x2F;webpack.js源码</h2><p>大致流程是,判断是否安装了命令行工具webpack-cli(或者webpack-command, 默认webpack-cli), </p>\n<ul>\n<li>若没有安装,则提示安装webpack-cli,</li>\n<li>若安装了其中一个,则引用(执行)</li>\n<li>若两个命令行工具都安装了,则提示卸载其中一个或者直接执行他们自己的命令(webpack-cli xx xx). 原文: <em><strong>please remove one of them or use them directly via their binary</strong></em>.</li>\n</ul>\n<h3 id=\"判断命令行是否安装逻辑\"><a href=\"#判断命令行是否安装逻辑\" class=\"headerlink\" title=\"判断命令行是否安装逻辑\"></a>判断命令行是否安装逻辑</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用node内部的 require() 工具查找模块的位置，但不加载模块，只返回解析的文件名。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果找不到模块，则会抛出 MODULE_NOT_FOUND 错误。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isInstalled</span> = packageName =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">require</span>.<span class=\"title function_\">resolve</span>(packageName);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">CLIs</span> = [</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;webpack-cli&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">package</span>: <span class=\"string\">&quot;webpack-cli&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">binName</span>: <span class=\"string\">&quot;webpack-cli&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">alias</span>: <span class=\"string\">&quot;cli&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">installed</span>: <span class=\"title function_\">isInstalled</span>(<span class=\"string\">&quot;webpack-cli&quot;</span>),</span><br><span class=\"line\">\t\t<span class=\"attr\">recommended</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">url</span>: <span class=\"string\">&quot;https://github.com/webpack/webpack-cli&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">description</span>: <span class=\"string\">&quot;The original webpack full-featured CLI.&quot;</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;webpack-command&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">package</span>: <span class=\"string\">&quot;webpack-command&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">binName</span>: <span class=\"string\">&quot;webpack-command&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">alias</span>: <span class=\"string\">&quot;command&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">installed</span>: <span class=\"title function_\">isInstalled</span>(<span class=\"string\">&quot;webpack-command&quot;</span>),</span><br><span class=\"line\">\t\t<span class=\"attr\">recommended</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">url</span>: <span class=\"string\">&quot;https://github.com/webpack-contrib/webpack-command&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">description</span>: <span class=\"string\">&quot;A lightweight, opinionated webpack CLI.&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> installedClis = <span class=\"title class_\">CLIs</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">cli</span> =&gt;</span> cli.<span class=\"property\">installed</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"没有安装命令行\"><a href=\"#没有安装命令行\" class=\"headerlink\" title=\"没有安装命令行\"></a>没有安装命令行</h3><p>当上面代码中的<strong>installedClis.length &#x3D;&#x3D;&#x3D; 0</strong>时,即没有安装任何命令行工具,则提示安装webpack-cli</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">const</span> <span class=\"title function_\">runCommand</span> = (<span class=\"params\">command, args</span>) =&gt; &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;child_process&quot;</span>);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> executedCommand = cp.<span class=\"title function_\">spawn</span>(command, args, &#123;</span><br><span class=\"line\">       <span class=\"attr\">stdio</span>: <span class=\"string\">&quot;inherit&quot;</span>,</span><br><span class=\"line\">       <span class=\"attr\">shell</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">     executedCommand.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;error&quot;</span>, <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">     executedCommand.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;exit&quot;</span>, <span class=\"function\"><span class=\"params\">code</span> =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (code === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"title function_\">reject</span>();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"> <span class=\"comment\">// 判断是否使用yarn安装包</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isYarn = fs.<span class=\"title function_\">existsSync</span>(path.<span class=\"title function_\">resolve</span>(process.<span class=\"title function_\">cwd</span>(), <span class=\"string\">&quot;yarn.lock&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> packageManager = isYarn ? <span class=\"string\">&quot;yarn&quot;</span> : <span class=\"string\">&quot;npm&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> installOptions = [isYarn ? <span class=\"string\">&quot;add&quot;</span> : <span class=\"string\">&quot;install&quot;</span>, <span class=\"string\">&quot;-D&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">\t<span class=\"string\">`We will use &quot;<span class=\"subst\">$&#123;packageManager&#125;</span>&quot; to install the CLI via &quot;<span class=\"subst\">$&#123;packageManager&#125;</span> <span class=\"subst\">$&#123;installOptions.join(</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t<span class=\"string\">&quot; &quot;</span></span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t)&#125;</span>&quot;.`</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> question = <span class=\"string\">`Do you want to install &#x27;webpack-cli&#x27; (yes/no): `</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> questionInterface = readLine.<span class=\"title function_\">createInterface</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">input</span>: process.<span class=\"property\">stdin</span>,</span><br><span class=\"line\">\t<span class=\"attr\">output</span>: process.<span class=\"property\">stderr</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">questionInterface.<span class=\"title function_\">question</span>(question, <span class=\"function\"><span class=\"params\">answer</span> =&gt;</span> &#123;</span><br><span class=\"line\">\tquestionInterface.<span class=\"title function_\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> normalizedAnswer = answer.<span class=\"title function_\">toLowerCase</span>().<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!normalizedAnswer) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;You need to install &#x27;webpack-cli&#x27; to use webpack via CLI.\\n&quot;</span> +</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;You can also install the CLI manually.&quot;</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\tprocess.<span class=\"property\">exitCode</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> packageName = <span class=\"string\">&quot;webpack-cli&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">\t\t<span class=\"string\">`Installing &#x27;<span class=\"subst\">$&#123;packageName&#125;</span>&#x27; (running &#x27;<span class=\"subst\">$&#123;packageManager&#125;</span> <span class=\"subst\">$&#123;installOptions.join(</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t<span class=\"string\">&quot; &quot;</span></span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t)&#125;</span> <span class=\"subst\">$&#123;packageName&#125;</span>&#x27;)...`</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">   <span class=\"comment\">// 安装完webpack-cli 后 require 引入</span></span><br><span class=\"line\">\t<span class=\"title function_\">runCommand</span>(packageManager, installOptions.<span class=\"title function_\">concat</span>(packageName))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">require</span>(packageName); <span class=\"comment\">//eslint-disable-line</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">\t\t\tprocess.<span class=\"property\">exitCode</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"只安装了一个命令行工具\"><a href=\"#只安装了一个命令行工具\" class=\"headerlink\" title=\"只安装了一个命令行工具\"></a>只安装了一个命令行工具</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"> <span class=\"comment\">// 解析出package.json路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pkgPath = <span class=\"built_in\">require</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">`<span class=\"subst\">$&#123;installedClis[<span class=\"number\">0</span>].package&#125;</span>/package.json`</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> pkg = <span class=\"built_in\">require</span>(pkgPath);</span><br><span class=\"line\"> <span class=\"comment\">// 注意: 这里是为了拼接引入bin命令的文件,而不是模块主入口(默认引入“main”字段)</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(path.<span class=\"title function_\">resolve</span>(</span><br><span class=\"line\">   <span class=\"comment\">// package.json所在目录</span></span><br><span class=\"line\">\tpath.<span class=\"title function_\">dirname</span>(pkgPath),</span><br><span class=\"line\">   <span class=\"comment\">// bin字段的入口文件相对路径</span></span><br><span class=\"line\">\tpkg.<span class=\"property\">bin</span>[installedClis[<span class=\"number\">0</span>].<span class=\"property\">binName</span>]</span><br><span class=\"line\">));</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"tapable","_content":"\n在阅读webpack的源码过程中,发现webpack编译的两个核心对象**Compiler**和**Compilation**都是继承自tapable, :\n\n- Compiler: 负责整体编译流程的\n- Compilation: 负责编译Module\n\n所以熟悉tapable还是很有必要的,而apable本质上实现了一种**发布订阅模式**.\n\n<!--more-->\n\n## Tapable使用\n\n### 版本\n\n```js\n  \"tapable\": \"^2.2.1\"\n```\n\n\n### 使用及分类\n\n官方一共提供了9种钩子\n\n```js\nconst {\n\tSyncHook,\n\tSyncBailHook,\n\tSyncWaterfallHook,\n\tSyncLoopHook,\n\tAsyncParallelHook,\n\tAsyncParallelBailHook,\n\tAsyncSeriesHook,\n\tAsyncSeriesBailHook,\n\tAsyncSeriesWaterfallHook\n } = require(\"tapable\");\n\n```\n\n#### 基本使用\n\n- 1. new 实例化一个钩子函数, 接收两个参数: \n  - 参数一: 为字符串数组, 数组中的值不重要,数组中个数对应后面监听方法tap的回调函数形参和触发事件方法call的实参个数; \n  - 参数二: 应用较少不需要额外介绍(官方文档也无体现)\n\n- 2. tap函数 监听对应的事件，注册事件时接受两个参数：\n  - 参数一: 字符串(作为标识位)或对象(可以额外设置触发优先级等)\n  - 参数二: 回调函数, 形参对应步骤1中参数一的字符串数组个数\n\n- 3. call函数 触发步骤二中tap中的回调函数\n\n#### 分类\n\n##### 按照同步/异步分类\n\nTapable 中所有注册的事件可以分为同步、异步两种执行方式:\n\n- 同步钩子: tap 方法是唯一的注册事件的方法，call 唯一调用方法\n\n- 异步钩子可以通过 tap、tapAsync、tapPromise三种方式来注册，并依次通过对应的 call、callAsync、promise 三种方式触发注册的函数。\n\n且异步钩子也分为两类:\n\n- 异步串行( AsyncSeries )：可以被串联（连续按照顺序调用）执行的异步钩子。\n\n- 异步并行( AsyncParallel )：可以被并联（并发调用）执行的异步钩子。\n\n{% asset_img 同异步分类.webp '同异步分类' %}\n\n##### 按照执行机制分类\n\nTapable 可以按照异步/同步执行分类的同时也可以按照执行机制进行分类，比如：\n\n- **Basic Hook** : 基本类型的钩子，它仅仅执行钩子注册的事件，并不关心每个被调用的事件函数返回值如何。\n\n- **Bail** : 保险类型钩子，保险类型钩子在基础类型钩子上增加了一种保险机制，如果任意一个注册函数执行返回非 undefined 的值，那么整个钩子执行过程会立即中断，之后注册事件函数就不会被调用了。\n\n- **Waterfall** : 瀑布类型的钩子，瀑布类型的钩子和基本类型的钩子基本类似，唯一不同的是瀑布类型的钩子会在注册的事件执行时将事件函数执行非 undefined 的返回值传递给接下来的事件函数作为参数。\n\n- **Loop** : 循环类型钩子，循环类型钩子稍微比较复杂一点。循环类型钩子通过 call 调用时，如果任意一个注册的事件函数返回值非 undefeind ,那么会立即重头开始重新执行所有的注册事件函数，直到所有被注册的事件函数都返回 undefined。\n\n\n[demo地址](https://github.com/LeoBaruch/webpack-collection/blob/main/tapable/demo/index.js)\n\n### 参考资料\n- [https://github.com/webpack/tapable](https://github.com/webpack/tapable)\n- [https://juejin.cn/post/7040982789650382855#heading-3](https://juejin.cn/post/7040982789650382855#heading-3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/tapable.md","raw":"---\ntitle: tapable\ntags: 前端工程化\ncategories: \n  - webpack\n---\n\n在阅读webpack的源码过程中,发现webpack编译的两个核心对象**Compiler**和**Compilation**都是继承自tapable, :\n\n- Compiler: 负责整体编译流程的\n- Compilation: 负责编译Module\n\n所以熟悉tapable还是很有必要的,而apable本质上实现了一种**发布订阅模式**.\n\n<!--more-->\n\n## Tapable使用\n\n### 版本\n\n```js\n  \"tapable\": \"^2.2.1\"\n```\n\n\n### 使用及分类\n\n官方一共提供了9种钩子\n\n```js\nconst {\n\tSyncHook,\n\tSyncBailHook,\n\tSyncWaterfallHook,\n\tSyncLoopHook,\n\tAsyncParallelHook,\n\tAsyncParallelBailHook,\n\tAsyncSeriesHook,\n\tAsyncSeriesBailHook,\n\tAsyncSeriesWaterfallHook\n } = require(\"tapable\");\n\n```\n\n#### 基本使用\n\n- 1. new 实例化一个钩子函数, 接收两个参数: \n  - 参数一: 为字符串数组, 数组中的值不重要,数组中个数对应后面监听方法tap的回调函数形参和触发事件方法call的实参个数; \n  - 参数二: 应用较少不需要额外介绍(官方文档也无体现)\n\n- 2. tap函数 监听对应的事件，注册事件时接受两个参数：\n  - 参数一: 字符串(作为标识位)或对象(可以额外设置触发优先级等)\n  - 参数二: 回调函数, 形参对应步骤1中参数一的字符串数组个数\n\n- 3. call函数 触发步骤二中tap中的回调函数\n\n#### 分类\n\n##### 按照同步/异步分类\n\nTapable 中所有注册的事件可以分为同步、异步两种执行方式:\n\n- 同步钩子: tap 方法是唯一的注册事件的方法，call 唯一调用方法\n\n- 异步钩子可以通过 tap、tapAsync、tapPromise三种方式来注册，并依次通过对应的 call、callAsync、promise 三种方式触发注册的函数。\n\n且异步钩子也分为两类:\n\n- 异步串行( AsyncSeries )：可以被串联（连续按照顺序调用）执行的异步钩子。\n\n- 异步并行( AsyncParallel )：可以被并联（并发调用）执行的异步钩子。\n\n{% asset_img 同异步分类.webp '同异步分类' %}\n\n##### 按照执行机制分类\n\nTapable 可以按照异步/同步执行分类的同时也可以按照执行机制进行分类，比如：\n\n- **Basic Hook** : 基本类型的钩子，它仅仅执行钩子注册的事件，并不关心每个被调用的事件函数返回值如何。\n\n- **Bail** : 保险类型钩子，保险类型钩子在基础类型钩子上增加了一种保险机制，如果任意一个注册函数执行返回非 undefined 的值，那么整个钩子执行过程会立即中断，之后注册事件函数就不会被调用了。\n\n- **Waterfall** : 瀑布类型的钩子，瀑布类型的钩子和基本类型的钩子基本类似，唯一不同的是瀑布类型的钩子会在注册的事件执行时将事件函数执行非 undefined 的返回值传递给接下来的事件函数作为参数。\n\n- **Loop** : 循环类型钩子，循环类型钩子稍微比较复杂一点。循环类型钩子通过 call 调用时，如果任意一个注册的事件函数返回值非 undefeind ,那么会立即重头开始重新执行所有的注册事件函数，直到所有被注册的事件函数都返回 undefined。\n\n\n[demo地址](https://github.com/LeoBaruch/webpack-collection/blob/main/tapable/demo/index.js)\n\n### 参考资料\n- [https://github.com/webpack/tapable](https://github.com/webpack/tapable)\n- [https://juejin.cn/post/7040982789650382855#heading-3](https://juejin.cn/post/7040982789650382855#heading-3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"tapable","published":1,"date":"2022-05-26T09:20:48.528Z","updated":"2022-05-26T09:20:48.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4edjhxv000bs696cipl4t5y","content":"<p>在阅读webpack的源码过程中,发现webpack编译的两个核心对象<strong>Compiler</strong>和<strong>Compilation</strong>都是继承自tapable, :</p>\n<ul>\n<li>Compiler: 负责整体编译流程的</li>\n<li>Compilation: 负责编译Module</li>\n</ul>\n<p>所以熟悉tapable还是很有必要的,而apable本质上实现了一种<strong>发布订阅模式</strong>.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Tapable使用\"><a href=\"#Tapable使用\" class=\"headerlink\" title=\"Tapable使用\"></a>Tapable使用</h2><h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;tapable&quot;</span>: <span class=\"string\">&quot;^2.2.1&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"使用及分类\"><a href=\"#使用及分类\" class=\"headerlink\" title=\"使用及分类\"></a>使用及分类</h3><p>官方一共提供了9种钩子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">SyncHook</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">SyncBailHook</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">SyncWaterfallHook</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">SyncLoopHook</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">AsyncParallelHook</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">AsyncParallelBailHook</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">AsyncSeriesHook</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">AsyncSeriesBailHook</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">AsyncSeriesWaterfallHook</span></span><br><span class=\"line\"> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;tapable&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h4><ul>\n<li><ol>\n<li>new 实例化一个钩子函数, 接收两个参数:</li>\n</ol>\n<ul>\n<li>参数一: 为字符串数组, 数组中的值不重要,数组中个数对应后面监听方法tap的回调函数形参和触发事件方法call的实参个数; </li>\n<li>参数二: 应用较少不需要额外介绍(官方文档也无体现)</li>\n</ul>\n</li>\n<li><ol start=\"2\">\n<li>tap函数 监听对应的事件，注册事件时接受两个参数：</li>\n</ol>\n<ul>\n<li>参数一: 字符串(作为标识位)或对象(可以额外设置触发优先级等)</li>\n<li>参数二: 回调函数, 形参对应步骤1中参数一的字符串数组个数</li>\n</ul>\n</li>\n<li><ol start=\"3\">\n<li>call函数 触发步骤二中tap中的回调函数</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h4><h5 id=\"按照同步-x2F-异步分类\"><a href=\"#按照同步-x2F-异步分类\" class=\"headerlink\" title=\"按照同步&#x2F;异步分类\"></a>按照同步&#x2F;异步分类</h5><p>Tapable 中所有注册的事件可以分为同步、异步两种执行方式:</p>\n<ul>\n<li><p>同步钩子: tap 方法是唯一的注册事件的方法，call 唯一调用方法</p>\n</li>\n<li><p>异步钩子可以通过 tap、tapAsync、tapPromise三种方式来注册，并依次通过对应的 call、callAsync、promise 三种方式触发注册的函数。</p>\n</li>\n</ul>\n<p>且异步钩子也分为两类:</p>\n<ul>\n<li><p>异步串行( AsyncSeries )：可以被串联（连续按照顺序调用）执行的异步钩子。</p>\n</li>\n<li><p>异步并行( AsyncParallel )：可以被并联（并发调用）执行的异步钩子。</p>\n</li>\n</ul>\n<img src=\"/2022/05/26/tapable/%E5%90%8C%E5%BC%82%E6%AD%A5%E5%88%86%E7%B1%BB.webp\" class=\"\" title=\"同异步分类\">\n\n<h5 id=\"按照执行机制分类\"><a href=\"#按照执行机制分类\" class=\"headerlink\" title=\"按照执行机制分类\"></a>按照执行机制分类</h5><p>Tapable 可以按照异步&#x2F;同步执行分类的同时也可以按照执行机制进行分类，比如：</p>\n<ul>\n<li><p><strong>Basic Hook</strong> : 基本类型的钩子，它仅仅执行钩子注册的事件，并不关心每个被调用的事件函数返回值如何。</p>\n</li>\n<li><p><strong>Bail</strong> : 保险类型钩子，保险类型钩子在基础类型钩子上增加了一种保险机制，如果任意一个注册函数执行返回非 undefined 的值，那么整个钩子执行过程会立即中断，之后注册事件函数就不会被调用了。</p>\n</li>\n<li><p><strong>Waterfall</strong> : 瀑布类型的钩子，瀑布类型的钩子和基本类型的钩子基本类似，唯一不同的是瀑布类型的钩子会在注册的事件执行时将事件函数执行非 undefined 的返回值传递给接下来的事件函数作为参数。</p>\n</li>\n<li><p><strong>Loop</strong> : 循环类型钩子，循环类型钩子稍微比较复杂一点。循环类型钩子通过 call 调用时，如果任意一个注册的事件函数返回值非 undefeind ,那么会立即重头开始重新执行所有的注册事件函数，直到所有被注册的事件函数都返回 undefined。</p>\n</li>\n</ul>\n<p><a href=\"https://github.com/LeoBaruch/webpack-collection/blob/main/tapable/demo/index.js\">demo地址</a></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://github.com/webpack/tapable\">https://github.com/webpack/tapable</a></li>\n<li><a href=\"https://juejin.cn/post/7040982789650382855#heading-3\">https://juejin.cn/post/7040982789650382855#heading-3</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在阅读webpack的源码过程中,发现webpack编译的两个核心对象<strong>Compiler</strong>和<strong>Compilation</strong>都是继承自tapable, :</p>\n<ul>\n<li>Compiler: 负责整体编译流程的</li>\n<li>Compilation: 负责编译Module</li>\n</ul>\n<p>所以熟悉tapable还是很有必要的,而apable本质上实现了一种<strong>发布订阅模式</strong>.</p>","more":"<h2 id=\"Tapable使用\"><a href=\"#Tapable使用\" class=\"headerlink\" title=\"Tapable使用\"></a>Tapable使用</h2><h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;tapable&quot;</span>: <span class=\"string\">&quot;^2.2.1&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"使用及分类\"><a href=\"#使用及分类\" class=\"headerlink\" title=\"使用及分类\"></a>使用及分类</h3><p>官方一共提供了9种钩子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">SyncHook</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">SyncBailHook</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">SyncWaterfallHook</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">SyncLoopHook</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">AsyncParallelHook</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">AsyncParallelBailHook</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">AsyncSeriesHook</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">AsyncSeriesBailHook</span>,</span><br><span class=\"line\">\t<span class=\"title class_\">AsyncSeriesWaterfallHook</span></span><br><span class=\"line\"> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;tapable&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h4><ul>\n<li><ol>\n<li>new 实例化一个钩子函数, 接收两个参数:</li>\n</ol>\n<ul>\n<li>参数一: 为字符串数组, 数组中的值不重要,数组中个数对应后面监听方法tap的回调函数形参和触发事件方法call的实参个数; </li>\n<li>参数二: 应用较少不需要额外介绍(官方文档也无体现)</li>\n</ul>\n</li>\n<li><ol start=\"2\">\n<li>tap函数 监听对应的事件，注册事件时接受两个参数：</li>\n</ol>\n<ul>\n<li>参数一: 字符串(作为标识位)或对象(可以额外设置触发优先级等)</li>\n<li>参数二: 回调函数, 形参对应步骤1中参数一的字符串数组个数</li>\n</ul>\n</li>\n<li><ol start=\"3\">\n<li>call函数 触发步骤二中tap中的回调函数</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h4><h5 id=\"按照同步-x2F-异步分类\"><a href=\"#按照同步-x2F-异步分类\" class=\"headerlink\" title=\"按照同步&#x2F;异步分类\"></a>按照同步&#x2F;异步分类</h5><p>Tapable 中所有注册的事件可以分为同步、异步两种执行方式:</p>\n<ul>\n<li><p>同步钩子: tap 方法是唯一的注册事件的方法，call 唯一调用方法</p>\n</li>\n<li><p>异步钩子可以通过 tap、tapAsync、tapPromise三种方式来注册，并依次通过对应的 call、callAsync、promise 三种方式触发注册的函数。</p>\n</li>\n</ul>\n<p>且异步钩子也分为两类:</p>\n<ul>\n<li><p>异步串行( AsyncSeries )：可以被串联（连续按照顺序调用）执行的异步钩子。</p>\n</li>\n<li><p>异步并行( AsyncParallel )：可以被并联（并发调用）执行的异步钩子。</p>\n</li>\n</ul>\n<img src=\"/2022/05/26/tapable/%E5%90%8C%E5%BC%82%E6%AD%A5%E5%88%86%E7%B1%BB.webp\" class=\"\" title=\"同异步分类\">\n\n<h5 id=\"按照执行机制分类\"><a href=\"#按照执行机制分类\" class=\"headerlink\" title=\"按照执行机制分类\"></a>按照执行机制分类</h5><p>Tapable 可以按照异步&#x2F;同步执行分类的同时也可以按照执行机制进行分类，比如：</p>\n<ul>\n<li><p><strong>Basic Hook</strong> : 基本类型的钩子，它仅仅执行钩子注册的事件，并不关心每个被调用的事件函数返回值如何。</p>\n</li>\n<li><p><strong>Bail</strong> : 保险类型钩子，保险类型钩子在基础类型钩子上增加了一种保险机制，如果任意一个注册函数执行返回非 undefined 的值，那么整个钩子执行过程会立即中断，之后注册事件函数就不会被调用了。</p>\n</li>\n<li><p><strong>Waterfall</strong> : 瀑布类型的钩子，瀑布类型的钩子和基本类型的钩子基本类似，唯一不同的是瀑布类型的钩子会在注册的事件执行时将事件函数执行非 undefined 的返回值传递给接下来的事件函数作为参数。</p>\n</li>\n<li><p><strong>Loop</strong> : 循环类型钩子，循环类型钩子稍微比较复杂一点。循环类型钩子通过 call 调用时，如果任意一个注册的事件函数返回值非 undefeind ,那么会立即重头开始重新执行所有的注册事件函数，直到所有被注册的事件函数都返回 undefined。</p>\n</li>\n</ul>\n<p><a href=\"https://github.com/LeoBaruch/webpack-collection/blob/main/tapable/demo/index.js\">demo地址</a></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://github.com/webpack/tapable\">https://github.com/webpack/tapable</a></li>\n<li><a href=\"https://juejin.cn/post/7040982789650382855#heading-3\">https://juejin.cn/post/7040982789650382855#heading-3</a></li>\n</ul>"}],"PostAsset":[{"_id":"source/_posts/commit-message/commit.png","slug":"commit.png","post":"cl4edjhxt0005s696gglod8nv","modified":0,"renderable":0},{"_id":"source/_posts/tapable/同异步分类.webp","slug":"同异步分类.webp","post":"cl4edjhxv000bs696cipl4t5y","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG167.png","slug":"WechatIMG167.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG168.png","slug":"WechatIMG168.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG170.png","slug":"WechatIMG170.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG171.png","slug":"WechatIMG171.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG172.png","slug":"WechatIMG172.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG173.png","slug":"WechatIMG173.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG174.png","slug":"WechatIMG174.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG175.png","slug":"WechatIMG175.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG176.png","slug":"WechatIMG176.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG178.png","slug":"WechatIMG178.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG179.png","slug":"WechatIMG179.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG180.png","slug":"WechatIMG180.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG181.png","slug":"WechatIMG181.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG182.png","slug":"WechatIMG182.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG183.png","slug":"WechatIMG183.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG184.png","slug":"WechatIMG184.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG185.png","slug":"WechatIMG185.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG186.png","slug":"WechatIMG186.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG187.png","slug":"WechatIMG187.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG188.png","slug":"WechatIMG188.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/WechatIMG189.png","slug":"WechatIMG189.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0},{"_id":"source/_posts/search/a5aaca89-5e3a-49d9-a821-d8a1c22ea46b.png","slug":"a5aaca89-5e3a-49d9-a821-d8a1c22ea46b.png","post":"cl4edjhxu0006s696ctvd1631","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl4edjhxk0000s696e4s1fle0","category_id":"cl4edjhxq0002s696ex0s2oxj","_id":"cl4edjhxw000cs6969b8ld6qg"},{"post_id":"cl4edjhxv000as696diu6gjf6","category_id":"cl4edjhxq0002s696ex0s2oxj","_id":"cl4edjhxw000hs696goj1e1ml"},{"post_id":"cl4edjhxv000bs696cipl4t5y","category_id":"cl4edjhxq0002s696ex0s2oxj","_id":"cl4edjhxx000ks6965sbf6zzs"},{"post_id":"cl4edjhxt0005s696gglod8nv","category_id":"cl4edjhxu0008s69642ab5cb0","_id":"cl4edjhxx000ms696fvaq3gfz"},{"post_id":"cl4edjhxu0006s696ctvd1631","category_id":"cl4edjhxw000fs696417029cz","_id":"cl4edjhxy000ps6965aqqdckr"},{"post_id":"cl4edjhxu0006s696ctvd1631","category_id":"cl4edjhxx000ns6969jh11hzt","_id":"cl4edjhxy000qs6962siy0gqd"}],"PostTag":[{"post_id":"cl4edjhxk0000s696e4s1fle0","tag_id":"cl4edjhxr0003s696fo0z2l6g","_id":"cl4edjhxv0009s696a9uoe0wt"},{"post_id":"cl4edjhxv000as696diu6gjf6","tag_id":"cl4edjhxr0003s696fo0z2l6g","_id":"cl4edjhxw000es6961jab2m7m"},{"post_id":"cl4edjhxs0004s6964l396lum","tag_id":"cl4edjhxu0007s6966c6v84n5","_id":"cl4edjhxw000gs696dyo3gzok"},{"post_id":"cl4edjhxv000bs696cipl4t5y","tag_id":"cl4edjhxr0003s696fo0z2l6g","_id":"cl4edjhxx000js696dfijhlt8"},{"post_id":"cl4edjhxt0005s696gglod8nv","tag_id":"cl4edjhxw000ds6966n6zgl8v","_id":"cl4edjhxx000ls6961scih6w5"},{"post_id":"cl4edjhxu0006s696ctvd1631","tag_id":"cl4edjhxx000is696c0yp8u5k","_id":"cl4edjhxx000os696gtcxe6lx"}],"Tag":[{"name":"前端工程化","_id":"cl4edjhxr0003s696fo0z2l6g"},{"name":"tools mac","_id":"cl4edjhxu0007s6966c6v84n5"},{"name":"git","_id":"cl4edjhxw000ds6966n6zgl8v"},{"name":"algorithm","_id":"cl4edjhxx000is696c0yp8u5k"}]}}