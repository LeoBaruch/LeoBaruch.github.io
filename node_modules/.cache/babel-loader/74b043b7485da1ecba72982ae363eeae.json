{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"html\", null, [/*#__PURE__*/_createElementVNode(\"head\"), /*#__PURE__*/_createElementVNode(\"body\", null, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"二叉搜索树\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"定义\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"一颗二叉查找树（BST）是一颗二叉树，其中每个结点都含有一个Comparable的键（以及相关的值）且每个结点的键都大于其左子树的任意结点的键而小于右子树的任意结点的键.\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"每一个二叉搜索树的左右子树也都是一个二叉搜索树\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"二叉搜索树如果用中序遍历一下，就是一个从大到小的序列\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"二叉查找树的建立\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"class\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"BST\"), /*#__PURE__*/_createTextVNode(\"<Key \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"extends\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Comparable\"), /*#__PURE__*/_createTextVNode(\"<Key>, Value>\\n{\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Node root;               \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 二叉查找树的根结点\"), /*#__PURE__*/_createTextVNode(\"\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"class\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Node\"), /*#__PURE__*/_createTextVNode(\"\\n   {\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Key key;              \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 键\"), /*#__PURE__*/_createTextVNode(\"\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Value val;            \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 值\"), /*#__PURE__*/_createTextVNode(\"\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Node left, right;     \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 指向子树的链接\"), /*#__PURE__*/_createTextVNode(\"\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" N;                \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 以该结点为根的子树中的结点总数\"), /*#__PURE__*/_createTextVNode(\"\\n\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"Node\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(Key key, Value val, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" N)\")]), /*#__PURE__*/_createTextVNode(\"\\n      {  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".key = key; \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".val = val; \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".N = N; }\\n   }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"size\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"()\"), /*#__PURE__*/_createTextVNode(\"\\n   {  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" size(root);  }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"size\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Node x)\"), /*#__PURE__*/_createTextVNode(\"\\n   {\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (x == \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\";\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(\"           \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" x.N;\\n   }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(\" Value \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"get\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Key key)\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 请见算法3.3（续1）\"), /*#__PURE__*/_createTextVNode(\"\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"put\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Key key, Value val)\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 请见算法3.3（续1）\"), /*#__PURE__*/_createTextVNode(\"\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// max()、min()、floor()、ceiling()方法请见算法3.3（续2）\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// select()、rank()方法请见算法3.3（续3）\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// delete()、deleteMin()、deleteMax()方法请见算法3.3（续4）\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// keys()方法请见算法3.3（续5）\"), /*#__PURE__*/_createTextVNode(\"\\n}\\n\\n\")])])])], -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = [_hoisted_1];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"section\", null, _hoisted_2);\n}","map":{"version":3,"mappings":"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","names":["_createElementVNode","class","_createTextVNode","_hoisted_1","_createElementBlock"],"sourceRoot":"","sources":["/Users/gexiaolong/Downloads/others/coding/myblog/src/md/bst.md"],"sourcesContent":["<template><section><html><head></head><body><h2>二叉搜索树</h2>\n<h3>定义</h3>\n<p>一颗二叉查找树（BST）是一颗二叉树，其中每个结点都含有一个Comparable的键（以及相关的值）且每个结点的键都大于其左子树的任意结点的键而小于右子树的任意结点的键.</p>\n<p>每一个二叉搜索树的左右子树也都是一个二叉搜索树</p>\n<p>二叉搜索树如果用中序遍历一下，就是一个从大到小的序列</p>\n<h3>二叉查找树的建立</h3>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BST</span>&lt;Key <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;Key&gt;, Value&gt;\n{\n   <span class=\"hljs-keyword\">private</span> Node root;               <span class=\"hljs-comment\">// 二叉查找树的根结点</span>\n\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>\n   {\n      <span class=\"hljs-keyword\">private</span> Key key;              <span class=\"hljs-comment\">// 键</span>\n      <span class=\"hljs-keyword\">private</span> Value val;            <span class=\"hljs-comment\">// 值</span>\n      <span class=\"hljs-keyword\">private</span> Node left, right;     <span class=\"hljs-comment\">// 指向子树的链接</span>\n      <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> N;                <span class=\"hljs-comment\">// 以该结点为根的子树中的结点总数</span>\n\n      <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(Key key, Value val, <span class=\"hljs-type\">int</span> N)</span>\n      {  <span class=\"hljs-built_in\">this</span>.key = key; <span class=\"hljs-built_in\">this</span>.val = val; <span class=\"hljs-built_in\">this</span>.N = N; }\n   }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span>\n   {  <span class=\"hljs-keyword\">return</span> size(root);  }\n\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">(Node x)</span>\n   {\n      <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-keyword\">else</span>           <span class=\"hljs-keyword\">return</span> x.N;\n   }\n\n   <span class=\"hljs-keyword\">public</span> Value <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(Key key)</span>\n   <span class=\"hljs-comment\">// 请见算法3.3（续1）</span>\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(Key key, Value val)</span>\n   <span class=\"hljs-comment\">// 请见算法3.3（续1）</span>\n\n   <span class=\"hljs-comment\">// max()、min()、floor()、ceiling()方法请见算法3.3（续2）</span>\n   <span class=\"hljs-comment\">// select()、rank()方法请见算法3.3（续3）</span>\n   <span class=\"hljs-comment\">// delete()、deleteMin()、deleteMax()方法请见算法3.3（续4）</span>\n   <span class=\"hljs-comment\">// keys()方法请见算法3.3（续5）</span>\n}\n\n</code></pre>\n</body></html></section></template>\n\n"]},"metadata":{},"sourceType":"module"}