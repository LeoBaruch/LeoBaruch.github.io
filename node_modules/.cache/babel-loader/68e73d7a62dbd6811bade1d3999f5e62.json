{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"html\", null, [/*#__PURE__*/_createElementVNode(\"head\"), /*#__PURE__*/_createElementVNode(\"body\", null, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"优先队列 (算法第四版2.4)\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"普通队列是一种先进先出的数据结构，先放进队列的元素取值时优先被取出来。而优先队列是一种具有最高优先级元素先出的数据结构，比如每次取值都取最大的元素, 它包含最重要的两种操作: 删除最大元素delMax和插入元素insert().\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"堆的定义\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"当一颗二叉树的每个节点都大于等于它的两个子节点时,它被称为堆有序, 所以根节点是堆有序的二叉树中的最大节点\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"二叉堆表示法\"), /*#__PURE__*/_createElementVNode(\"h4\", null, \"完全二叉树的定义\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"二叉树除开最后一层，其他层结点数都达到最大，最后一层的所有结点都集中在左边（左边结点排列满的情况下，右边才能缺失结点）\"), /*#__PURE__*/_createElementVNode(\"h4\", null, \"数组表示完全二叉树\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"如果我们用指针来表示堆有序的二叉树，那么每个元素都需要三个指针来找到它的上下结点（父结点和两个子结点各需要一个）. 如果我们使用完全二叉树，表达就会变得特别方便\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"完全二叉树只用数组而不需要指针就可以表示。具体方法就是将二叉树的结点按照层级顺序放入数组中，根结点在位置 1，它的子结点在位置 2 和 3，而子结点的子结点则分别在位置 4、5、6 和 7，以此类推。 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"（不使用数组的第一个位置, 哨兵）\")]), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"strong\", null, \"简单起见，在下文中我们将二叉堆简称为堆）\"), /*#__PURE__*/_createTextVNode(\" 在一个堆中，位置 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"k\"), /*#__PURE__*/_createTextVNode(\" 的结点的父结点的位置为 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"k / 2\"), /*#__PURE__*/_createTextVNode(\"而它的两个子结点的位置则分别为 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"2k\"), /*#__PURE__*/_createTextVNode(\" 和 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"2k+1\"), /*#__PURE__*/_createTextVNode(\"。这样在不使用指针的情况下（我们在第 3 章中讨论二叉树时会用到它们）我们也可以通过计算数组的索引在树中上下移动：从 a[k] 向上一层就令 k 等于 k/2，向下一层则令 k 等于 2k 或 2k+1。\")]), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"strong\", null, \"命题 P\"), /*#__PURE__*/_createTextVNode(\"。一棵大小为 的完全二叉树的高度为 。\")]), /*#__PURE__*/_createElementVNode(\"p\", null, \"证明。通过归纳很容易可以证明这一点，且当 达到 2 的幂时树的高度会加 1。\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"堆的算法\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"我们用长度为 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"k + 1\"), /*#__PURE__*/_createTextVNode(\" 的私有数组 pq[] 来表示一个大小为 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"k\"), /*#__PURE__*/_createTextVNode(\" 的堆，我们不会使用 pq[0]，堆元素放在 pq[1] 至 pq[N] 中\")]), /*#__PURE__*/_createElementVNode(\"h4\", null, \"堆实现的比较和交换方法\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"但因为所有的元素都在数组 pq[] 中，不再将数组作为参数传递\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"less\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" i, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" j)\")]), /*#__PURE__*/_createTextVNode(\"\\n{  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" pq[i].compareTo(pq[j]) < \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\";  }\\n\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"exch\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" i, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" j)\")]), /*#__PURE__*/_createTextVNode(\"\\n{  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"Key\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"t\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\" pq[i]; pq[i] = pq[j]; pq[j] = t;  }\\n\\n\")])])])], -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = [_hoisted_1];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"section\", null, _hoisted_2);\n}","map":{"version":3,"mappings":"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","names":["_createElementVNode","_createTextVNode","class","_hoisted_1","_createElementBlock"],"sourceRoot":"","sources":["/Users/gexiaolong/Downloads/others/coding/myblog/src/md/PriorityQueue.md"],"sourcesContent":["<template><section><html><head></head><body><h2>优先队列 (算法第四版2.4)</h2>\n<p>普通队列是一种先进先出的数据结构，先放进队列的元素取值时优先被取出来。而优先队列是一种具有最高优先级元素先出的数据结构，比如每次取值都取最大的元素, 它包含最重要的两种操作: 删除最大元素delMax和插入元素insert().</p>\n<h3>堆的定义</h3>\n<p>当一颗二叉树的每个节点都大于等于它的两个子节点时,它被称为堆有序, 所以根节点是堆有序的二叉树中的最大节点</p>\n<h3>二叉堆表示法</h3>\n<h4>完全二叉树的定义</h4>\n<p>二叉树除开最后一层，其他层结点数都达到最大，最后一层的所有结点都集中在左边（左边结点排列满的情况下，右边才能缺失结点）</p>\n<h4>数组表示完全二叉树</h4>\n<p>如果我们用指针来表示堆有序的二叉树，那么每个元素都需要三个指针来找到它的上下结点（父结点和两个子结点各需要一个）. 如果我们使用完全二叉树，表达就会变得特别方便</p>\n<p>完全二叉树只用数组而不需要指针就可以表示。具体方法就是将二叉树的结点按照层级顺序放入数组中，根结点在位置 1，它的子结点在位置 2 和 3，而子结点的子结点则分别在位置 4、5、6 和 7，以此类推。 <strong>（不使用数组的第一个位置, 哨兵）</strong></p>\n<p><strong>简单起见，在下文中我们将二叉堆简称为堆）</strong> 在一个堆中，位置 <strong>k</strong> 的结点的父结点的位置为 <strong>k / 2</strong>而它的两个子结点的位置则分别为 <strong>2k</strong> 和 <strong>2k+1</strong>。这样在不使用指针的情况下（我们在第 3 章中讨论二叉树时会用到它们）我们也可以通过计算数组的索引在树中上下移动：从 a[k] 向上一层就令 k 等于 k/2，向下一层则令 k 等于 2k 或 2k+1。</p>\n<p><strong>命题 P</strong>。一棵大小为  的完全二叉树的高度为 。</p>\n<p>证明。通过归纳很容易可以证明这一点，且当 达到 2 的幂时树的高度会加 1。</p>\n<h3>堆的算法</h3>\n<p>我们用长度为 <strong>k + 1</strong> 的私有数组 pq[] 来表示一个大小为 <strong>k</strong> 的堆，我们不会使用 pq[0]，堆元素放在 pq[1] 至 pq[N] 中</p>\n<h4>堆实现的比较和交换方法</h4>\n<p>但因为所有的元素都在数组 pq[] 中，不再将数组作为参数传递</p>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">less</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span>\n{  <span class=\"hljs-keyword\">return</span> pq[i].compareTo(pq[j]) &lt; <span class=\"hljs-number\">0</span>;  }\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">exch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span>\n{  <span class=\"hljs-type\">Key</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> pq[i]; pq[i] = pq[j]; pq[j] = t;  }\n\n</code></pre>\n</body></html></section></template>\n\n"]},"metadata":{},"sourceType":"module"}