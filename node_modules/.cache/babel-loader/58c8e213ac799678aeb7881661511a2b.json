{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"html\", null, [/*#__PURE__*/_createElementVNode(\"head\"), /*#__PURE__*/_createElementVNode(\"body\", null, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"优先队列 (算法第四版2.4)\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"普通队列是一种先进先出的数据结构，先放进队列的元素取值时优先被取出来。而优先队列是一种具有最高优先级元素先出的数据结构，比如每次取值都取最大的元素, 它包含最重要的两种操作: 删除最大元素delMax和插入元素insert().\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"堆的定义\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"当一颗二叉树的每个节点都大于等于它的两个子节点时,它被称为堆有序, 所以根节点是堆有序的二叉树中的最大节点\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"二叉堆表示法\"), /*#__PURE__*/_createElementVNode(\"h4\", null, \"完全二叉树的定义\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"二叉树除开最后一层，其他层结点数都达到最大，最后一层的所有结点都集中在左边（左边结点排列满的情况下，右边才能缺失结点）\"), /*#__PURE__*/_createElementVNode(\"h4\", null, \"数组表示完全二叉树\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"如果我们用指针来表示堆有序的二叉树，那么每个元素都需要三个指针来找到它的上下结点（父结点和两个子结点各需要一个）. 如果我们使用完全二叉树，表达就会变得特别方便\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"完全二叉树只用数组而不需要指针就可以表示。具体方法就是将二叉树的结点按照层级顺序放入数组中，根结点在位置 1，它的子结点在位置 2 和 3，而子结点的子结点则分别在位置 4、5、6 和 7，以此类推。 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"（不使用数组的第一个位置, 哨兵）\")]), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"strong\", null, \"简单起见，在下文中我们将二叉堆简称为堆）\"), /*#__PURE__*/_createTextVNode(\" 在一个堆中，位置 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"k\"), /*#__PURE__*/_createTextVNode(\" 的结点的父结点的位置为 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"k / 2\"), /*#__PURE__*/_createTextVNode(\"而它的两个子结点的位置则分别为 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"2k\"), /*#__PURE__*/_createTextVNode(\" 和 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"2k+1\"), /*#__PURE__*/_createTextVNode(\"。这样在不使用指针的情况下（我们在第 3 章中讨论二叉树时会用到它们）我们也可以通过计算数组的索引在树中上下移动：从 a[k] 向上一层就令 k 等于 k/2，向下一层则令 k 等于 2k 或 2k+1。\")]), /*#__PURE__*/_createElementVNode(\"blockquote\", null, [/*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"strong\", null, \"命题 P\"), /*#__PURE__*/_createTextVNode(\"。一棵大小为 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"N\"), /*#__PURE__*/_createTextVNode(\" 的完全二叉树的高度为 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"lgN\"), /*#__PURE__*/_createTextVNode(\"。\")])]), /*#__PURE__*/_createElementVNode(\"blockquote\", null, [/*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"strong\", null, \"证明\"), /*#__PURE__*/_createTextVNode(\"。通过归纳很容易可以证明这一点，且当 达到 2 的幂时树的高度会加 1。\")])]), /*#__PURE__*/_createElementVNode(\"h3\", null, \"堆的算法\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"我们用长度为 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"k + 1\"), /*#__PURE__*/_createTextVNode(\" 的私有数组 pq[] 来表示一个大小为 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"k\"), /*#__PURE__*/_createTextVNode(\" 的堆，我们不会使用 pq[0]，堆元素放在 pq[1] 至 pq[N] 中\")]), /*#__PURE__*/_createElementVNode(\"h4\", null, \"堆实现的比较和交换方法\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"因为所有的元素都在数组 pq[] 中，不再将数组作为参数传递\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"less\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" i, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" j)\")]), /*#__PURE__*/_createTextVNode(\"\\n{  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" pq[i].compareTo(pq[j]) < \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\";  }\\n\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"exch\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" i, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" j)\")]), /*#__PURE__*/_createTextVNode(\"\\n{  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"Key\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"t\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\" pq[i]; pq[i] = pq[j]; pq[j] = t;  }\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"h4\", null, \"由下自上的堆有序化（上浮）\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"当调用优先队列的insert方法时，我们首先把元素放置到数组的结尾，然后再把该元素上浮到正确的节点，最终形成堆有序状态。\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"swim\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" k)\")]), /*#__PURE__*/_createTextVNode(\"\\n{\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"while\"), /*#__PURE__*/_createTextVNode(\" (k > \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\" && less(k/\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"2\"), /*#__PURE__*/_createTextVNode(\", k))\\n   {\\n      exch(k/\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"2\"), /*#__PURE__*/_createTextVNode(\", k);\\n      k = k/\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"2\"), /*#__PURE__*/_createTextVNode(\";\\n   }\\n}\\n\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"h4\", null, \"由上至下的堆有序化（下沉）\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sink\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" k)\")]), /*#__PURE__*/_createTextVNode(\"\\n{\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"while\"), /*#__PURE__*/_createTextVNode(\" (\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"2\"), /*#__PURE__*/_createTextVNode(\"*k <= N)\\n   {\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"j\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"2\"), /*#__PURE__*/_createTextVNode(\"*k;\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (j < N && less(j, j+\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\")) j++;\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (!less(k, j)) \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"break\"), /*#__PURE__*/_createTextVNode(\";\\n      exch(k, j);\\n      k = j;\\n   }\\n}\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"'../assets/%E5%A0%86%E7%9A%84%E6%93%8D%E4%BD%9C.png'\",\n  alt: \"堆的操作\"\n})]), /*#__PURE__*/_createElementVNode(\"h4\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"class\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"MaxPQ\"), /*#__PURE__*/_createTextVNode(\"<Key \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"extends\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Comparable\"), /*#__PURE__*/_createTextVNode(\"<Key>>\\n{\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Key[] pq;             \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 基于堆的完全按二叉树”\"), /*#__PURE__*/_createTextVNode(\"\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"N\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\";            \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 存储于pq[1..N]中，pq[0]没有使用\"), /*#__PURE__*/_createTextVNode(\"\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"MaxPQ\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" maxN)\")]), /*#__PURE__*/_createTextVNode(\"\\n   {  pq = (Key[]) \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"new\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Comparable\"), /*#__PURE__*/_createTextVNode(\"[maxN+\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\"];  }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"isEmpty\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"()\"), /*#__PURE__*/_createTextVNode(\"\\n   {  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"N\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\"= \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\";  }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"size\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"()\"), /*#__PURE__*/_createTextVNode(\"\\n   {  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" N;  }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"insert\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Key v)\"), /*#__PURE__*/_createTextVNode(\"\\n   {\\n      pq[++N] = v;\\n      swim(N);\\n   }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(\" Key \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"delMax\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"()\"), /*#__PURE__*/_createTextVNode(\"\\n   {\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"Key\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"max\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\" pq[\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\"];           \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 从根结点得到最大元素\"), /*#__PURE__*/_createTextVNode(\"\\n      exch(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\", N--);              \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 将其和最后一个结点交换\"), /*#__PURE__*/_createTextVNode(\"\\n      pq[N+\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\"] = \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\";            \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 防止对象游离\"), /*#__PURE__*/_createTextVNode(\"\\n      sink(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\");                   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 恢复堆的有序性\"), /*#__PURE__*/_createTextVNode(\"\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" max;\\n   }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 辅助方法的实现请见本节前面的代码框\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"less\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" i, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" j)\")]), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"exch\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" i, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" j)\")]), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"swim\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" k)\")]), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sink\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" k)\")]), /*#__PURE__*/_createTextVNode(\"\\n}\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"p\", null, \"优先队列由一个基于堆的完全二叉树表示，存储于数组 pq[1..N] 中，pq[0] 没有使用。在 insert() 中，我们将 N 加一并把新元素添加在数组最后，然后用 swim() 恢复堆的秩序。在 delMax() 中，我们从 pq[1] 中得到需要返回的元素，然后将 pq[N] 移动到 pq[1]，将 N 减一并用 sink() 恢复堆的秩序。同时我们还将不再使用的 pq[N+1] 设为 null，以便系统回收它所占用的空间。这里省略了动态调整数组大小的代码\")])], -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = [_hoisted_1];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"section\", null, _hoisted_2);\n}","map":{"version":3,"mappings":"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","names":["_createElementVNode","_createTextVNode","class","src","alt","_hoisted_1","_createElementBlock"],"sourceRoot":"","sources":["/Users/gexiaolong/Downloads/others/coding/myblog/src/md/PriorityQueue.md"],"sourcesContent":["<template><section><html><head></head><body><h2>优先队列 (算法第四版2.4)</h2>\n<p>普通队列是一种先进先出的数据结构，先放进队列的元素取值时优先被取出来。而优先队列是一种具有最高优先级元素先出的数据结构，比如每次取值都取最大的元素, 它包含最重要的两种操作: 删除最大元素delMax和插入元素insert().</p>\n<h3>堆的定义</h3>\n<p>当一颗二叉树的每个节点都大于等于它的两个子节点时,它被称为堆有序, 所以根节点是堆有序的二叉树中的最大节点</p>\n<h3>二叉堆表示法</h3>\n<h4>完全二叉树的定义</h4>\n<p>二叉树除开最后一层，其他层结点数都达到最大，最后一层的所有结点都集中在左边（左边结点排列满的情况下，右边才能缺失结点）</p>\n<h4>数组表示完全二叉树</h4>\n<p>如果我们用指针来表示堆有序的二叉树，那么每个元素都需要三个指针来找到它的上下结点（父结点和两个子结点各需要一个）. 如果我们使用完全二叉树，表达就会变得特别方便</p>\n<p>完全二叉树只用数组而不需要指针就可以表示。具体方法就是将二叉树的结点按照层级顺序放入数组中，根结点在位置 1，它的子结点在位置 2 和 3，而子结点的子结点则分别在位置 4、5、6 和 7，以此类推。 <strong>（不使用数组的第一个位置, 哨兵）</strong></p>\n<p><strong>简单起见，在下文中我们将二叉堆简称为堆）</strong> 在一个堆中，位置 <strong>k</strong> 的结点的父结点的位置为 <strong>k / 2</strong>而它的两个子结点的位置则分别为 <strong>2k</strong> 和 <strong>2k+1</strong>。这样在不使用指针的情况下（我们在第 3 章中讨论二叉树时会用到它们）我们也可以通过计算数组的索引在树中上下移动：从 a[k] 向上一层就令 k 等于 k/2，向下一层则令 k 等于 2k 或 2k+1。</p>\n<blockquote>\n<p><strong>命题 P</strong>。一棵大小为 <strong>N</strong> 的完全二叉树的高度为 <strong>lgN</strong>。</p>\n</blockquote>\n<blockquote>\n<p><strong>证明</strong>。通过归纳很容易可以证明这一点，且当 达到 2 的幂时树的高度会加 1。</p>\n</blockquote>\n<h3>堆的算法</h3>\n<p>我们用长度为 <strong>k + 1</strong> 的私有数组 pq[] 来表示一个大小为 <strong>k</strong> 的堆，我们不会使用 pq[0]，堆元素放在 pq[1] 至 pq[N] 中</p>\n<h4>堆实现的比较和交换方法</h4>\n<p>因为所有的元素都在数组 pq[] 中，不再将数组作为参数传递</p>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">less</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span>\n{  <span class=\"hljs-keyword\">return</span> pq[i].compareTo(pq[j]) &lt; <span class=\"hljs-number\">0</span>;  }\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">exch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span>\n{  <span class=\"hljs-type\">Key</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> pq[i]; pq[i] = pq[j]; pq[j] = t;  }\n\n</code></pre>\n<h4>由下自上的堆有序化（上浮）</h4>\n<p>当调用优先队列的insert方法时，我们首先把元素放置到数组的结尾，然后再把该元素上浮到正确的节点，最终形成堆有序状态。</p>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">swim</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k)</span>\n{\n   <span class=\"hljs-keyword\">while</span> (k &gt; <span class=\"hljs-number\">1</span> &amp;&amp; less(k/<span class=\"hljs-number\">2</span>, k))\n   {\n      exch(k/<span class=\"hljs-number\">2</span>, k);\n      k = k/<span class=\"hljs-number\">2</span>;\n   }\n}\n\n\n</code></pre>\n<h4>由上至下的堆有序化（下沉）</h4>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\">\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sink</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k)</span>\n{\n   <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">2</span>*k &lt;= N)\n   {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>*k;\n      <span class=\"hljs-keyword\">if</span> (j &lt; N &amp;&amp; less(j, j+<span class=\"hljs-number\">1</span>)) j++;\n      <span class=\"hljs-keyword\">if</span> (!less(k, j)) <span class=\"hljs-keyword\">break</span>;\n      exch(k, j);\n      k = j;\n   }\n}\n\n</code></pre>\n<p><img src=\"'../assets/%E5%A0%86%E7%9A%84%E6%93%8D%E4%BD%9C.png'\" alt=\"堆的操作\"></p>\n<h4></h4>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MaxPQ</span>&lt;Key <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;Key&gt;&gt;\n{\n  <span class=\"hljs-keyword\">private</span> Key[] pq;             <span class=\"hljs-comment\">// 基于堆的完全按二叉树”</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;            <span class=\"hljs-comment\">// 存储于pq[1..N]中，pq[0]没有使用</span>\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MaxPQ</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> maxN)</span>\n   {  pq = (Key[]) <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparable</span>[maxN+<span class=\"hljs-number\">1</span>];  }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span>\n   {  <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">0</span>;  }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span>\n   {  <span class=\"hljs-keyword\">return</span> N;  }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(Key v)</span>\n   {\n      pq[++N] = v;\n      swim(N);\n   }\n\n   <span class=\"hljs-keyword\">public</span> Key <span class=\"hljs-title function_\">delMax</span><span class=\"hljs-params\">()</span>\n   {\n      <span class=\"hljs-type\">Key</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> pq[<span class=\"hljs-number\">1</span>];           <span class=\"hljs-comment\">// 从根结点得到最大元素</span>\n      exch(<span class=\"hljs-number\">1</span>, N--);              <span class=\"hljs-comment\">// 将其和最后一个结点交换</span>\n      pq[N+<span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">null</span>;            <span class=\"hljs-comment\">// 防止对象游离</span>\n      sink(<span class=\"hljs-number\">1</span>);                   <span class=\"hljs-comment\">// 恢复堆的有序性</span>\n      <span class=\"hljs-keyword\">return</span> max;\n   }\n\n   <span class=\"hljs-comment\">// 辅助方法的实现请见本节前面的代码框</span>\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">less</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span>\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">exch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span>\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">swim</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k)</span>\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sink</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k)</span>\n}\n\n</code></pre>\n<p>优先队列由一个基于堆的完全二叉树表示，存储于数组 pq[1..N] 中，pq[0] 没有使用。在 insert() 中，我们将 N 加一并把新元素添加在数组最后，然后用 swim() 恢复堆的秩序。在 delMax() 中，我们从 pq[1] 中得到需要返回的元素，然后将 pq[N] 移动到 pq[1]，将 N 减一并用 sink() 恢复堆的秩序。同时我们还将不再使用的 pq[N+1] 设为 null，以便系统回收它所占用的空间。这里省略了动态调整数组大小的代码</p>\n</body></html></section></template>\n\n"]},"metadata":{},"sourceType":"module"}