{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createStaticVNode(\"<html><head></head><body><h2>2-3树</h2><p>上文说到,一颗二叉查找树在最差情况下会退化为链表,它的插入和查找的时间复杂度均为<strong>N</strong>,此时的性能是很糟糕的.为了保证二分查找树的平衡性,将运行时间控制在对数级,引入了<strong>2-3树</strong>概念</p><h3>定义</h3><p>为了保证查找树的平衡性,我们允许树中一个节点储存多个键来获得更多的灵活性.一个2-3查找树或由以下节点组成:</p><ul><li><p>2-节点: 标准的二叉查找树中的节点.含有<strong>一个键</strong>（及其对应的值）和<strong>两条链接</strong>,左链接指向的目标节点中的键都小于该结点，右链接指向的目标节点的键都大于该结点。</p></li><li><p>3-节点: 含有<strong>两个键</strong>（及其对应的值）和<strong>三条链接</strong>，<strong>左链接</strong>指向的 目标节点的键都<strong>小于</strong>该结点，中链接指向的 目标节点中的键都位于该结点的两个键之间，右链接指向的目标节点中的键都大于该结点。</p></li></ul><h3></h3></body></html>\", 1);\n\nconst _hoisted_2 = [_hoisted_1];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"section\", null, _hoisted_2);\n}","map":{"version":3,"mappings":";;gCAAAA;;oBAASC;;uBAATC,oBAawB,SAbxB,EAawB,IAbxB","names":["_createStaticVNode","_hoisted_1","_createElementBlock"],"sourceRoot":"","sources":["/Users/gexiaolong/Downloads/others/coding/myblog/src/md/2-3tree.md"],"sourcesContent":["<template><section><html><head></head><body><h2>2-3树</h2>\n<p>上文说到,一颗二叉查找树在最差情况下会退化为链表,它的插入和查找的时间复杂度均为<strong>N</strong>,此时的性能是很糟糕的.为了保证二分查找树的平衡性,将运行时间控制在对数级,引入了<strong>2-3树</strong>概念</p>\n<h3>定义</h3>\n<p>为了保证查找树的平衡性,我们允许树中一个节点储存多个键来获得更多的灵活性.一个2-3查找树或由以下节点组成:</p>\n<ul>\n<li>\n<p>2-节点: 标准的二叉查找树中的节点.含有<strong>一个键</strong>（及其对应的值）和<strong>两条链接</strong>,左链接指向的目标节点中的键都小于该结点，右链接指向的目标节点的键都大于该结点。</p>\n</li>\n<li>\n<p>3-节点: 含有<strong>两个键</strong>（及其对应的值）和<strong>三条链接</strong>，<strong>左链接</strong>指向的 目标节点的键都<strong>小于</strong>该结点，中链接指向的 目标节点中的键都位于该结点的两个键之间，右链接指向的目标节点中的键都大于该结点。</p>\n</li>\n</ul>\n<h3></h3>\n</body></html></section></template>\n\n"]},"metadata":{},"sourceType":"module"}