{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"html\", null, [/*#__PURE__*/_createElementVNode(\"head\"), /*#__PURE__*/_createElementVNode(\"body\", null, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"二叉搜索树\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"定义\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"一颗二叉查找树（BST）是一颗二叉树，其中每个结点都含有一个Comparable的键（以及相关的值）且每个结点的键都大于其左子树的任意结点的键而小于右子树的任意结点的键.\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"每一个二叉搜索树的左右子树也都是一个二叉搜索树\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"二叉搜索树如果用中序遍历一下，就是一个从大到小的序列\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"二叉查找树的建立\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"class\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"BST\"), /*#__PURE__*/_createTextVNode(\"<Key \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"extends\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Comparable\"), /*#__PURE__*/_createTextVNode(\"<Key>, Value>\\n{\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Node root;               \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 二叉查找树的根结点\"), /*#__PURE__*/_createTextVNode(\"\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"class\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Node\"), /*#__PURE__*/_createTextVNode(\"\\n   {\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Key key;              \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 键\"), /*#__PURE__*/_createTextVNode(\"\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Value val;            \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 值\"), /*#__PURE__*/_createTextVNode(\"\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Node left, right;     \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 指向子树的链接\"), /*#__PURE__*/_createTextVNode(\"\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" N;                \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 以该结点为根的子树中的结点总数\"), /*#__PURE__*/_createTextVNode(\"\\n\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"Node\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(Key key, Value val, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" N)\")]), /*#__PURE__*/_createTextVNode(\"\\n      {  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".key = key; \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".val = val; \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".N = N; }\\n   }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"size\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"()\"), /*#__PURE__*/_createTextVNode(\"\\n   {  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" size(root);  }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"size\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Node x)\"), /*#__PURE__*/_createTextVNode(\"\\n   {\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (x == \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\";\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(\"           \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" x.N;\\n   }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(\" Value \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"get\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Key key)\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 请见算法3.3（续1）\"), /*#__PURE__*/_createTextVNode(\"\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"put\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Key key, Value val)\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 请见算法3.3（续1）\"), /*#__PURE__*/_createTextVNode(\"\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// max()、min()、floor()、ceiling()方法请见算法3.3（续2）\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// select()、rank()方法请见算法3.3（续3）\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// delete()、deleteMin()、deleteMax()方法请见算法3.3（续4）\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// keys()方法请见算法3.3（续5）\"), /*#__PURE__*/_createTextVNode(\"\\n}\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"h3\", null, \"算法 3.3（续 1）二叉查找树的查找和排序方法的实现\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(\" Value \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"get\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Key key)\"), /*#__PURE__*/_createTextVNode(\"\\n{  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" get(root, key);  }\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Value \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"get\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Node x, Key key)\"), /*#__PURE__*/_createTextVNode(\"\\n{  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 在以x为根结点的子树中查找并返回key所对应的值；\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 如果找不到则返回null\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (x == \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\";\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"cmp\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\" key.compareTo(x.key);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\"      (cmp < \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" get(x.left, key);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (cmp > \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" get(x.right, key);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" x.val;\\n}\\n\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"put\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Key key, Value val)\"), /*#__PURE__*/_createTextVNode(\"\\n{  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 查找key，找到则更新它的值，否则为它创建一个新的结点\"), /*#__PURE__*/_createTextVNode(\"\\n   root = put(root, key, val);\\n}\\n\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Node \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"put\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Node x, Key key, Value val)\"), /*#__PURE__*/_createTextVNode(\"\\n{\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 如果key存在于以x为根结点的子树中则更新它的值；\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 否则将以key和val为键值对的新结点插入到该子树中\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (x == \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"new\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Node\"), /*#__PURE__*/_createTextVNode(\"(key, val, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\");\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"cmp\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\" key.compareTo(x.key);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\"      (cmp < \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\") x.left  = put(x.left,  key, val);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (cmp > \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\") x.right = put(x.right, key, val);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(\" x.val = val;\\n   x.N = size(x.left) + size(x.right) + \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\";\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" x;\\n}\\n\\n\")])])])], -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = [_hoisted_1];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"section\", null, _hoisted_2);\n}","map":{"version":3,"mappings":"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","names":["_createElementVNode","class","_createTextVNode","_hoisted_1","_createElementBlock"],"sourceRoot":"","sources":["/Users/gexiaolong/Downloads/others/coding/myblog/src/md/bst.md"],"sourcesContent":["<template><section><html><head></head><body><h2>二叉搜索树</h2>\n<h3>定义</h3>\n<p>一颗二叉查找树（BST）是一颗二叉树，其中每个结点都含有一个Comparable的键（以及相关的值）且每个结点的键都大于其左子树的任意结点的键而小于右子树的任意结点的键.</p>\n<p>每一个二叉搜索树的左右子树也都是一个二叉搜索树</p>\n<p>二叉搜索树如果用中序遍历一下，就是一个从大到小的序列</p>\n<h3>二叉查找树的建立</h3>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BST</span>&lt;Key <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;Key&gt;, Value&gt;\n{\n   <span class=\"hljs-keyword\">private</span> Node root;               <span class=\"hljs-comment\">// 二叉查找树的根结点</span>\n\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>\n   {\n      <span class=\"hljs-keyword\">private</span> Key key;              <span class=\"hljs-comment\">// 键</span>\n      <span class=\"hljs-keyword\">private</span> Value val;            <span class=\"hljs-comment\">// 值</span>\n      <span class=\"hljs-keyword\">private</span> Node left, right;     <span class=\"hljs-comment\">// 指向子树的链接</span>\n      <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> N;                <span class=\"hljs-comment\">// 以该结点为根的子树中的结点总数</span>\n\n      <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(Key key, Value val, <span class=\"hljs-type\">int</span> N)</span>\n      {  <span class=\"hljs-built_in\">this</span>.key = key; <span class=\"hljs-built_in\">this</span>.val = val; <span class=\"hljs-built_in\">this</span>.N = N; }\n   }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span>\n   {  <span class=\"hljs-keyword\">return</span> size(root);  }\n\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">(Node x)</span>\n   {\n      <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-keyword\">else</span>           <span class=\"hljs-keyword\">return</span> x.N;\n   }\n\n   <span class=\"hljs-keyword\">public</span> Value <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(Key key)</span>\n   <span class=\"hljs-comment\">// 请见算法3.3（续1）</span>\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(Key key, Value val)</span>\n   <span class=\"hljs-comment\">// 请见算法3.3（续1）</span>\n\n   <span class=\"hljs-comment\">// max()、min()、floor()、ceiling()方法请见算法3.3（续2）</span>\n   <span class=\"hljs-comment\">// select()、rank()方法请见算法3.3（续3）</span>\n   <span class=\"hljs-comment\">// delete()、deleteMin()、deleteMax()方法请见算法3.3（续4）</span>\n   <span class=\"hljs-comment\">// keys()方法请见算法3.3（续5）</span>\n}\n\n</code></pre>\n<h3>算法 3.3（续 1）二叉查找树的查找和排序方法的实现</h3>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> Value <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(Key key)</span>\n{  <span class=\"hljs-keyword\">return</span> get(root, key);  }\n<span class=\"hljs-keyword\">private</span> Value <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(Node x, Key key)</span>\n{  <span class=\"hljs-comment\">// 在以x为根结点的子树中查找并返回key所对应的值；</span>\n   <span class=\"hljs-comment\">// 如果找不到则返回null</span>\n   <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n   <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cmp</span> <span class=\"hljs-operator\">=</span> key.compareTo(x.key);\n   <span class=\"hljs-keyword\">if</span>      (cmp &lt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> get(x.left, key);\n   <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (cmp &gt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> get(x.right, key);\n   <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> x.val;\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(Key key, Value val)</span>\n{  <span class=\"hljs-comment\">// 查找key，找到则更新它的值，否则为它创建一个新的结点</span>\n   root = put(root, key, val);\n}\n\n<span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(Node x, Key key, Value val)</span>\n{\n   <span class=\"hljs-comment\">// 如果key存在于以x为根结点的子树中则更新它的值；</span>\n   <span class=\"hljs-comment\">// 否则将以key和val为键值对的新结点插入到该子树中</span>\n   <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key, val, <span class=\"hljs-number\">1</span>);\n   <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cmp</span> <span class=\"hljs-operator\">=</span> key.compareTo(x.key);\n   <span class=\"hljs-keyword\">if</span>      (cmp &lt; <span class=\"hljs-number\">0</span>) x.left  = put(x.left,  key, val);\n   <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (cmp &gt; <span class=\"hljs-number\">0</span>) x.right = put(x.right, key, val);\n   <span class=\"hljs-keyword\">else</span> x.val = val;\n   x.N = size(x.left) + size(x.right) + <span class=\"hljs-number\">1</span>;\n   <span class=\"hljs-keyword\">return</span> x;\n}\n\n</code></pre>\n</body></html></section></template>\n\n"]},"metadata":{},"sourceType":"module"}