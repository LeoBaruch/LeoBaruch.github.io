{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"html\", null, [/*#__PURE__*/_createElementVNode(\"head\"), /*#__PURE__*/_createElementVNode(\"body\", null, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"二叉搜索树\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"定义\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"一颗二叉查找树（BST）是一颗二叉树，其中每个结点都含有一个Comparable的键（以及相关的值）且每个结点的键都大于其左子树的任意结点的键而小于右子树的任意结点的键.\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"每一个二叉搜索树的左右子树也都是一个二叉搜索树\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"二叉搜索树如果用中序遍历一下，就是一个从大到小的序列\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"二叉查找树的建立\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"class\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"BST\"), /*#__PURE__*/_createTextVNode(\"<Key \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"extends\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Comparable\"), /*#__PURE__*/_createTextVNode(\"<Key>, Value>\\n{\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Node root;               \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 二叉查找树的根结点\"), /*#__PURE__*/_createTextVNode(\"\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"class\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Node\"), /*#__PURE__*/_createTextVNode(\"\\n   {\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Key key;              \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 键\"), /*#__PURE__*/_createTextVNode(\"\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Value val;            \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 值\"), /*#__PURE__*/_createTextVNode(\"\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Node left, right;     \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 指向子树的链接\"), /*#__PURE__*/_createTextVNode(\"\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" N;                \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 以该结点为根的子树中的结点总数\"), /*#__PURE__*/_createTextVNode(\"\\n\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"Node\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(Key key, Value val, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" N)\")]), /*#__PURE__*/_createTextVNode(\"\\n      {  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".key = key; \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".val = val; \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".N = N; }\\n   }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"size\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"()\"), /*#__PURE__*/_createTextVNode(\"\\n   {  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" size(root);  }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"size\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Node x)\"), /*#__PURE__*/_createTextVNode(\"\\n   {\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (x == \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\";\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(\"           \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" x.N;\\n   }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(\" Value \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"get\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Key key)\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 请见算法3.3（续1）\"), /*#__PURE__*/_createTextVNode(\"\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"put\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Key key, Value val)\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 请见算法3.3（续1）\"), /*#__PURE__*/_createTextVNode(\"\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// max()、min()、floor()、ceiling()方法请见算法3.3（续2）\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// select()、rank()方法请见算法3.3（续3）\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// delete()、deleteMin()、deleteMax()方法请见算法3.3（续4）\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// keys()方法请见算法3.3（续5）\"), /*#__PURE__*/_createTextVNode(\"\\n}\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"h3\", null, \"算法 3.3（续 1）二叉查找树的查找和赋值\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"/*查找*/\"), /*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(\" Value \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"get\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Key key)\"), /*#__PURE__*/_createTextVNode(\"\\n{  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" get(root, key);  }\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Value \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"get\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Node x, Key key)\"), /*#__PURE__*/_createTextVNode(\"\\n{  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 在以x为根结点的子树中查找并返回key所对应的值；\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 如果找不到则返回null\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (x == \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\";\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"cmp\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\" key.compareTo(x.key);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\"      (cmp < \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" get(x.left, key);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (cmp > \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" get(x.right, key);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" x.val;\\n}\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"/*赋值*/\"), /*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"put\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Key key, Value val)\"), /*#__PURE__*/_createTextVNode(\"\\n{  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 查找key，找到则更新它的值，否则为它创建一个新的结点\"), /*#__PURE__*/_createTextVNode(\"\\n   root = put(root, key, val);\\n}\\n\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Node \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"put\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Node x, Key key, Value val)\"), /*#__PURE__*/_createTextVNode(\"\\n{\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 如果key存在于以x为根结点的子树中则更新它的值；\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 否则将以key和val为键值对的新结点插入到该子树中\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (x == \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"new\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Node\"), /*#__PURE__*/_createTextVNode(\"(key, val, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\");\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"cmp\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\" key.compareTo(x.key);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\"      (cmp < \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\") x.left  = put(x.left,  key, val);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (cmp > \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\") x.right = put(x.right, key, val);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(\" x.val = val;\\n   x.N = size(x.left) + size(x.right) + \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\";\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" x;\\n}\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"h3\", null, \"分析二叉查找树查找节点的时间复杂度(节点数为N)\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"最差情况下,二叉查找树退化成链表,树高等于节点也为N\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"理想情况下,一颗含有N个节点的二叉查找树是完全平衡的,他的树高为 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"lgN\")]), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"二叉查找树的查找的平均时间复杂度为~2InN,约为\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"1.39lgN\"), /*#__PURE__*/_createTextVNode(\",比二分查找的成本高约\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"39%\")]), /*#__PURE__*/_createElementVNode(\"h3\", null, \"最大键最小键 及 向上取整和向下取整\"), /*#__PURE__*/_createElementVNode(\"h4\", null, \"最大键最小键\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"如果根节点左链接为空为空,则一颗二叉查找树的最小节点是根节点.如果左子树非空,那么树中最小键也是左子树的最小键.\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"最大键相反\"), /*#__PURE__*/_createElementVNode(\"h4\", null, \"向上取整和向下取整\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"如果给定的键key小于二叉查找树根节点,那么\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"小于等于\"), /*#__PURE__*/_createTextVNode(\"key的最大键**floor(key)**一定在根节点的左子树中;如果给定的键key大于二叉查找树的根节点,只有当根节点的右节点存在小于等于key的节点,小于等于key的最大键才会存在于右子树中,否则根节点就是小于等于key的最大键\")]), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(\" Key \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"min\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"()\"), /*#__PURE__*/_createTextVNode(\"\\n{\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" min(root).key;\\n}\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Node \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"min\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Node x)\"), /*#__PURE__*/_createTextVNode(\"\\n{\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (x.left == \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" x;\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" min(x.left);\\n}\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(\" Key \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"floor\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Key key)\"), /*#__PURE__*/_createTextVNode(\"\\n{\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"Node\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"x\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\" floor(root, key);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (x == \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\";\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" x.key;\\n}\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Node \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"floor\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Node x, Key key)\"), /*#__PURE__*/_createTextVNode(\"\\n{\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (x == \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\";\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"cmp\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\" key.compareTo(x.key);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (cmp == \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" x;\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (cmp < \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\")  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" floor(x.left, key);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"Node\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"t\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\" floor(x.right, key);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (t != \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" t;\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(\"           \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" x;\\n}\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"h3\", null, \"排名\"), /*#__PURE__*/_createElementVNode(\"h4\", null, \"select()\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"假设我们想找到排名为 的键（即树中正好有 个小于它的键）。如果左子树中的结点数 大于 ，那么我们就继续（递归地）在左子树中查找排名为 的键；如果 等于 ，我们就返回根结点中的键；如果 小于 ，我们就（递归地）在右子树中查找排名为（）的键。\"), /*#__PURE__*/_createElementVNode(\"h4\", null, \"rank()\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"rank() 是 select() 的逆方法，它会返回给定键的排名。它的实现和 select() 类似：如果给定的键和根结点的键相等，我们返回左子树中的结点总数 ；如果给定的键小于根结点，我们会返回该键在左子树中的排名（递归计算）；如果给定的键大于根结点，我们会返回 （根结点）加上它在右子树中的排名（递归计算）\")])], -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = [_hoisted_1];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"section\", null, _hoisted_2);\n}","map":{"version":3,"mappings":"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","names":["_createElementVNode","class","_createTextVNode","_hoisted_1","_createElementBlock"],"sourceRoot":"","sources":["/Users/gexiaolong/Downloads/others/coding/myblog/src/md/bst.md"],"sourcesContent":["<template><section><html><head></head><body><h2>二叉搜索树</h2>\n<h3>定义</h3>\n<p>一颗二叉查找树（BST）是一颗二叉树，其中每个结点都含有一个Comparable的键（以及相关的值）且每个结点的键都大于其左子树的任意结点的键而小于右子树的任意结点的键.</p>\n<p>每一个二叉搜索树的左右子树也都是一个二叉搜索树</p>\n<p>二叉搜索树如果用中序遍历一下，就是一个从大到小的序列</p>\n<h3>二叉查找树的建立</h3>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BST</span>&lt;Key <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;Key&gt;, Value&gt;\n{\n   <span class=\"hljs-keyword\">private</span> Node root;               <span class=\"hljs-comment\">// 二叉查找树的根结点</span>\n\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>\n   {\n      <span class=\"hljs-keyword\">private</span> Key key;              <span class=\"hljs-comment\">// 键</span>\n      <span class=\"hljs-keyword\">private</span> Value val;            <span class=\"hljs-comment\">// 值</span>\n      <span class=\"hljs-keyword\">private</span> Node left, right;     <span class=\"hljs-comment\">// 指向子树的链接</span>\n      <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> N;                <span class=\"hljs-comment\">// 以该结点为根的子树中的结点总数</span>\n\n      <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(Key key, Value val, <span class=\"hljs-type\">int</span> N)</span>\n      {  <span class=\"hljs-built_in\">this</span>.key = key; <span class=\"hljs-built_in\">this</span>.val = val; <span class=\"hljs-built_in\">this</span>.N = N; }\n   }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span>\n   {  <span class=\"hljs-keyword\">return</span> size(root);  }\n\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">(Node x)</span>\n   {\n      <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-keyword\">else</span>           <span class=\"hljs-keyword\">return</span> x.N;\n   }\n\n   <span class=\"hljs-keyword\">public</span> Value <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(Key key)</span>\n   <span class=\"hljs-comment\">// 请见算法3.3（续1）</span>\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(Key key, Value val)</span>\n   <span class=\"hljs-comment\">// 请见算法3.3（续1）</span>\n\n   <span class=\"hljs-comment\">// max()、min()、floor()、ceiling()方法请见算法3.3（续2）</span>\n   <span class=\"hljs-comment\">// select()、rank()方法请见算法3.3（续3）</span>\n   <span class=\"hljs-comment\">// delete()、deleteMin()、deleteMax()方法请见算法3.3（续4）</span>\n   <span class=\"hljs-comment\">// keys()方法请见算法3.3（续5）</span>\n}\n\n</code></pre>\n<h3>算法 3.3（续 1）二叉查找树的查找和赋值</h3>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\">\n<span class=\"hljs-comment\">/*查找*/</span>\n<span class=\"hljs-keyword\">public</span> Value <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(Key key)</span>\n{  <span class=\"hljs-keyword\">return</span> get(root, key);  }\n<span class=\"hljs-keyword\">private</span> Value <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(Node x, Key key)</span>\n{  <span class=\"hljs-comment\">// 在以x为根结点的子树中查找并返回key所对应的值；</span>\n   <span class=\"hljs-comment\">// 如果找不到则返回null</span>\n   <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n   <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cmp</span> <span class=\"hljs-operator\">=</span> key.compareTo(x.key);\n   <span class=\"hljs-keyword\">if</span>      (cmp &lt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> get(x.left, key);\n   <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (cmp &gt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> get(x.right, key);\n   <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> x.val;\n}\n<span class=\"hljs-comment\">/*赋值*/</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(Key key, Value val)</span>\n{  <span class=\"hljs-comment\">// 查找key，找到则更新它的值，否则为它创建一个新的结点</span>\n   root = put(root, key, val);\n}\n\n<span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(Node x, Key key, Value val)</span>\n{\n   <span class=\"hljs-comment\">// 如果key存在于以x为根结点的子树中则更新它的值；</span>\n   <span class=\"hljs-comment\">// 否则将以key和val为键值对的新结点插入到该子树中</span>\n   <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key, val, <span class=\"hljs-number\">1</span>);\n   <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cmp</span> <span class=\"hljs-operator\">=</span> key.compareTo(x.key);\n   <span class=\"hljs-keyword\">if</span>      (cmp &lt; <span class=\"hljs-number\">0</span>) x.left  = put(x.left,  key, val);\n   <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (cmp &gt; <span class=\"hljs-number\">0</span>) x.right = put(x.right, key, val);\n   <span class=\"hljs-keyword\">else</span> x.val = val;\n   x.N = size(x.left) + size(x.right) + <span class=\"hljs-number\">1</span>;\n   <span class=\"hljs-keyword\">return</span> x;\n}\n\n</code></pre>\n<h3>分析二叉查找树查找节点的时间复杂度(节点数为N)</h3>\n<p>最差情况下,二叉查找树退化成链表,树高等于节点也为N</p>\n<p>理想情况下,一颗含有N个节点的二叉查找树是完全平衡的,他的树高为 <strong>lgN</strong></p>\n<p>二叉查找树的查找的平均时间复杂度为~2InN,约为<strong>1.39lgN</strong>,比二分查找的成本高约<strong>39%</strong></p>\n<h3>最大键最小键 及 向上取整和向下取整</h3>\n<h4>最大键最小键</h4>\n<p>如果根节点左链接为空为空,则一颗二叉查找树的最小节点是根节点.如果左子树非空,那么树中最小键也是左子树的最小键.</p>\n<p>最大键相反</p>\n<h4>向上取整和向下取整</h4>\n<p>如果给定的键key小于二叉查找树根节点,那么<strong>小于等于</strong>key的最大键**floor(key)**一定在根节点的左子树中;如果给定的键key大于二叉查找树的根节点,只有当根节点的右节点存在小于等于key的节点,小于等于key的最大键才会存在于右子树中,否则根节点就是小于等于key的最大键</p>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> Key <span class=\"hljs-title function_\">min</span><span class=\"hljs-params\">()</span>\n{\n   <span class=\"hljs-keyword\">return</span> min(root).key;\n}\n<span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">min</span><span class=\"hljs-params\">(Node x)</span>\n{\n   <span class=\"hljs-keyword\">if</span> (x.left == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> x;\n   <span class=\"hljs-keyword\">return</span> min(x.left);\n}\n<span class=\"hljs-keyword\">public</span> Key <span class=\"hljs-title function_\">floor</span><span class=\"hljs-params\">(Key key)</span>\n{\n   <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> floor(root, key);\n   <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n   <span class=\"hljs-keyword\">return</span> x.key;\n}\n<span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">floor</span><span class=\"hljs-params\">(Node x, Key key)</span>\n{\n   <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n   <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cmp</span> <span class=\"hljs-operator\">=</span> key.compareTo(x.key);\n   <span class=\"hljs-keyword\">if</span> (cmp == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> x;\n   <span class=\"hljs-keyword\">if</span> (cmp &lt; <span class=\"hljs-number\">0</span>)  <span class=\"hljs-keyword\">return</span> floor(x.left, key);\n   <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> floor(x.right, key);\n   <span class=\"hljs-keyword\">if</span> (t != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> t;\n   <span class=\"hljs-keyword\">else</span>           <span class=\"hljs-keyword\">return</span> x;\n}\n\n</code></pre>\n<h3>排名</h3>\n<h4>select()</h4>\n<p>假设我们想找到排名为  的键（即树中正好有  个小于它的键）。如果左子树中的结点数  大于 ，那么我们就继续（递归地）在左子树中查找排名为  的键；如果  等于 ，我们就返回根结点中的键；如果  小于 ，我们就（递归地）在右子树中查找排名为（）的键。</p>\n<h4>rank()</h4>\n<p>rank() 是 select() 的逆方法，它会返回给定键的排名。它的实现和 select() 类似：如果给定的键和根结点的键相等，我们返回左子树中的结点总数 ；如果给定的键小于根结点，我们会返回该键在左子树中的排名（递归计算）；如果给定的键大于根结点，我们会返回 （根结点）加上它在右子树中的排名（递归计算）</p>\n</body></html></section></template>\n\n"]},"metadata":{},"sourceType":"module"}