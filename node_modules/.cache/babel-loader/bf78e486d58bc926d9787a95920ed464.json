{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"html\", null, [/*#__PURE__*/_createElementVNode(\"head\"), /*#__PURE__*/_createElementVNode(\"body\", null, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"红黑树二叉搜索树\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"上文中2-3树可以实现树的\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"有序性\"), /*#__PURE__*/_createTextVNode(\"与\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"平衡性\"), /*#__PURE__*/_createTextVNode(\",但是要维护两种不同类型的节点(2-节点与\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"3-节点\"), /*#__PURE__*/_createTextVNode(\"),将被查找的键和结点中的每个键 进行比较，将链接和其他信息从一种结点复制到另一种结点，将结点从一种数据类型转换到 另一种数据类型，等等。实现这些不仅需要大量的代码，而且它们所产生的额外开销可能会 使算法比标准的二叉查找树更慢.\")]), /*#__PURE__*/_createElementVNode(\"h3\", null, \"替换3-节点\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"红黑二叉查找树背后的基本思想是用标准的二叉查找树（完全由 2- 结点构成）和一些额外的 信息（替换 3- 结点）来表示 2-3 树.树的链接分为两种: \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"红链接\"), /*#__PURE__*/_createTextVNode(\"将两个 2- 结点 连接起来构成一个 3- 结点;\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"黑链接\"), /*#__PURE__*/_createTextVNode(\"则是 2-3 树中的普通链接。\")]), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"assets/%E7%BA%A2%E9%93%BE%E6%8E%A5%E7%9B%B8%E8%BF%9E%E7%9A%84%E4%B8%A4%E4%B8%AA2%E8%8A%82%E7%82%B9%E8%A1%A8%E7%A4%BA3%E8%8A%82%E7%82%B9.png\",\n  alt: \"红链接相连的两个2节点表示3节点\"\n})]), /*#__PURE__*/_createElementVNode(\"h3\", null, \"定义\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"红黑树是含有红黑链接并满足下列条件的二叉查找树：\"), /*#__PURE__*/_createElementVNode(\"ul\", null, [/*#__PURE__*/_createElementVNode(\"li\", null, \"红链接均为左链接；\"), /*#__PURE__*/_createElementVNode(\"li\", null, \"没有任何一个结点同时和两条红链接相连；\"), /*#__PURE__*/_createElementVNode(\"li\", null, \"该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同。\")]), /*#__PURE__*/_createElementVNode(\"p\", null, \"满足这样定义的红黑树和相应的 2-3 树是一一对应的\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"assets/%E7%BA%A2%E9%93%BE%E6%8E%A5%E7%94%BB%E5%B9%B3%E5%8F%98%E6%88%902-3%E6%A0%91.png\",\n  alt: \"红链接画平变成2-3树\"\n})]), /*#__PURE__*/_createElementVNode(\"h3\", null, \"节点表示\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"每个结点都只会有一条指向自己的链接（从它的父结点指向它）, 我们将节点颜色保存在Node这个对象中,且当我们提到一个结点的颜色时，我们指的是指向 该结点的链接的颜色\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"static\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"final\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"RED\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"true\"), /*#__PURE__*/_createTextVNode(\";\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"static\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"final\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"BLACK\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"false\"), /*#__PURE__*/_createTextVNode(\";\\n\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"class\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Node\"), /*#__PURE__*/_createTextVNode(\" {\\n    Key key;                 \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"//键\"), /*#__PURE__*/_createTextVNode(\"\\n    Value val;               \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"//值\"), /*#__PURE__*/_createTextVNode(\"\\n    Node left, right;      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"//左右链接\"), /*#__PURE__*/_createTextVNode(\"\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" N;                      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"//这颗子树中的结点总数\"), /*#__PURE__*/_createTextVNode(\"\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(\" color;       \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"//由父结点指向它的链接的颜色\"), /*#__PURE__*/_createTextVNode(\"\\n\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"Node\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(Key key, Value val, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" N, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(\" color)\")]), /*#__PURE__*/_createTextVNode(\" {\\n        \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".key = key;\\n        \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".val = val;\\n        \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".N = N;\\n        \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".color = color;\\n    } \\n}\\n\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"isRed\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Node x)\"), /*#__PURE__*/_createTextVNode(\" {\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (x == \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"false\"), /*#__PURE__*/_createTextVNode(\";\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" x.color == RED;\\n}\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"p\", null, \"每次插入的节点的时候都将节点的颜色初始化为红色\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"旋转\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"在我们实现的某些操作中(比如插入)可能会出现红色右链接或者两条连续的红链接, 需要通过\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"旋转\"), /*#__PURE__*/_createTextVNode(\"和\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"变换颜色\"), /*#__PURE__*/_createTextVNode(\"修复, 旋转操作会改变红链接的指向,\")]), /*#__PURE__*/_createElementVNode(\"h4\", null, \"左旋转\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"assets/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%B7%A6%E6%97%8B%E8%BD%AC.png\",\n  alt: \"红黑树左旋转\"\n})]), /*#__PURE__*/_createElementVNode(\"h4\", null, \"右旋转\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"assets/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%8F%B3%E6%97%8B%E8%BD%AC.png\",\n  alt: \"红黑树右旋转\"\n})]), /*#__PURE__*/_createElementVNode(\"p\", null, \"无论是rotateRight()或rotateLeft() , 我们总是将其返回值重置父结点（或是根结点),且保留原来父节点的颜色(将 x.color 设为 h.color)\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"颜色变换\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"当我们的节点经过左右旋转时,有可能出现左右节点均为红色的场景,此时,我们需要颜色变换.\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"我们专门用一个方法 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"flipColors()\"), /*#__PURE__*/_createTextVNode(\" 来转换一个结点的两个红色子结点 的颜色。除了将子结点的颜色由红变黑之外，我们同时还要将\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"父结点的颜色由黑变红\"), /*#__PURE__*/_createTextVNode(\"(相当于父节点上浮,和它的父节点结合成为一个3-节点),这项 操作和旋转操作一样是局部变换，不会影响整棵树的黑色平衡性.\")]), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"assets/%E7%BA%A2%E9%BB%91%E6%A0%91%E9%A2%9C%E8%89%B2%E5%8F%98%E6%8D%A2.png\",\n  alt: \"红黑树颜色变换\"\n})]), /*#__PURE__*/_createElementVNode(\"h3\", null, \"红黑树的链接向上传递\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"只要谨慎地使用左旋转、右旋转和颜色转换这三种简单的操作, 在沿着插入点到根结点的路径向上移动时在所经过 的每个结点中顺序完成以下操作，我们就能完成插入操作：\"), /*#__PURE__*/_createElementVNode(\"ul\", null, [/*#__PURE__*/_createElementVNode(\"li\", null, \"如果右子结点是红色的而左子结点是黑色的，进行左旋转；\"), /*#__PURE__*/_createElementVNode(\"li\", null, \"如果左子结点是红色的且它的左子结点也是红色的，进行右旋转；\"), /*#__PURE__*/_createElementVNode(\"li\", null, \"如果左右子结点均为红色，进行颜色转换。\")]), /*#__PURE__*/_createElementVNode(\"p\", null, \"注意,红黑树的根节点为黑色!\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"实现插入\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"class\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"RedBlackBST\"), /*#__PURE__*/_createTextVNode(\"<Key \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"extends\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Comparable\"), /*#__PURE__*/_createTextVNode(\"<Key>, Value>\\n{\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Node root;\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"class\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Node\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 含有color变量的Node对象（请见3.3.2.4节）\"), /*#__PURE__*/_createTextVNode(\"\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"isRed\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Node h)\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 请见3.3.2.4节\"), /*#__PURE__*/_createTextVNode(\"\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Node \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"rotateLeft\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Node h)\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 请见图3.3.16\"), /*#__PURE__*/_createTextVNode(\"\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Node \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"rotateRight\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Node h)\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 请见图3.3.17\"), /*#__PURE__*/_createTextVNode(\"\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"flipColors\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Node h)\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 请见图3.3.21\"), /*#__PURE__*/_createTextVNode(\"\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"size\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"()\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 请见算法3.3\"), /*#__PURE__*/_createTextVNode(\"\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"put\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Key key, Value val)\"), /*#__PURE__*/_createTextVNode(\"\\n  { \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 查找key，找到则更新其值，否则为它新建一个结点\"), /*#__PURE__*/_createTextVNode(\"\\n  root = put(root, key, val);\\n  root.color = BLACK;\\n  }\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Node \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"put\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Node h, Key key, Value val)\"), /*#__PURE__*/_createTextVNode(\"\\n  {\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (h == \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 标准的插入操作，和父结点用红链接相连\"), /*#__PURE__*/_createTextVNode(\"\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"new\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Node\"), /*#__PURE__*/_createTextVNode(\"(key, val, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\", RED);\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"cmp\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\" key.compareTo(h.key);\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (cmp < \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\") h.left = put(h.left, key, val);\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (cmp > \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\") h.right = put(h.right, key, val);\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(\" h.val = val;\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (isRed(h.right) && !isRed(h.left)) h = rotateLeft(h);\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (isRed(h.left) && isRed(h.left.left)) h = rotateRight(h);\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (isRed(h.left) && isRed(h.right)) flipColors(h);\\n    h.N = size(h.left) + size(h.right) + \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\";\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" h;\\n  }\\n}\\n\\n\")])])])], -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = [_hoisted_1];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"section\", null, _hoisted_2);\n}","map":{"version":3,"mappings":"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","names":["_createElementVNode","_createTextVNode","src","alt","class","_hoisted_1","_createElementBlock"],"sourceRoot":"","sources":["/Users/gexiaolong/Downloads/others/coding/myblog/src/md/redBlackBST.md"],"sourcesContent":["<template><section><html><head></head><body><h2>红黑树二叉搜索树</h2>\n<p>上文中2-3树可以实现树的<strong>有序性</strong>与<strong>平衡性</strong>,但是要维护两种不同类型的节点(2-节点与<strong>3-节点</strong>),将被查找的键和结点中的每个键\n进行比较，将链接和其他信息从一种结点复制到另一种结点，将结点从一种数据类型转换到\n另一种数据类型，等等。实现这些不仅需要大量的代码，而且它们所产生的额外开销可能会\n使算法比标准的二叉查找树更慢.</p>\n<h3>替换3-节点</h3>\n<p>红黑二叉查找树背后的基本思想是用标准的二叉查找树（完全由 2- 结点构成）和一些额外的\n信息（替换 3- 结点）来表示 2-3 树.树的链接分为两种: <strong>红链接</strong>将两个 2- 结点\n连接起来构成一个 3- 结点;<strong>黑链接</strong>则是 2-3 树中的普通链接。</p>\n<p><img src=\"assets/%E7%BA%A2%E9%93%BE%E6%8E%A5%E7%9B%B8%E8%BF%9E%E7%9A%84%E4%B8%A4%E4%B8%AA2%E8%8A%82%E7%82%B9%E8%A1%A8%E7%A4%BA3%E8%8A%82%E7%82%B9.png\" alt=\"红链接相连的两个2节点表示3节点\"></p>\n<h3>定义</h3>\n<p>红黑树是含有红黑链接并满足下列条件的二叉查找树：</p>\n<ul>\n<li>红链接均为左链接；</li>\n<li>没有任何一个结点同时和两条红链接相连；</li>\n<li>该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同。</li>\n</ul>\n<p>满足这样定义的红黑树和相应的 2-3 树是一一对应的</p>\n<p><img src=\"assets/%E7%BA%A2%E9%93%BE%E6%8E%A5%E7%94%BB%E5%B9%B3%E5%8F%98%E6%88%902-3%E6%A0%91.png\" alt=\"红链接画平变成2-3树\"></p>\n<h3>节点表示</h3>\n<p>每个结点都只会有一条指向自己的链接（从它的父结点指向它）, 我们将节点颜色保存在Node这个对象中,且当我们提到一个结点的颜色时，我们指的是指向\n该结点的链接的颜色</p>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\">\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">RED</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">BLACK</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n    Key key;                 <span class=\"hljs-comment\">//键</span>\n    Value val;               <span class=\"hljs-comment\">//值</span>\n    Node left, right;      <span class=\"hljs-comment\">//左右链接</span>\n    <span class=\"hljs-type\">int</span> N;                      <span class=\"hljs-comment\">//这颗子树中的结点总数</span>\n    <span class=\"hljs-type\">boolean</span> color;       <span class=\"hljs-comment\">//由父结点指向它的链接的颜色</span>\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(Key key, Value val, <span class=\"hljs-type\">int</span> N, <span class=\"hljs-type\">boolean</span> color)</span> {\n        <span class=\"hljs-built_in\">this</span>.key = key;\n        <span class=\"hljs-built_in\">this</span>.val = val;\n        <span class=\"hljs-built_in\">this</span>.N = N;\n        <span class=\"hljs-built_in\">this</span>.color = color;\n    } \n}\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isRed</span><span class=\"hljs-params\">(Node x)</span> {\n    <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">return</span> x.color == RED;\n}\n\n</code></pre>\n<p>每次插入的节点的时候都将节点的颜色初始化为红色</p>\n<h3>旋转</h3>\n<p>在我们实现的某些操作中(比如插入)可能会出现红色右链接或者两条连续的红链接,\n需要通过<strong>旋转</strong>和<strong>变换颜色</strong>修复,\n旋转操作会改变红链接的指向,</p>\n<h4>左旋转</h4>\n<p><img src=\"assets/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%B7%A6%E6%97%8B%E8%BD%AC.png\" alt=\"红黑树左旋转\"></p>\n<h4>右旋转</h4>\n<p><img src=\"assets/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%8F%B3%E6%97%8B%E8%BD%AC.png\" alt=\"红黑树右旋转\"></p>\n<p>无论是rotateRight()或rotateLeft() , 我们总是将其返回值重置父结点（或是根结点),且保留原来父节点的颜色(将 x.color 设为 h.color)</p>\n<h3>颜色变换</h3>\n<p>当我们的节点经过左右旋转时,有可能出现左右节点均为红色的场景,此时,我们需要颜色变换.</p>\n<p>我们专门用一个方法 <strong>flipColors()</strong> 来转换一个结点的两个红色子结点\n的颜色。除了将子结点的颜色由红变黑之外，我们同时还要将<strong>父结点的颜色由黑变红</strong>(相当于父节点上浮,和它的父节点结合成为一个3-节点),这项\n操作和旋转操作一样是局部变换，不会影响整棵树的黑色平衡性.</p>\n<p><img src=\"assets/%E7%BA%A2%E9%BB%91%E6%A0%91%E9%A2%9C%E8%89%B2%E5%8F%98%E6%8D%A2.png\" alt=\"红黑树颜色变换\"></p>\n<h3>红黑树的链接向上传递</h3>\n<p>只要谨慎地使用左旋转、右旋转和颜色转换这三种简单的操作, 在沿着插入点到根结点的路径向上移动时在所经过\n的每个结点中顺序完成以下操作，我们就能完成插入操作：</p>\n<ul>\n<li>如果右子结点是红色的而左子结点是黑色的，进行左旋转；</li>\n<li>如果左子结点是红色的且它的左子结点也是红色的，进行右旋转；</li>\n<li>如果左右子结点均为红色，进行颜色转换。</li>\n</ul>\n<p>注意,红黑树的根节点为黑色!</p>\n<h3>实现插入</h3>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedBlackBST</span>&lt;Key <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;Key&gt;, Value&gt;\n{\n  <span class=\"hljs-keyword\">private</span> Node root;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> <span class=\"hljs-comment\">// 含有color变量的Node对象（请见3.3.2.4节）</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isRed</span><span class=\"hljs-params\">(Node h)</span> <span class=\"hljs-comment\">// 请见3.3.2.4节</span>\n  <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">rotateLeft</span><span class=\"hljs-params\">(Node h)</span> <span class=\"hljs-comment\">// 请见图3.3.16</span>\n  <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">rotateRight</span><span class=\"hljs-params\">(Node h)</span> <span class=\"hljs-comment\">// 请见图3.3.17</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">flipColors</span><span class=\"hljs-params\">(Node h)</span> <span class=\"hljs-comment\">// 请见图3.3.21</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span> <span class=\"hljs-comment\">// 请见算法3.3</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(Key key, Value val)</span>\n  { <span class=\"hljs-comment\">// 查找key，找到则更新其值，否则为它新建一个结点</span>\n  root = put(root, key, val);\n  root.color = BLACK;\n  }\n  <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(Node h, Key key, Value val)</span>\n  {\n    <span class=\"hljs-keyword\">if</span> (h == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// 标准的插入操作，和父结点用红链接相连</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(key, val, <span class=\"hljs-number\">1</span>, RED);\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">cmp</span> <span class=\"hljs-operator\">=</span> key.compareTo(h.key);\n    <span class=\"hljs-keyword\">if</span> (cmp &lt; <span class=\"hljs-number\">0</span>) h.left = put(h.left, key, val);\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (cmp &gt; <span class=\"hljs-number\">0</span>) h.right = put(h.right, key, val);\n    <span class=\"hljs-keyword\">else</span> h.val = val;\n    <span class=\"hljs-keyword\">if</span> (isRed(h.right) &amp;&amp; !isRed(h.left)) h = rotateLeft(h);\n    <span class=\"hljs-keyword\">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left)) h = rotateRight(h);\n    <span class=\"hljs-keyword\">if</span> (isRed(h.left) &amp;&amp; isRed(h.right)) flipColors(h);\n    h.N = size(h.left) + size(h.right) + <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">return</span> h;\n  }\n}\n\n</code></pre>\n</body></html></section></template>\n\n"]},"metadata":{},"sourceType":"module"}