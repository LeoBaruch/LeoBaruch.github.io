{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"html\", null, [/*#__PURE__*/_createElementVNode(\"head\"), /*#__PURE__*/_createElementVNode(\"body\", null, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"排序\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"归并排序\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"归并排序的性能不受输入数据的影响,为稳定排序算法, 速度仅次于快速排序.\"), /*#__PURE__*/_createElementVNode(\"h4\", null, \"思想\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"采用分治法Divide and Conquer）, 分治模式在每一层递归上有三个步骤:\"), /*#__PURE__*/_createElementVNode(\"ul\", null, [/*#__PURE__*/_createElementVNode(\"li\", null, \"分解（Divide）：将n个元素分成个含n/2个元素的子序列。\"), /*#__PURE__*/_createElementVNode(\"li\", null, \"解决（Conquer）：用合并排序法对两个子序列递归的排序。\"), /*#__PURE__*/_createElementVNode(\"li\", null, \"合并（Combine）：合并两个已排序的子序列已得到排序结果。\")]), /*#__PURE__*/_createElementVNode(\"h4\", null, \"实现逻辑(算法第四版 2.2.1):\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"先将所有元素复制到aux[], 然后再归并到a[]中. 在归并时,进行4个条件判断:\"), /*#__PURE__*/_createElementVNode(\"ul\", null, [/*#__PURE__*/_createElementVNode(\"li\", null, [/*#__PURE__*/_createElementVNode(\"p\", null, \"左半边用尽(取右半边元素),\")]), /*#__PURE__*/_createElementVNode(\"li\", null, [/*#__PURE__*/_createElementVNode(\"p\", null, \"右半边用尽(取右半边元素),\")]), /*#__PURE__*/_createElementVNode(\"li\", null, [/*#__PURE__*/_createElementVNode(\"p\", null, \"右半边当前元素小于左半边当前元素(取右半边元素),\")]), /*#__PURE__*/_createElementVNode(\"li\", null, [/*#__PURE__*/_createElementVNode(\"p\", null, \"右半边当前元素小于等于左半边元素(取左半边元素)\")])]), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-ts\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"function\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"merge\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"a: Comparable[], lo: \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"number\"), /*#__PURE__*/_createTextVNode(\", mid: \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"number\"), /*#__PURE__*/_createTextVNode(\", hi: \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"number\")]), /*#__PURE__*/_createTextVNode(\") {\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"let\"), /*#__PURE__*/_createTextVNode(\" i = lo; \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"let\"), /*#__PURE__*/_createTextVNode(\" j = mid + \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\";\\n\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"const\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-attr\"\n}, \"aux\"), /*#__PURE__*/_createTextVNode(\": \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Comparable\"), /*#__PURE__*/_createTextVNode(\"[] = \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Array\"), /*#__PURE__*/_createTextVNode(\".\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"from\"), /*#__PURE__*/_createTextVNode(\"(a);\\n\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"for\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"let\"), /*#__PURE__*/_createTextVNode(\" k = lo; k <= hi; k++) {\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\"(i > mid) a[k] = aux[j++];\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\"( j > hi) a[k] = aux[i++];\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"less\"), /*#__PURE__*/_createTextVNode(\"(aux[j], aux[i])) a[k] = aux[j++];\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(\" a[k] = a[i++];\\n  }\\n}\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"h5\", null, \"递归法(2.2.2)\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-ts\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"function\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"mergeSort\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"arr: Comparable[]\"), /*#__PURE__*/_createTextVNode(\") {\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"const\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-attr\"\n}, \"aux\"), /*#__PURE__*/_createTextVNode(\": \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Comparable\"), /*#__PURE__*/_createTextVNode(\"[] = [];\\n\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"function\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sort\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"array: Comparable[], lo: \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"number\"), /*#__PURE__*/_createTextVNode(\", hi: \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"number\")]), /*#__PURE__*/_createTextVNode(\") {\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\"(hi <= lo) \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\";\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"const\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-attr\"\n}, \"mid\"), /*#__PURE__*/_createTextVNode(\": \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"number\"), /*#__PURE__*/_createTextVNode(\" = lo + (hi - lo) / \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"2\"), /*#__PURE__*/_createTextVNode(\";\\n\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sort\"), /*#__PURE__*/_createTextVNode(\"(array, lo, mid);\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sort\"), /*#__PURE__*/_createTextVNode(\"(array, mid + \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\", hi);\\n\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"merge\"), /*#__PURE__*/_createTextVNode(\"(array, lo, mid , hi);\\n  }\\n\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sort\"), /*#__PURE__*/_createTextVNode(\"(arr, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\" , arr.\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-property\"\n}, \"length\"), /*#__PURE__*/_createTextVNode(\" - \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\");\\n\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" arr;\\n}\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"h5\", null, \"迭代法(2.2.3)\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-ts\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"function\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"mergeSort\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"arr: Comparable[]\"), /*#__PURE__*/_createTextVNode(\") {\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"const\"), /*#__PURE__*/_createTextVNode(\" { length } = arr;\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"const\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-attr\"\n}, \"aux\"), /*#__PURE__*/_createTextVNode(\": \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Comparable\"), /*#__PURE__*/_createTextVNode(\"[] = [];\\n\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"for\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"let\"), /*#__PURE__*/_createTextVNode(\" sz = \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\"; sz < length; sz += sz + sz) { \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// sz 子数组大小\"), /*#__PURE__*/_createTextVNode(\"\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"for\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"let\"), /*#__PURE__*/_createTextVNode(\" lo = \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\"; lo < length - sz; lo += sz + sz) { \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 子数组索引\"), /*#__PURE__*/_createTextVNode(\"\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"merge\"), /*#__PURE__*/_createTextVNode(\"(arr, lo, lo + sz - \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\", \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Math\"), /*#__PURE__*/_createTextVNode(\".\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"min\"), /*#__PURE__*/_createTextVNode(\"(lo + sz + sz - \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\", length -\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\"))\\n    }\\n  }\\n\\n}\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"p\", null, \"不管元素在什么情况下都要做这些步骤，所以花销的时间是不变的，所以该算法的最优时间复杂度和最差时间复杂度及平均时间复杂度都是一样的为：O( nlogn )\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"空间复杂度为: O(n)。\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"快速排序\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"快速排序的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据比另一部分的所有数据要小，再按这种方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，使整个数据变成有序序列。\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-ts\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"function\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"quickSort\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"arr: Comparable[]\"), /*#__PURE__*/_createTextVNode(\") {\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sort\"), /*#__PURE__*/_createTextVNode(\"(arr, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\", arr.\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-property\"\n}, \"lenght\"), /*#__PURE__*/_createTextVNode(\" - \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\");\\n\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"function\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sort\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"array: Comparable[], lo, hi\"), /*#__PURE__*/_createTextVNode(\") {\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\"(hi <= lo) \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\";\\n\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"let\"), /*#__PURE__*/_createTextVNode(\" j = \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"partition\"), /*#__PURE__*/_createTextVNode(\"(array, lo, hi); \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 切分\"), /*#__PURE__*/_createTextVNode(\"\\n\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sort\"), /*#__PURE__*/_createTextVNode(\"(array, lo, j - \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\");\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sort\"), /*#__PURE__*/_createTextVNode(\"(array, j + \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\", hi);\\n    }\\n\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"function\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"partition\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"array: Comparable[], lo , hi\"), /*#__PURE__*/_createTextVNode(\") {\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"let\"), /*#__PURE__*/_createTextVNode(\" i = lo; \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"let\"), /*#__PURE__*/_createTextVNode(\" j = hi + \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\";\\n\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"const\"), /*#__PURE__*/_createTextVNode(\" v = array[lo];\\n\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"while\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"true\"), /*#__PURE__*/_createTextVNode(\") {\\n        \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"while\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"less\"), /*#__PURE__*/_createTextVNode(\"(array[++i], v)) \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\"(i == hi) \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"break\"), /*#__PURE__*/_createTextVNode(\";\\n        \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"while\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"less\"), /*#__PURE__*/_createTextVNode(\"(v, arry[--j])) \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\"(j == lo) \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"break\"), /*#__PURE__*/_createTextVNode(\";\\n\\n        \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\"(j <= i ) \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"break\"), /*#__PURE__*/_createTextVNode(\";\\n        \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"exch\"), /*#__PURE__*/_createTextVNode(\"(array, i, j);\\n      }\\n\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"exch\"), /*#__PURE__*/_createTextVNode(\"(array, lo, j);\\n\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" j;\\n\\n    }\\n  }\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"快速排序的平均时间复杂度是 O(nlogn), 但是快速排序在最坏情况下的时间复杂度和冒泡排序一样，是 O(n2) \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"(即已经排序好的数组))\"), /*#__PURE__*/_createTextVNode(\" , 所以开始可以先打乱数组的顺序保持随机性.而且对于小数组,其实快速排序比插入排序慢;所以可以混合使用;\")]), /*#__PURE__*/_createElementVNode(\"p\", null, \"快速排序只是使用数组原本的空间进行排序;\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"快速排序是一个不稳定的算法，在经过排序之后，可能会对相同值的元素的相对位置造成改变。\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"快速排序基本上被认为是相同数量级的所有排序算法中，平均性能最好的。\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"堆排序\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"static\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sort\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Comparable[] a)\"), /*#__PURE__*/_createTextVNode(\"\\n{\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"N\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\" a.length;\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"for\"), /*#__PURE__*/_createTextVNode(\" (\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"k\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\" N/\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"2\"), /*#__PURE__*/_createTextVNode(\"; k >= \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\"; k--)\\n      sink(a, k, N);\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"while\"), /*#__PURE__*/_createTextVNode(\" (N > \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\")\\n   {\\n      exch(a, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\", N--);\\n      sink(a, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\", N);\\n   }\\n}\\n\")])]), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"以上代码中,第一个循环,构造了一个二叉堆, 第二个循环,依次将堆顶元素和最后一个元素交换,并通过缩小数组N的值来弹出原堆顶 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"(最值)\"), /*#__PURE__*/_createTextVNode(\" 缩小堆的大小.\")]), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"在前面文章 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"(优先队列)\"), /*#__PURE__*/_createTextVNode(\" 里介绍过的,由数组构造的二叉堆中,父节点位置为\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"k\"), /*#__PURE__*/_createTextVNode(\"时,子节点分别为\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"2k\"), /*#__PURE__*/_createTextVNode(\"和\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"2k+1\"), /*#__PURE__*/_createTextVNode(\",所以从 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"N/2\"), /*#__PURE__*/_createTextVNode(\"的位置找到最大的父节点,并依次\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"sink\"), /*#__PURE__*/_createTextVNode(\"操作(sink操作见优先队列),从而达到堆有序.\")]), /*#__PURE__*/_createElementVNode(\"p\", null, \"如下图:\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"'../assets/%E5%A0%86%E6%8E%92%E5%BA%8F.png'\",\n  alt: \"堆排序\"\n})])])], -1);\n\nconst _hoisted_2 = [_hoisted_1];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"section\", null, _hoisted_2);\n}","map":{"version":3,"mappings":"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","names":["_createElementVNode","class","_createTextVNode","src","alt","_hoisted_1","_createElementBlock"],"sourceRoot":"","sources":["/Users/gexiaolong/Downloads/others/coding/myblog/src/md/sort.md"],"sourcesContent":["<template><section><html><head></head><body><h2>排序</h2>\n<h3>归并排序</h3>\n<p>归并排序的性能不受输入数据的影响,为稳定排序算法, 速度仅次于快速排序.</p>\n<h4>思想</h4>\n<p>采用分治法Divide and Conquer）, 分治模式在每一层递归上有三个步骤:</p>\n<ul>\n<li>分解（Divide）：将n个元素分成个含n/2个元素的子序列。</li>\n<li>解决（Conquer）：用合并排序法对两个子序列递归的排序。</li>\n<li>合并（Combine）：合并两个已排序的子序列已得到排序结果。</li>\n</ul>\n<h4>实现逻辑(算法第四版 2.2.1):</h4>\n<p>先将所有元素复制到aux[], 然后再归并到a[]中. 在归并时,进行4个条件判断:</p>\n<ul>\n<li>\n<p>左半边用尽(取右半边元素),</p>\n</li>\n<li>\n<p>右半边用尽(取右半边元素),</p>\n</li>\n<li>\n<p>右半边当前元素小于左半边当前元素(取右半边元素),</p>\n</li>\n<li>\n<p>右半边当前元素小于等于左半边元素(取左半边元素)</p>\n</li>\n</ul>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-ts\">\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">merge</span>(<span class=\"hljs-params\">a: Comparable[], lo: <span class=\"hljs-built_in\">number</span>, mid: <span class=\"hljs-built_in\">number</span>, hi: <span class=\"hljs-built_in\">number</span></span>) {\n  <span class=\"hljs-keyword\">let</span> i = lo; <span class=\"hljs-keyword\">let</span> j = mid + <span class=\"hljs-number\">1</span>;\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">aux</span>: <span class=\"hljs-title class_\">Comparable</span>[] = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(a);\n\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k = lo; k &lt;= hi; k++) {\n    <span class=\"hljs-keyword\">if</span>(i &gt; mid) a[k] = aux[j++];\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>( j &gt; hi) a[k] = aux[i++];\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_\">less</span>(aux[j], aux[i])) a[k] = aux[j++];\n    <span class=\"hljs-keyword\">else</span> a[k] = a[i++];\n  }\n}\n\n</code></pre>\n<h5>递归法(2.2.2)</h5>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-ts\">\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">mergeSort</span>(<span class=\"hljs-params\">arr: Comparable[]</span>) {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">aux</span>: <span class=\"hljs-title class_\">Comparable</span>[] = [];\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-params\">array: Comparable[], lo: <span class=\"hljs-built_in\">number</span>, hi: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-keyword\">if</span>(hi &lt;= lo) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mid</span>: <span class=\"hljs-built_in\">number</span> = lo + (hi - lo) / <span class=\"hljs-number\">2</span>;\n\n    <span class=\"hljs-title function_\">sort</span>(array, lo, mid);\n    <span class=\"hljs-title function_\">sort</span>(array, mid + <span class=\"hljs-number\">1</span>, hi);\n\n    <span class=\"hljs-title function_\">merge</span>(array, lo, mid , hi);\n  }\n\n  <span class=\"hljs-title function_\">sort</span>(arr, <span class=\"hljs-number\">0</span> , arr.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>);\n\n  <span class=\"hljs-keyword\">return</span> arr;\n}\n\n</code></pre>\n<h5>迭代法(2.2.3)</h5>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-ts\">\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">mergeSort</span>(<span class=\"hljs-params\">arr: Comparable[]</span>) {\n  <span class=\"hljs-keyword\">const</span> { length } = arr;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">aux</span>: <span class=\"hljs-title class_\">Comparable</span>[] = [];\n\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> sz = <span class=\"hljs-number\">1</span>; sz &lt; length; sz += sz + sz) { <span class=\"hljs-comment\">// sz 子数组大小</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> lo = <span class=\"hljs-number\">0</span>; lo &lt; length - sz; lo += sz + sz) { <span class=\"hljs-comment\">// 子数组索引</span>\n      <span class=\"hljs-title function_\">merge</span>(arr, lo, lo + sz - <span class=\"hljs-number\">1</span>, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(lo + sz + sz - <span class=\"hljs-number\">1</span>, length -<span class=\"hljs-number\">1</span>))\n    }\n  }\n\n}\n\n</code></pre>\n<p>不管元素在什么情况下都要做这些步骤，所以花销的时间是不变的，所以该算法的最优时间复杂度和最差时间复杂度及平均时间复杂度都是一样的为：O( nlogn )</p>\n<p>空间复杂度为: O(n)。</p>\n<h3>快速排序</h3>\n<p>快速排序的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据比另一部分的所有数据要小，再按这种方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，使整个数据变成有序序列。</p>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-ts\">\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">quickSort</span>(<span class=\"hljs-params\">arr: Comparable[]</span>) {\n    <span class=\"hljs-title function_\">sort</span>(arr, <span class=\"hljs-number\">0</span>, arr.<span class=\"hljs-property\">lenght</span> - <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-params\">array: Comparable[], lo, hi</span>) {\n      <span class=\"hljs-keyword\">if</span>(hi &lt;= lo) <span class=\"hljs-keyword\">return</span>;\n\n      <span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-title function_\">partition</span>(array, lo, hi); <span class=\"hljs-comment\">// 切分</span>\n\n      <span class=\"hljs-title function_\">sort</span>(array, lo, j - <span class=\"hljs-number\">1</span>);\n      <span class=\"hljs-title function_\">sort</span>(array, j + <span class=\"hljs-number\">1</span>, hi);\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">partition</span>(<span class=\"hljs-params\">array: Comparable[], lo , hi</span>) {\n      <span class=\"hljs-keyword\">let</span> i = lo; <span class=\"hljs-keyword\">let</span> j = hi + <span class=\"hljs-number\">1</span>;\n\n      <span class=\"hljs-keyword\">const</span> v = array[lo];\n\n      <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) {\n        <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-title function_\">less</span>(array[++i], v)) <span class=\"hljs-keyword\">if</span>(i == hi) <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-title function_\">less</span>(v, arry[--j])) <span class=\"hljs-keyword\">if</span>(j == lo) <span class=\"hljs-keyword\">break</span>;\n\n        <span class=\"hljs-keyword\">if</span>(j &lt;= i ) <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-title function_\">exch</span>(array, i, j);\n      }\n\n      <span class=\"hljs-title function_\">exch</span>(array, lo, j);\n\n      <span class=\"hljs-keyword\">return</span> j;\n\n    }\n  }\n\n</code></pre>\n<p>快速排序的平均时间复杂度是 O(nlogn), 但是快速排序在最坏情况下的时间复杂度和冒泡排序一样，是 O(n2) <strong>(即已经排序好的数组))</strong> , 所以开始可以先打乱数组的顺序保持随机性.而且对于小数组,其实快速排序比插入排序慢;所以可以混合使用;</p>\n<p>快速排序只是使用数组原本的空间进行排序;</p>\n<p>快速排序是一个不稳定的算法，在经过排序之后，可能会对相同值的元素的相对位置造成改变。</p>\n<p>快速排序基本上被认为是相同数量级的所有排序算法中，平均性能最好的。</p>\n<h3>堆排序</h3>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sort</span><span class=\"hljs-params\">(Comparable[] a)</span>\n{\n   <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span> a.length;\n   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> N/<span class=\"hljs-number\">2</span>; k &gt;= <span class=\"hljs-number\">1</span>; k--)\n      sink(a, k, N);\n   <span class=\"hljs-keyword\">while</span> (N &gt; <span class=\"hljs-number\">1</span>)\n   {\n      exch(a, <span class=\"hljs-number\">1</span>, N--);\n      sink(a, <span class=\"hljs-number\">1</span>, N);\n   }\n}\n</code></pre>\n<p>以上代码中,第一个循环,构造了一个二叉堆, 第二个循环,依次将堆顶元素和最后一个元素交换,并通过缩小数组N的值来弹出原堆顶 <strong>(最值)</strong> 缩小堆的大小.</p>\n<p>在前面文章 <strong>(优先队列)</strong> 里介绍过的,由数组构造的二叉堆中,父节点位置为<strong>k</strong>时,子节点分别为<strong>2k</strong>和<strong>2k+1</strong>,所以从 <strong>N/2</strong>的位置找到最大的父节点,并依次<strong>sink</strong>操作(sink操作见优先队列),从而达到堆有序.</p>\n<p>如下图:</p>\n<p><img src=\"'../assets/%E5%A0%86%E6%8E%92%E5%BA%8F.png'\" alt=\"堆排序\"></p>\n</body></html></section></template>\n\n"]},"metadata":{},"sourceType":"module"}