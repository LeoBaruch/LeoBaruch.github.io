{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"html\", null, [/*#__PURE__*/_createElementVNode(\"head\"), /*#__PURE__*/_createElementVNode(\"body\", null, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"红黑树二叉搜索树\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"上文中2-3树可以实现树的\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"有序性\"), /*#__PURE__*/_createTextVNode(\"与\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"平衡性\"), /*#__PURE__*/_createTextVNode(\",但是要维护两种不同类型的节点(2-节点与\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"3-节点\"), /*#__PURE__*/_createTextVNode(\"),将被查找的键和结点中的每个键 进行比较，将链接和其他信息从一种结点复制到另一种结点，将结点从一种数据类型转换到 另一种数据类型，等等。实现这些不仅需要大量的代码，而且它们所产生的额外开销可能会 使算法比标准的二叉查找树更慢.\")]), /*#__PURE__*/_createElementVNode(\"h3\", null, \"替换3-节点\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"红黑二叉查找树背后的基本思想是用标准的二叉查找树（完全由 2- 结点构成）和一些额外的 信息（替换 3- 结点）来表示 2-3 树.树的链接分为两种: \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"红链接\"), /*#__PURE__*/_createTextVNode(\"将两个 2- 结点 连接起来构成一个 3- 结点;\"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"黑链接\"), /*#__PURE__*/_createTextVNode(\"则是 2-3 树中的普通链接。\")]), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"\",\n  alt: \"红链接相连的两个2节点表示3节点\"\n})]), /*#__PURE__*/_createElementVNode(\"h3\", null, \"定义\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"红黑树是含有红黑链接并满足下列条件的二叉查找树：\"), /*#__PURE__*/_createElementVNode(\"ul\", null, [/*#__PURE__*/_createElementVNode(\"li\", null, \"红链接均为左链接；\"), /*#__PURE__*/_createElementVNode(\"li\", null, \"没有任何一个结点同时和两条红链接相连；\"), /*#__PURE__*/_createElementVNode(\"li\", null, \"该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同。\")]), /*#__PURE__*/_createElementVNode(\"p\", null, \"满足这样定义的红黑树和相应的 2-3 树是一一对应的\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"\",\n  alt: \"红链接画平变成2-3树\"\n})]), /*#__PURE__*/_createElementVNode(\"h3\", null, \"节点表示\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"每个结点都只会有一条指向自己的链接（从它的父结点指向它）, 我们将节点颜色保存在Node这个对象中,且当我们提到一个结点的颜色时，我们指的是指向 该结点的链接的颜色\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"static\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"final\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"RED\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"true\"), /*#__PURE__*/_createTextVNode(\";\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"static\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"final\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"BLACK\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"false\"), /*#__PURE__*/_createTextVNode(\";\\n\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"class\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Node\"), /*#__PURE__*/_createTextVNode(\" {\\n    Key key;                 \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"//键\"), /*#__PURE__*/_createTextVNode(\"\\n    Value val;               \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"//值\"), /*#__PURE__*/_createTextVNode(\"\\n    Node left, right;      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"//左右链接\"), /*#__PURE__*/_createTextVNode(\"\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" N;                      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"//这颗子树中的结点总数\"), /*#__PURE__*/_createTextVNode(\"\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(\" color;       \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"//由父结点指向它的链接的颜色\"), /*#__PURE__*/_createTextVNode(\"\\n\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"Node\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(Key key, Value val, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" N, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(\" color)\")]), /*#__PURE__*/_createTextVNode(\" {\\n        \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".key = key;\\n        \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".val = val;\\n        \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".N = N;\\n        \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"this\"), /*#__PURE__*/_createTextVNode(\".color = color;\\n    } \\n}\\n\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"isRed\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Node x)\"), /*#__PURE__*/_createTextVNode(\" {\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (x == \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\") \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"false\"), /*#__PURE__*/_createTextVNode(\";\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" x.color == RED;\\n}\\n\\n\")])])])], -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = [_hoisted_1];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"section\", null, _hoisted_2);\n}","map":{"version":3,"mappings":"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","names":["_createElementVNode","_createTextVNode","src","alt","class","_hoisted_1","_createElementBlock"],"sourceRoot":"","sources":["/Users/gexiaolong/Downloads/others/coding/myblog/src/md/redBlackBST.md"],"sourcesContent":["<template><section><html><head></head><body><h2>红黑树二叉搜索树</h2>\n<p>上文中2-3树可以实现树的<strong>有序性</strong>与<strong>平衡性</strong>,但是要维护两种不同类型的节点(2-节点与<strong>3-节点</strong>),将被查找的键和结点中的每个键\n进行比较，将链接和其他信息从一种结点复制到另一种结点，将结点从一种数据类型转换到\n另一种数据类型，等等。实现这些不仅需要大量的代码，而且它们所产生的额外开销可能会\n使算法比标准的二叉查找树更慢.</p>\n<h3>替换3-节点</h3>\n<p>红黑二叉查找树背后的基本思想是用标准的二叉查找树（完全由 2- 结点构成）和一些额外的\n信息（替换 3- 结点）来表示 2-3 树.树的链接分为两种: <strong>红链接</strong>将两个 2- 结点\n连接起来构成一个 3- 结点;<strong>黑链接</strong>则是 2-3 树中的普通链接。</p>\n<p><img src=\"\" alt=\"红链接相连的两个2节点表示3节点\"></p>\n<h3>定义</h3>\n<p>红黑树是含有红黑链接并满足下列条件的二叉查找树：</p>\n<ul>\n<li>红链接均为左链接；</li>\n<li>没有任何一个结点同时和两条红链接相连；</li>\n<li>该树是完美黑色平衡的，即任意空链接到根结点的路径上的黑链接数量相同。</li>\n</ul>\n<p>满足这样定义的红黑树和相应的 2-3 树是一一对应的</p>\n<p><img src=\"\" alt=\"红链接画平变成2-3树\"></p>\n<h3>节点表示</h3>\n<p>每个结点都只会有一条指向自己的链接（从它的父结点指向它）, 我们将节点颜色保存在Node这个对象中,且当我们提到一个结点的颜色时，我们指的是指向\n该结点的链接的颜色</p>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\">\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">RED</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">BLACK</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n    Key key;                 <span class=\"hljs-comment\">//键</span>\n    Value val;               <span class=\"hljs-comment\">//值</span>\n    Node left, right;      <span class=\"hljs-comment\">//左右链接</span>\n    <span class=\"hljs-type\">int</span> N;                      <span class=\"hljs-comment\">//这颗子树中的结点总数</span>\n    <span class=\"hljs-type\">boolean</span> color;       <span class=\"hljs-comment\">//由父结点指向它的链接的颜色</span>\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(Key key, Value val, <span class=\"hljs-type\">int</span> N, <span class=\"hljs-type\">boolean</span> color)</span> {\n        <span class=\"hljs-built_in\">this</span>.key = key;\n        <span class=\"hljs-built_in\">this</span>.val = val;\n        <span class=\"hljs-built_in\">this</span>.N = N;\n        <span class=\"hljs-built_in\">this</span>.color = color;\n    } \n}\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isRed</span><span class=\"hljs-params\">(Node x)</span> {\n    <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">return</span> x.color == RED;\n}\n\n</code></pre>\n</body></html></section></template>\n\n"]},"metadata":{},"sourceType":"module"}