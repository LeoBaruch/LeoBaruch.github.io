{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"html\", null, [/*#__PURE__*/_createElementVNode(\"head\"), /*#__PURE__*/_createElementVNode(\"body\", null, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"排序\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"归并排序\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"归并排序的性能不受输入数据的影响,为稳定排序算法, 速度仅次于快速排序.\"), /*#__PURE__*/_createElementVNode(\"h4\", null, \"思想\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"采用分治法Divide and Conquer）, 分治模式在每一层递归上有三个步骤:\"), /*#__PURE__*/_createElementVNode(\"ul\", null, [/*#__PURE__*/_createElementVNode(\"li\", null, \"分解（Divide）：将n个元素分成个含n/2个元素的子序列。\"), /*#__PURE__*/_createElementVNode(\"li\", null, \"解决（Conquer）：用合并排序法对两个子序列递归的排序。\"), /*#__PURE__*/_createElementVNode(\"li\", null, \"合并（Combine）：合并两个已排序的子序列已得到排序结果。\")]), /*#__PURE__*/_createElementVNode(\"h4\", null, \"实现逻辑(算法第四版 2.2.1):\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"先将所有元素复制到aux[], 然后再归并到a[]中. 在归并时,进行4个条件判断:\"), /*#__PURE__*/_createElementVNode(\"ul\", null, [/*#__PURE__*/_createElementVNode(\"li\", null, [/*#__PURE__*/_createElementVNode(\"p\", null, \"左半边用尽(取右半边元素),\")]), /*#__PURE__*/_createElementVNode(\"li\", null, [/*#__PURE__*/_createElementVNode(\"p\", null, \"右半边用尽(取右半边元素),\")]), /*#__PURE__*/_createElementVNode(\"li\", null, [/*#__PURE__*/_createElementVNode(\"p\", null, \"右半边当前元素小于左半边当前元素(取右半边元素),\")]), /*#__PURE__*/_createElementVNode(\"li\", null, [/*#__PURE__*/_createElementVNode(\"p\", null, \"右半边当前元素小于等于左半边元素(取左半边元素)\")])]), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-ts\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"function\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"merge\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"a: Comparable[], lo: \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"number\"), /*#__PURE__*/_createTextVNode(\", mid: \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"number\"), /*#__PURE__*/_createTextVNode(\", hi: \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"number\")]), /*#__PURE__*/_createTextVNode(\") {\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"let\"), /*#__PURE__*/_createTextVNode(\" i = lo; \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"let\"), /*#__PURE__*/_createTextVNode(\" j = mid + \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\";\\n\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"const\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-attr\"\n}, \"aux\"), /*#__PURE__*/_createTextVNode(\": \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Comparable\"), /*#__PURE__*/_createTextVNode(\"[] = \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Array\"), /*#__PURE__*/_createTextVNode(\".\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"from\"), /*#__PURE__*/_createTextVNode(\"(a);\\n\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"for\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"let\"), /*#__PURE__*/_createTextVNode(\" k = lo; k <= hi; k++) {\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\"(i > mid) a[k] = aux[j++];\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\"( j > hi) a[k] = aux[i++];\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"less\"), /*#__PURE__*/_createTextVNode(\"(aux[j], aux[i])) a[k] = aux[j++];\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"else\"), /*#__PURE__*/_createTextVNode(\" a[k] = a[i++];\\n  }\\n}\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"h5\", null, \"递归法(2.2.2)\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-ts\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"function\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"mergeSort\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"arr: Comparable[]\"), /*#__PURE__*/_createTextVNode(\") {\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"const\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-attr\"\n}, \"aux\"), /*#__PURE__*/_createTextVNode(\": \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Comparable\"), /*#__PURE__*/_createTextVNode(\"[] = [];\\n\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"function\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sort\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"array: Comparable[], lo: \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"number\"), /*#__PURE__*/_createTextVNode(\", hi: \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"number\")]), /*#__PURE__*/_createTextVNode(\") {\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\"(hi <= lo) \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\";\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"const\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-attr\"\n}, \"mid\"), /*#__PURE__*/_createTextVNode(\": \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-built_in\"\n}, \"number\"), /*#__PURE__*/_createTextVNode(\" = lo + (hi - lo) / \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"2\"), /*#__PURE__*/_createTextVNode(\";\\n\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sort\"), /*#__PURE__*/_createTextVNode(\"(array, lo, mid);\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sort\"), /*#__PURE__*/_createTextVNode(\"(array, mid + \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\", hi);\\n\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"merge\"), /*#__PURE__*/_createTextVNode(\"(array, lo, mid , hi);\\n  }\\n\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sort\"), /*#__PURE__*/_createTextVNode(\"(arr, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\" , arr.\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-property\"\n}, \"length\"), /*#__PURE__*/_createTextVNode(\" - \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\");\\n\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" arr;\\n}\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"h5\", null, \"迭代法(2.2.3)\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-ts\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"function\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"mergeSort\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"arr: Comparable[]\"), /*#__PURE__*/_createTextVNode(\") {\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"const\"), /*#__PURE__*/_createTextVNode(\" { length } = arr;\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"const\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-attr\"\n}, \"aux\"), /*#__PURE__*/_createTextVNode(\": \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Comparable\"), /*#__PURE__*/_createTextVNode(\"[] = [];\\n\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"for\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"let\"), /*#__PURE__*/_createTextVNode(\" sz = \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\"; sz < length; sz += sz + sz) { \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// sz 子数组大小\"), /*#__PURE__*/_createTextVNode(\"\\n    \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"for\"), /*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"let\"), /*#__PURE__*/_createTextVNode(\" lo = \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\"; lo < length - sz; lo += sz + sz) { \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 子数组索引\"), /*#__PURE__*/_createTextVNode(\"\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"merge\"), /*#__PURE__*/_createTextVNode(\"(arr, lo, lo + sz - \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\", \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Math\"), /*#__PURE__*/_createTextVNode(\".\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"min\"), /*#__PURE__*/_createTextVNode(\"(lo + sz + sz - \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\", length -\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\"))\\n    }\\n  }\\n\\n}\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"p\", null, \"不管元素在什么情况下都要做这些步骤，所以花销的时间是不变的，所以该算法的最优时间复杂度和最差时间复杂度及平均时间复杂度都是一样的为：O( nlogn )\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"空间复杂度为: O(n)。\")])], -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = [_hoisted_1];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"section\", null, _hoisted_2);\n}","map":{"version":3,"mappings":"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","names":["_createElementVNode","class","_createTextVNode","_hoisted_1","_createElementBlock"],"sourceRoot":"","sources":["/Users/gexiaolong/Downloads/others/coding/myblog/src/md/sort.md"],"sourcesContent":["<template><section><html><head></head><body><h2>排序</h2>\n<h3>归并排序</h3>\n<p>归并排序的性能不受输入数据的影响,为稳定排序算法, 速度仅次于快速排序.</p>\n<h4>思想</h4>\n<p>采用分治法Divide and Conquer）, 分治模式在每一层递归上有三个步骤:</p>\n<ul>\n<li>分解（Divide）：将n个元素分成个含n/2个元素的子序列。</li>\n<li>解决（Conquer）：用合并排序法对两个子序列递归的排序。</li>\n<li>合并（Combine）：合并两个已排序的子序列已得到排序结果。</li>\n</ul>\n<h4>实现逻辑(算法第四版 2.2.1):</h4>\n<p>先将所有元素复制到aux[], 然后再归并到a[]中. 在归并时,进行4个条件判断:</p>\n<ul>\n<li>\n<p>左半边用尽(取右半边元素),</p>\n</li>\n<li>\n<p>右半边用尽(取右半边元素),</p>\n</li>\n<li>\n<p>右半边当前元素小于左半边当前元素(取右半边元素),</p>\n</li>\n<li>\n<p>右半边当前元素小于等于左半边元素(取左半边元素)</p>\n</li>\n</ul>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-ts\">\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">merge</span>(<span class=\"hljs-params\">a: Comparable[], lo: <span class=\"hljs-built_in\">number</span>, mid: <span class=\"hljs-built_in\">number</span>, hi: <span class=\"hljs-built_in\">number</span></span>) {\n  <span class=\"hljs-keyword\">let</span> i = lo; <span class=\"hljs-keyword\">let</span> j = mid + <span class=\"hljs-number\">1</span>;\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">aux</span>: <span class=\"hljs-title class_\">Comparable</span>[] = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(a);\n\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k = lo; k &lt;= hi; k++) {\n    <span class=\"hljs-keyword\">if</span>(i &gt; mid) a[k] = aux[j++];\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>( j &gt; hi) a[k] = aux[i++];\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_\">less</span>(aux[j], aux[i])) a[k] = aux[j++];\n    <span class=\"hljs-keyword\">else</span> a[k] = a[i++];\n  }\n}\n\n</code></pre>\n<h5>递归法(2.2.2)</h5>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-ts\">\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">mergeSort</span>(<span class=\"hljs-params\">arr: Comparable[]</span>) {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">aux</span>: <span class=\"hljs-title class_\">Comparable</span>[] = [];\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-params\">array: Comparable[], lo: <span class=\"hljs-built_in\">number</span>, hi: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-keyword\">if</span>(hi &lt;= lo) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mid</span>: <span class=\"hljs-built_in\">number</span> = lo + (hi - lo) / <span class=\"hljs-number\">2</span>;\n\n    <span class=\"hljs-title function_\">sort</span>(array, lo, mid);\n    <span class=\"hljs-title function_\">sort</span>(array, mid + <span class=\"hljs-number\">1</span>, hi);\n\n    <span class=\"hljs-title function_\">merge</span>(array, lo, mid , hi);\n  }\n\n  <span class=\"hljs-title function_\">sort</span>(arr, <span class=\"hljs-number\">0</span> , arr.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>);\n\n  <span class=\"hljs-keyword\">return</span> arr;\n}\n\n</code></pre>\n<h5>迭代法(2.2.3)</h5>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-ts\">\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">mergeSort</span>(<span class=\"hljs-params\">arr: Comparable[]</span>) {\n  <span class=\"hljs-keyword\">const</span> { length } = arr;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">aux</span>: <span class=\"hljs-title class_\">Comparable</span>[] = [];\n\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> sz = <span class=\"hljs-number\">1</span>; sz &lt; length; sz += sz + sz) { <span class=\"hljs-comment\">// sz 子数组大小</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> lo = <span class=\"hljs-number\">0</span>; lo &lt; length - sz; lo += sz + sz) { <span class=\"hljs-comment\">// 子数组索引</span>\n      <span class=\"hljs-title function_\">merge</span>(arr, lo, lo + sz - <span class=\"hljs-number\">1</span>, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(lo + sz + sz - <span class=\"hljs-number\">1</span>, length -<span class=\"hljs-number\">1</span>))\n    }\n  }\n\n}\n\n</code></pre>\n<p>不管元素在什么情况下都要做这些步骤，所以花销的时间是不变的，所以该算法的最优时间复杂度和最差时间复杂度及平均时间复杂度都是一样的为：O( nlogn )</p>\n<p>空间复杂度为: O(n)。</p>\n</body></html></section></template>\n\n"]},"metadata":{},"sourceType":"module"}