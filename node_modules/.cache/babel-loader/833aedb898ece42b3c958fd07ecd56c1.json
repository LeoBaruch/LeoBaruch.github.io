{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"html\", null, [/*#__PURE__*/_createElementVNode(\"head\"), /*#__PURE__*/_createElementVNode(\"body\", null, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"优先队列 (算法第四版2.4)\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"普通队列是一种先进先出的数据结构，先放进队列的元素取值时优先被取出来。而优先队列是一种具有最高优先级元素先出的数据结构，比如每次取值都取最大的元素, 它包含最重要的两种操作: 删除最大元素delMax和插入元素insert().\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"堆的定义\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"当一颗二叉树的每个节点都大于等于它的两个子节点时,它被称为堆有序, 所以根节点是堆有序的二叉树中的最大节点\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"二叉堆表示法\"), /*#__PURE__*/_createElementVNode(\"h4\", null, \"完全二叉树的定义\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"二叉树除开最后一层，其他层结点数都达到最大，最后一层的所有结点都集中在左边（左边结点排列满的情况下，右边才能缺失结点）\"), /*#__PURE__*/_createElementVNode(\"h4\", null, \"数组表示完全二叉树\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"如果我们用指针来表示堆有序的二叉树，那么每个元素都需要三个指针来找到它的上下结点（父结点和两个子结点各需要一个）. 如果我们使用完全二叉树，表达就会变得特别方便\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"完全二叉树只用数组而不需要指针就可以表示。具体方法就是将二叉树的结点按照层级顺序放入数组中，根结点在位置 1，它的子结点在位置 2 和 3，而子结点的子结点则分别在位置 4、5、6 和 7，以此类推。 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"（不使用数组的第一个位置, 哨兵）\")]), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"strong\", null, \"简单起见，在下文中我们将二叉堆简称为堆）\"), /*#__PURE__*/_createTextVNode(\" 在一个堆中，位置 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"k\"), /*#__PURE__*/_createTextVNode(\" 的结点的父结点的位置为 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"k / 2\"), /*#__PURE__*/_createTextVNode(\"而它的两个子结点的位置则分别为 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"2k\"), /*#__PURE__*/_createTextVNode(\" 和 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"2k+1\"), /*#__PURE__*/_createTextVNode(\"。这样在不使用指针的情况下（我们在第 3 章中讨论二叉树时会用到它们）我们也可以通过计算数组的索引在树中上下移动：从 a[k] 向上一层就令 k 等于 k/2，向下一层则令 k 等于 2k 或 2k+1。\")]), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"strong\", null, \"命题 P\"), /*#__PURE__*/_createTextVNode(\"。一棵大小为 的完全二叉树的高度为 。\")]), /*#__PURE__*/_createElementVNode(\"p\", null, \"证明。通过归纳很容易可以证明这一点，且当 达到 2 的幂时树的高度会加 1。\"), /*#__PURE__*/_createElementVNode(\"h3\", null, \"堆的算法\"), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createTextVNode(\"我们用长度为 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"k + 1\"), /*#__PURE__*/_createTextVNode(\" 的私有数组 pq[] 来表示一个大小为 \"), /*#__PURE__*/_createElementVNode(\"strong\", null, \"k\"), /*#__PURE__*/_createTextVNode(\" 的堆，我们不会使用 pq[0]，堆元素放在 pq[1] 至 pq[N] 中\")]), /*#__PURE__*/_createElementVNode(\"h4\", null, \"堆实现的比较和交换方法\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"因为所有的元素都在数组 pq[] 中，不再将数组作为参数传递\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"less\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" i, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" j)\")]), /*#__PURE__*/_createTextVNode(\"\\n{  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" pq[i].compareTo(pq[j]) < \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\";  }\\n\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"exch\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" i, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" j)\")]), /*#__PURE__*/_createTextVNode(\"\\n{  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"Key\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"t\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\" pq[i]; pq[i] = pq[j]; pq[j] = t;  }\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"h4\", null, \"由下自上的堆有序化（上浮）\"), /*#__PURE__*/_createElementVNode(\"p\", null, \"当调用优先队列的insert方法时，我们首先把元素放置到数组的结尾，然后再把该元素上浮到正确的节点，最终形成堆有序状态。\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"swim\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" k)\")]), /*#__PURE__*/_createTextVNode(\"\\n{\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"while\"), /*#__PURE__*/_createTextVNode(\" (k > \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\" && less(k/\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"2\"), /*#__PURE__*/_createTextVNode(\", k))\\n   {\\n      exch(k/\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"2\"), /*#__PURE__*/_createTextVNode(\", k);\\n      k = k/\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"2\"), /*#__PURE__*/_createTextVNode(\";\\n   }\\n}\\n\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"h4\", null, \"由上至下的堆有序化（下沉）\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sink\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" k)\")]), /*#__PURE__*/_createTextVNode(\"\\n{\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"while\"), /*#__PURE__*/_createTextVNode(\" (\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"2\"), /*#__PURE__*/_createTextVNode(\"*k <= N)\\n   {\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"j\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"2\"), /*#__PURE__*/_createTextVNode(\"*k;\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (j < N && less(j, j+\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\")) j++;\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"if\"), /*#__PURE__*/_createTextVNode(\" (!less(k, j)) \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"break\"), /*#__PURE__*/_createTextVNode(\";\\n      exch(k, j);\\n      k = j;\\n   }\\n}\\n\\n\")])]), /*#__PURE__*/_createElementVNode(\"p\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"'../assets/%E5%A0%86%E7%9A%84%E6%93%8D%E4%BD%9C.png'\",\n  alt: \"堆的操作\"\n})]), /*#__PURE__*/_createElementVNode(\"h4\"), /*#__PURE__*/_createElementVNode(\"pre\", null, [/*#__PURE__*/_createElementVNode(\"code\", {\n  \"v-pre\": \"\",\n  class: \"language-java\"\n}, [/*#__PURE__*/_createTextVNode(\"\\n\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"class\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"MaxPQ\"), /*#__PURE__*/_createTextVNode(\"<Key \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"extends\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Comparable\"), /*#__PURE__*/_createTextVNode(\"<Key>>\\n{\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(\" Key[] pq;             \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 基于堆的完全按二叉树”\"), /*#__PURE__*/_createTextVNode(\"\\n  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"N\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\";            \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 存储于pq[1..N]中，pq[0]没有使用\"), /*#__PURE__*/_createTextVNode(\"\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"MaxPQ\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" maxN)\")]), /*#__PURE__*/_createTextVNode(\"\\n   {  pq = (Key[]) \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"new\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title class_\"\n}, \"Comparable\"), /*#__PURE__*/_createTextVNode(\"[maxN+\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\"];  }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"isEmpty\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"()\"), /*#__PURE__*/_createTextVNode(\"\\n   {  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"N\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\"= \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"0\"), /*#__PURE__*/_createTextVNode(\";  }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"size\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"()\"), /*#__PURE__*/_createTextVNode(\"\\n   {  \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" N;  }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"insert\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"(Key v)\"), /*#__PURE__*/_createTextVNode(\"\\n   {\\n      pq[++N] = v;\\n      swim(N);\\n   }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"public\"), /*#__PURE__*/_createTextVNode(\" Key \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"delMax\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, \"()\"), /*#__PURE__*/_createTextVNode(\"\\n   {\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"Key\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-variable\"\n}, \"max\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-operator\"\n}, \"=\"), /*#__PURE__*/_createTextVNode(\" pq[\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\"];           \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 从根结点得到最大元素\"), /*#__PURE__*/_createTextVNode(\"\\n      exch(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\", N--);              \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 将其和最后一个结点交换\"), /*#__PURE__*/_createTextVNode(\"\\n      pq[N+\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\"] = \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-literal\"\n}, \"null\"), /*#__PURE__*/_createTextVNode(\";            \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 防止对象游离\"), /*#__PURE__*/_createTextVNode(\"\\n      sink(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-number\"\n}, \"1\"), /*#__PURE__*/_createTextVNode(\");                   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 恢复堆的有序性\"), /*#__PURE__*/_createTextVNode(\"\\n      \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"return\"), /*#__PURE__*/_createTextVNode(\" max;\\n   }\\n\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-comment\"\n}, \"// 辅助方法的实现请见本节前面的代码框\"), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"boolean\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"less\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" i, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" j)\")]), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"exch\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" i, \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" j)\")]), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"swim\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" k)\")]), /*#__PURE__*/_createTextVNode(\"\\n   \"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"private\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-keyword\"\n}, \"void\"), /*#__PURE__*/_createTextVNode(), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-title function_\"\n}, \"sink\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-params\"\n}, [/*#__PURE__*/_createTextVNode(\"(\"), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hljs-type\"\n}, \"int\"), /*#__PURE__*/_createTextVNode(\" k)\")]), /*#__PURE__*/_createTextVNode(\"\\n}\\n\\n\")])])])], -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = [_hoisted_1];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"section\", null, _hoisted_2);\n}","map":{"version":3,"mappings":";;gCAASA,oBA4FK,MA5FL,EA4FK,IA5FL,EA4FK,cA5FCA,oBAAa,MAAb,CA4FD,eA5FcA,oBA4FrB,MA5FqB,EA4FrB,IA5FqB,EA4FrB,cA5F2BA,oBAAwB,IAAxB,EAAwB,IAAxB,EAAI,iBAAJ,CA4F3B,eA3FPA,oBAAyH,GAAzH,EAAyH,IAAzH,EAAG,oHAAH,CA2FO,eA1FPA,oBAAa,IAAb,EAAa,IAAb,EAAI,MAAJ,CA0FO,eAzFPA,oBAA4D,GAA5D,EAA4D,IAA5D,EAAG,uDAAH,CAyFO,eAxFPA,oBAAe,IAAf,EAAe,IAAf,EAAI,QAAJ,CAwFO,eAvFPA,oBAAiB,IAAjB,EAAiB,IAAjB,EAAI,UAAJ,CAuFO,eAtFPA,oBAAkE,GAAlE,EAAkE,IAAlE,EAAG,6DAAH,CAsFO,eArFPA,oBAAkB,IAAlB,EAAkB,IAAlB,EAAI,WAAJ,CAqFO,eApFPA,oBAAuF,GAAvF,EAAuF,IAAvF,EAAG,kFAAH,CAoFO,eAnFPA,oBAA8I,GAA9I,EAA8I,IAA9I,EAA8I,cAT9IC,iBASG,uGATH,CAS8I,eAAtCD,oBAAkC,QAAlC,EAAkC,IAAlC,EAAQ,mBAAR,CAAsC,CAA9I,CAmFO,eAlFPA,oBAA4Q,GAA5Q,EAA4Q,IAA5Q,EAA4Q,cAAzQA,oBAAqC,QAArC,EAAqC,IAArC,EAAQ,sBAAR,CAAyQ,eAV5QC,iBAUwC,YAVxC,CAU4Q,eAA1ND,oBAAkB,QAAlB,EAAkB,IAAlB,EAAQ,GAAR,CAA0N,eAV5QC,iBAUoE,eAVpE,CAU4Q,eAA3LD,oBAAsB,QAAtB,EAAsB,IAAtB,EAAQ,OAAR,CAA2L,eAV5QC,iBAUuG,kBAVvG,CAU4Q,eAArJD,oBAAmB,QAAnB,EAAmB,IAAnB,EAAQ,IAAR,CAAqJ,eAV5QC,iBAU0I,KAV1I,CAU4Q,eAA/HD,oBAAqB,QAArB,EAAqB,IAArB,EAAQ,MAAR,CAA+H,eAV5QC,iBAUkK,wGAVlK,CAU4Q,CAA5Q,CAkFO,eAjFPD,oBAAgD,GAAhD,EAAgD,IAAhD,EAAgD,cAA7CA,oBAAqB,QAArB,EAAqB,IAArB,EAAQ,MAAR,CAA6C,eAXhDC,iBAWwB,qBAXxB,CAWgD,CAAhD,CAiFO,eAhFPD,oBAA6C,GAA7C,EAA6C,IAA7C,EAAG,wCAAH,CAgFO,eA/EPA,oBAAa,IAAb,EAAa,IAAb,EAAI,MAAJ,CA+EO,eA9EPA,oBAAiH,GAAjH,EAAiH,IAAjH,EAAiH,cAdjHC,iBAcG,SAdH,CAciH,eAAvGD,oBAAsB,QAAtB,EAAsB,IAAtB,EAAQ,OAAR,CAAuG,eAdjHC,iBAcgC,uBAdhC,CAciH,eAA5DD,oBAAkB,QAAlB,EAAkB,IAAlB,EAAQ,GAAR,CAA4D,eAdjHC,iBAcuE,wCAdvE,CAciH,CAAjH,CA8EO,eA7EPD,oBAAoB,IAApB,EAAoB,IAApB,EAAI,aAAJ,CA6EO,eA5EPA,oBAAqC,GAArC,EAAqC,IAArC,EAAG,gCAAH,CA4EO,eA3EPA,oBAMa,KANb,EAMa,IANb,EAMa,cANCA,oBAMP,MANO,EAMP;AANa,WAAM,EAMnB;AANsBE,OAAK,EAAC;AAM5B,CANO,gBAAqCF,oBAAyC,MAAzC,EAAyC;AAAnCE,OAAK,EAAC;AAA6B,CAAzC,EAA2B,SAA3B,gBAjBnDD,iCAiB6FD,oBAAsC,MAAtC,EAAsC;AAAhCE,OAAK,EAAC;AAA0B,CAAtC,EAAwB,SAAxB,gBAjB7FD,iCAiBoID,oBAA8C,MAA9C,EAA8C;AAAxCE,OAAK,EAAC;AAAkC,CAA9C,EAAmC,MAAnC,gBAA8CF,oBAA6G,MAA7G,EAA6G;AAAvGE,OAAK,EAAC;AAAiG,CAA7G,EAAyB,cAjB3MD,iBAiB4M,GAjB5M,CAiB2M,eAAED,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,CAAF,eAjB3MD,iBAiB+O,MAjB/O,CAiB2M,eAAwCD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,CAAxC,eAjB3MD,iBAiBqR,KAjBrR,CAiB2M,CAAzB,gBAjBlLA,iBAiB+R,OAjB/R,gBAkBGD,oBAAwC,MAAxC,EAAwC;AAAlCE,OAAK,EAAC;AAA4B,CAAxC,EAA2B,QAA3B,gBAlBHD,iBAkB2C,4BAlB3C,gBAkBwED,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAA0B,GAA1B,gBAlBxED,iBAkB0G,UAlB1G,gBAoBAD,oBAAyC,MAAzC,EAAyC;AAAnCE,OAAK,EAAC;AAA6B,CAAzC,EAA2B,SAA3B,gBApBAD,iCAoB0CD,oBAAsC,MAAtC,EAAsC;AAAhCE,OAAK,EAAC;AAA0B,CAAtC,EAA2B,MAA3B,gBApB1CD,iCAoBiFD,oBAA8C,MAA9C,EAA8C;AAAxCE,OAAK,EAAC;AAAkC,CAA9C,EAAmC,MAAnC,gBAA8CF,oBAA6G,MAA7G,EAA6G;AAAvGE,OAAK,EAAC;AAAiG,CAA7G,EAAyB,cApBxJD,iBAoByJ,GApBzJ,CAoBwJ,eAAED,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,CAAF,eApBxJD,iBAoB4L,MApB5L,CAoBwJ,eAAwCD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,CAAxC,eApBxJD,iBAoBkO,KApBlO,CAoBwJ,CAAzB,gBApB/HA,iBAoB4O,OApB5O,gBAqBGD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,gBArBHD,iCAqBsCD,oBAAoC,MAApC,EAAoC;AAA9BE,OAAK,EAAC;AAAwB,CAApC,EAA4B,GAA5B,gBArBtCD,iCAqB2ED,oBAAoC,MAApC,EAAoC;AAA9BE,OAAK,EAAC;AAAwB,CAApC,EAA4B,GAA5B,gBArB3ED,iBAqB+G,0CArB/G,EAiBc,CAMD,CANb,CA2EO,eApEPD,oBAAsB,IAAtB,EAAsB,IAAtB,EAAI,eAAJ,CAoEO,eAnEPA,oBAAmE,GAAnE,EAAmE,IAAnE,EAAG,8DAAH,CAmEO,eAlEPA,oBAUa,KAVb,EAUa,IAVb,EAUa,cAVCA,oBAUP,MAVO,EAUP;AAVa,WAAM,EAUnB;AAVsBE,OAAK,EAAC;AAU5B,CAVO,gBAAqCF,oBAAyC,MAAzC,EAAyC;AAAnCE,OAAK,EAAC;AAA6B,CAAzC,EAA2B,SAA3B,gBA1BnDD,iCA0B6FD,oBAAsC,MAAtC,EAAsC;AAAhCE,OAAK,EAAC;AAA0B,CAAtC,EAA2B,MAA3B,gBA1B7FD,iCA0BoID,oBAA8C,MAA9C,EAA8C;AAAxCE,OAAK,EAAC;AAAkC,CAA9C,EAAmC,MAAnC,gBAA8CF,oBAAuE,MAAvE,EAAuE;AAAjEE,OAAK,EAAC;AAA2D,CAAvE,EAAyB,cA1B3MD,iBA0B4M,GA1B5M,CA0B2M,eAAED,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,CAAF,eA1B3MD,iBA0B+O,KA1B/O,CA0B2M,CAAzB,gBA1BlLA,iBA0ByP,UA1BzP,gBA4BGD,oBAAuC,MAAvC,EAAuC;AAAjCE,OAAK,EAAC;AAA2B,CAAvC,EAA2B,OAA3B,gBA5BHD,iBA4B0C,QA5B1C,gBA4BmDD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAA0B,GAA1B,gBA5BnDD,iBA4BqF,aA5BrF,gBA4BwGD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAA0B,GAA1B,gBA5BxGD,iBA4B0I,4BA5B1I,gBA8BaD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAA0B,GAA1B,gBA9BbD,iBA8B+C,qBA9B/C,gBA+BYD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAA0B,GAA1B,gBA/BZD,iBA+B8C,kBA/B9C,EA0Bc,CAUD,CAVb,CAkEO,eAvDPD,oBAAsB,IAAtB,EAAsB,IAAtB,EAAI,eAAJ,CAuDO,eAtDPA,oBAaa,KAbb,EAaa,IAbb,EAaa,cAbCA,oBAaP,MAbO,EAaP;AAba,WAAM,EAanB;AAbsBE,OAAK,EAAC;AAa5B,CAbO,gBAtCdD,iBAsCmD,IAtCnD,gBAuCAD,oBAAyC,MAAzC,EAAyC;AAAnCE,OAAK,EAAC;AAA6B,CAAzC,EAA2B,SAA3B,gBAvCAD,iCAuC0CD,oBAAsC,MAAtC,EAAsC;AAAhCE,OAAK,EAAC;AAA0B,CAAtC,EAA2B,MAA3B,gBAvC1CD,iCAuCiFD,oBAA8C,MAA9C,EAA8C;AAAxCE,OAAK,EAAC;AAAkC,CAA9C,EAAmC,MAAnC,gBAA8CF,oBAAuE,MAAvE,EAAuE;AAAjEE,OAAK,EAAC;AAA2D,CAAvE,EAAyB,cAvCxJD,iBAuCyJ,GAvCzJ,CAuCwJ,eAAED,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,CAAF,eAvCxJD,iBAuC4L,KAvC5L,CAuCwJ,CAAzB,gBAvC/HA,iBAuCsM,UAvCtM,gBAyCGD,oBAAuC,MAAvC,EAAuC;AAAjCE,OAAK,EAAC;AAA2B,CAAvC,EAA2B,OAA3B,gBAzCHD,iBAyC0C,IAzC1C,gBAyC4CD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAA0B,GAA1B,gBAzC5CD,iBAyC8E,wBAzC9E,gBA2CMD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,gBA3CND,iCA2CyCD,oBAAoC,MAApC,EAAoC;AAA9BE,OAAK,EAAC;AAAwB,CAApC,EAA4B,GAA5B,gBA3CzCD,iCA2C8ED,oBAAoC,MAApC,EAAoC;AAA9BE,OAAK,EAAC;AAAwB,CAApC,EAA4B,GAA5B,gBA3C9ED,iCA2CmHD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAA0B,GAA1B,gBA3CnHD,iBA2CqJ,aA3CrJ,gBA4CMD,oBAAoC,MAApC,EAAoC;AAA9BE,OAAK,EAAC;AAAwB,CAApC,EAA2B,IAA3B,gBA5CND,iBA4C0C,uBA5C1C,gBA4C0ED,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAA0B,GAA1B,gBA5C1ED,iBA4C4G,iBA5C5G,gBA6CMD,oBAAoC,MAApC,EAAoC;AAA9BE,OAAK,EAAC;AAAwB,CAApC,EAA2B,IAA3B,gBA7CND,iBA6C0C,iBA7C1C,gBA6CyDD,oBAAuC,MAAvC,EAAuC;AAAjCE,OAAK,EAAC;AAA2B,CAAvC,EAA2B,OAA3B,gBA7CzDD,iBA6CgG,iDA7ChG,EAsCc,CAaD,CAbb,CAsDO,eAxCPD,oBAAkF,GAAlF,EAAkF,IAAlF,EAAkF,cAA/EA,oBAA2E,KAA3E,EAA2E;AAAtEG,KAAG,EAAC,sDAAkE;AAAXC,KAAG,EAAC;AAAO,CAA3E,CAA+E,CAAlF,CAwCO,eAvCPJ,oBAAS,IAAT,CAuCO,eAtCPA,oBAqCa,KArCb,EAqCa,IArCb,EAqCa,cArCCA,oBAqCP,MArCO,EAqCP;AArCa,WAAM,EAqCnB;AArCsBE,OAAK,EAAC;AAqC5B,CArCO,gBAtDdD,iBAsDmD,IAtDnD,gBAuDAD,oBAAwC,MAAxC,EAAwC;AAAlCE,OAAK,EAAC;AAA4B,CAAxC,EAA2B,QAA3B,gBAvDAD,iCAuDyCD,oBAAuC,MAAvC,EAAuC;AAAjCE,OAAK,EAAC;AAA2B,CAAvC,EAA2B,OAA3B,gBAvDzCD,iCAuDiFD,oBAA4C,MAA5C,EAA4C;AAAtCE,OAAK,EAAC;AAAgC,CAA5C,EAAgC,OAAhC,gBAvDjFD,iBAuD6H,OAvD7H,gBAuDqID,oBAAyC,MAAzC,EAAyC;AAAnCE,OAAK,EAAC;AAA6B,CAAzC,EAA2B,SAA3B,gBAvDrID,iCAuD+KD,oBAAiD,MAAjD,EAAiD;AAA3CE,OAAK,EAAC;AAAqC,CAAjD,EAAgC,YAAhC,gBAvD/KD,iBAuDgO,eAvDhO,gBAyDED,oBAAyC,MAAzC,EAAyC;AAAnCE,OAAK,EAAC;AAA6B,CAAzC,EAA2B,SAA3B,gBAzDFD,iBAyD2C,yBAzD3C,gBAyDkED,oBAAgD,MAAhD,EAAgD;AAA1CE,OAAK,EAAC;AAAoC,CAAhD,EAA2B,gBAA3B,gBAzDlED,iBAyDkH,MAzDlH,gBA0DED,oBAAyC,MAAzC,EAAyC;AAAnCE,OAAK,EAAC;AAA6B,CAAzC,EAA2B,SAA3B,gBA1DFD,iCA0D4CD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,gBA1D5CD,iCA0D+ED,oBAAoC,MAApC,EAAoC;AAA9BE,OAAK,EAAC;AAAwB,CAApC,EAA4B,GAA5B,gBA1D/ED,iCA0DoHD,oBAAoC,MAApC,EAAoC;AAA9BE,OAAK,EAAC;AAAwB,CAApC,EAA4B,GAA5B,gBA1DpHD,iCA0DyJD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAA0B,GAA1B,gBA1DzJD,iBA0D2L,eA1D3L,gBA0DwMD,oBAA2D,MAA3D,EAA2D;AAArDE,OAAK,EAAC;AAA+C,CAA3D,EAA2B,2BAA3B,gBA1DxMD,iBA0DmQ,SA1DnQ,gBA4DGD,oBAAwC,MAAxC,EAAwC;AAAlCE,OAAK,EAAC;AAA4B,CAAxC,EAA2B,QAA3B,gBA5DHD,iCA4D4CD,oBAA+C,MAA/C,EAA+C;AAAzCE,OAAK,EAAC;AAAmC,CAA/C,EAAmC,OAAnC,gBAA+CF,oBAA0E,MAA1E,EAA0E;AAApEE,OAAK,EAAC;AAA8D,CAA1E,EAAyB,cA5DpHD,iBA4DqH,GA5DrH,CA4DoH,eAAED,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,CAAF,eA5DpHD,iBA4DwJ,QA5DxJ,CA4DoH,CAAzB,gBA5D3FA,iBA4DqK,uBA5DrK,gBA6DmBD,oBAAqC,MAArC,EAAqC;AAA/BE,OAAK,EAAC;AAAyB,CAArC,EAA2B,KAA3B,gBA7DnBD,iCA6DyDD,oBAAiD,MAAjD,EAAiD;AAA3CE,OAAK,EAAC;AAAqC,CAAjD,EAAgC,YAAhC,gBA7DzDD,iBA6D0G,QA7D1G,gBA6DgHD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAA0B,GAA1B,gBA7DhHD,iBA6DkJ,cA7DlJ,gBA+DGD,oBAAwC,MAAxC,EAAwC;AAAlCE,OAAK,EAAC;AAA4B,CAAxC,EAA2B,QAA3B,gBA/DHD,iCA+D4CD,oBAAsC,MAAtC,EAAsC;AAAhCE,OAAK,EAAC;AAA0B,CAAtC,EAAwB,SAAxB,gBA/D5CD,iCA+DmFD,oBAAiD,MAAjD,EAAiD;AAA3CE,OAAK,EAAC;AAAqC,CAAjD,EAAmC,SAAnC,gBAAiDF,oBAAmC,MAAnC,EAAmC;AAA7BE,OAAK,EAAC;AAAuB,CAAnC,EAA0B,IAA1B,gBA/DpID,iBA+DuK,UA/DvK,gBAgEMD,oBAAqC,MAArC,EAAqC;AAA/BE,OAAK,EAAC;AAAyB,CAArC,EAAwB,QAAxB,gBAhEND,iCAgE4CD,oBAAoC,MAApC,EAAoC;AAA9BE,OAAK,EAAC;AAAwB,CAApC,EAA4B,GAA5B,gBAhE5CD,iCAgEiFD,oBAAoC,MAApC,EAAoC;AAA9BE,OAAK,EAAC;AAAwB,CAApC,EAA4B,GAA5B,gBAhEjFD,iBAgEqH,IAhErH,gBAgEuHD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAA0B,GAA1B,gBAhEvHD,iBAgEyJ,aAhEzJ,gBAkEGD,oBAAwC,MAAxC,EAAwC;AAAlCE,OAAK,EAAC;AAA4B,CAAxC,EAA2B,QAA3B,gBAlEHD,iCAkE4CD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,gBAlE5CD,iCAkE+ED,oBAA8C,MAA9C,EAA8C;AAAxCE,OAAK,EAAC;AAAkC,CAA9C,EAAmC,MAAnC,gBAA8CF,oBAAmC,MAAnC,EAAmC;AAA7BE,OAAK,EAAC;AAAuB,CAAnC,EAA0B,IAA1B,gBAlE7HD,iBAkEgK,UAlEhK,gBAmEMD,oBAAwC,MAAxC,EAAwC;AAAlCE,OAAK,EAAC;AAA4B,CAAxC,EAA2B,QAA3B,gBAnEND,iBAmE8C,eAnE9C,gBAqEGD,oBAAwC,MAAxC,EAAwC;AAAlCE,OAAK,EAAC;AAA4B,CAAxC,EAA2B,QAA3B,gBArEHD,iCAqE4CD,oBAAsC,MAAtC,EAAsC;AAAhCE,OAAK,EAAC;AAA0B,CAAtC,EAA2B,MAA3B,gBArE5CD,iCAqEmFD,oBAAgD,MAAhD,EAAgD;AAA1CE,OAAK,EAAC;AAAoC,CAAhD,EAAmC,QAAnC,gBAAgDF,oBAAwC,MAAxC,EAAwC;AAAlCE,OAAK,EAAC;AAA4B,CAAxC,EAA0B,SAA1B,gBArEnID,iBAqE2K,yDArE3K,gBA2EGD,oBAAwC,MAAxC,EAAwC;AAAlCE,OAAK,EAAC;AAA4B,CAAxC,EAA2B,QAA3B,gBA3EHD,iBA2E2C,OA3E3C,gBA2EgDD,oBAAgD,MAAhD,EAAgD;AAA1CE,OAAK,EAAC;AAAoC,CAAhD,EAAmC,QAAnC,gBAAgDF,oBAAmC,MAAnC,EAAmC;AAA7BE,OAAK,EAAC;AAAuB,CAAnC,EAA0B,IAA1B,gBA3EhGD,iBA2EmI,gBA3EnI,gBA6EMD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,gBA7END,iCA6EyCD,oBAAsC,MAAtC,EAAsC;AAAhCE,OAAK,EAAC;AAA0B,CAAtC,EAA4B,KAA5B,gBA7EzCD,iCA6EgFD,oBAAoC,MAApC,EAAoC;AAA9BE,OAAK,EAAC;AAAwB,CAApC,EAA4B,GAA5B,gBA7EhFD,iBA6EoH,MA7EpH,gBA6EwHD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAA0B,GAA1B,gBA7ExHD,iBA6E0J,eA7E1J,gBA6EuKD,oBAA+C,MAA/C,EAA+C;AAAzCE,OAAK,EAAC;AAAmC,CAA/C,EAA2B,eAA3B,gBA7EvKD,iBA6EsN,eA7EtN,gBA8EWD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAA0B,GAA1B,gBA9EXD,iBA8E6C,uBA9E7C,gBA8EkED,oBAAgD,MAAhD,EAAgD;AAA1CE,OAAK,EAAC;AAAoC,CAAhD,EAA2B,gBAA3B,gBA9ElED,iBA8EkH,eA9ElH,gBA+EWD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAA0B,GAA1B,gBA/EXD,iBA+E6C,MA/E7C,gBA+EiDD,oBAAsC,MAAtC,EAAsC;AAAhCE,OAAK,EAAC;AAA0B,CAAtC,EAA2B,MAA3B,gBA/EjDD,iBA+EuF,eA/EvF,gBA+EoGD,oBAA2C,MAA3C,EAA2C;AAArCE,OAAK,EAAC;AAA+B,CAA3C,EAA2B,WAA3B,gBA/EpGD,iBA+E+I,eA/E/I,gBAgFWD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAA0B,GAA1B,gBAhFXD,iBAgF6C,uBAhF7C,gBAgFkED,oBAA4C,MAA5C,EAA4C;AAAtCE,OAAK,EAAC;AAAgC,CAA5C,EAA2B,YAA3B,gBAhFlED,iBAgF8G,UAhF9G,gBAiFMD,oBAAwC,MAAxC,EAAwC;AAAlCE,OAAK,EAAC;AAA4B,CAAxC,EAA2B,QAA3B,gBAjFND,iBAiF8C,oBAjF9C,gBAoFGD,oBAAsD,MAAtD,EAAsD;AAAhDE,OAAK,EAAC;AAA0C,CAAtD,EAA2B,sBAA3B,gBApFHD,iBAoFyD,OApFzD,gBAqFGD,oBAAyC,MAAzC,EAAyC;AAAnCE,OAAK,EAAC;AAA6B,CAAzC,EAA2B,SAA3B,gBArFHD,iCAqF6CD,oBAAsC,MAAtC,EAAsC;AAAhCE,OAAK,EAAC;AAA0B,CAAtC,EAAwB,SAAxB,gBArF7CD,iCAqFoFD,oBAA8C,MAA9C,EAA8C;AAAxCE,OAAK,EAAC;AAAkC,CAA9C,EAAmC,MAAnC,gBAA8CF,oBAA6G,MAA7G,EAA6G;AAAvGE,OAAK,EAAC;AAAiG,CAA7G,EAAyB,cArF3JD,iBAqF4J,GArF5J,CAqF2J,eAAED,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,CAAF,eArF3JD,iBAqF+L,MArF/L,CAqF2J,eAAwCD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,CAAxC,eArF3JD,iBAqFqO,KArFrO,CAqF2J,CAAzB,gBArFlIA,iBAqF+O,OArF/O,gBAsFGD,oBAAyC,MAAzC,EAAyC;AAAnCE,OAAK,EAAC;AAA6B,CAAzC,EAA2B,SAA3B,gBAtFHD,iCAsF6CD,oBAAsC,MAAtC,EAAsC;AAAhCE,OAAK,EAAC;AAA0B,CAAtC,EAA2B,MAA3B,gBAtF7CD,iCAsFoFD,oBAA8C,MAA9C,EAA8C;AAAxCE,OAAK,EAAC;AAAkC,CAA9C,EAAmC,MAAnC,gBAA8CF,oBAA6G,MAA7G,EAA6G;AAAvGE,OAAK,EAAC;AAAiG,CAA7G,EAAyB,cAtF3JD,iBAsF4J,GAtF5J,CAsF2J,eAAED,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,CAAF,eAtF3JD,iBAsF+L,MAtF/L,CAsF2J,eAAwCD,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,CAAxC,eAtF3JD,iBAsFqO,KAtFrO,CAsF2J,CAAzB,gBAtFlIA,iBAsF+O,OAtF/O,gBAuFGD,oBAAyC,MAAzC,EAAyC;AAAnCE,OAAK,EAAC;AAA6B,CAAzC,EAA2B,SAA3B,gBAvFHD,iCAuF6CD,oBAAsC,MAAtC,EAAsC;AAAhCE,OAAK,EAAC;AAA0B,CAAtC,EAA2B,MAA3B,gBAvF7CD,iCAuFoFD,oBAA8C,MAA9C,EAA8C;AAAxCE,OAAK,EAAC;AAAkC,CAA9C,EAAmC,MAAnC,gBAA8CF,oBAAuE,MAAvE,EAAuE;AAAjEE,OAAK,EAAC;AAA2D,CAAvE,EAAyB,cAvF3JD,iBAuF4J,GAvF5J,CAuF2J,eAAED,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,CAAF,eAvF3JD,iBAuF+L,KAvF/L,CAuF2J,CAAzB,gBAvFlIA,iBAuFyM,OAvFzM,gBAwFGD,oBAAyC,MAAzC,EAAyC;AAAnCE,OAAK,EAAC;AAA6B,CAAzC,EAA2B,SAA3B,gBAxFHD,iCAwF6CD,oBAAsC,MAAtC,EAAsC;AAAhCE,OAAK,EAAC;AAA0B,CAAtC,EAA2B,MAA3B,gBAxF7CD,iCAwFoFD,oBAA8C,MAA9C,EAA8C;AAAxCE,OAAK,EAAC;AAAkC,CAA9C,EAAmC,MAAnC,gBAA8CF,oBAAuE,MAAvE,EAAuE;AAAjEE,OAAK,EAAC;AAA2D,CAAvE,EAAyB,cAxF3JD,iBAwF4J,GAxF5J,CAwF2J,eAAED,oBAAkC,MAAlC,EAAkC;AAA5BE,OAAK,EAAC;AAAsB,CAAlC,EAAwB,KAAxB,CAAF,eAxF3JD,iBAwF+L,KAxF/L,CAwF2J,CAAzB,gBAxFlIA,iBAwFyM,SAxFzM,EAsDc,CAqCD,CArCb,CAsCO,CA5FqB,CA4Fd,CA5FL;;AAAA;;oBAAAI;;uBAATC,oBA4FwB,SA5FxB,EA4FwB,IA5FxB","names":["_createElementVNode","_createTextVNode","class","src","alt","_hoisted_1","_createElementBlock"],"sourceRoot":"","sources":["/Users/gexiaolong/Downloads/others/coding/myblog/src/md/PriorityQueue.md"],"sourcesContent":["<template><section><html><head></head><body><h2>优先队列 (算法第四版2.4)</h2>\n<p>普通队列是一种先进先出的数据结构，先放进队列的元素取值时优先被取出来。而优先队列是一种具有最高优先级元素先出的数据结构，比如每次取值都取最大的元素, 它包含最重要的两种操作: 删除最大元素delMax和插入元素insert().</p>\n<h3>堆的定义</h3>\n<p>当一颗二叉树的每个节点都大于等于它的两个子节点时,它被称为堆有序, 所以根节点是堆有序的二叉树中的最大节点</p>\n<h3>二叉堆表示法</h3>\n<h4>完全二叉树的定义</h4>\n<p>二叉树除开最后一层，其他层结点数都达到最大，最后一层的所有结点都集中在左边（左边结点排列满的情况下，右边才能缺失结点）</p>\n<h4>数组表示完全二叉树</h4>\n<p>如果我们用指针来表示堆有序的二叉树，那么每个元素都需要三个指针来找到它的上下结点（父结点和两个子结点各需要一个）. 如果我们使用完全二叉树，表达就会变得特别方便</p>\n<p>完全二叉树只用数组而不需要指针就可以表示。具体方法就是将二叉树的结点按照层级顺序放入数组中，根结点在位置 1，它的子结点在位置 2 和 3，而子结点的子结点则分别在位置 4、5、6 和 7，以此类推。 <strong>（不使用数组的第一个位置, 哨兵）</strong></p>\n<p><strong>简单起见，在下文中我们将二叉堆简称为堆）</strong> 在一个堆中，位置 <strong>k</strong> 的结点的父结点的位置为 <strong>k / 2</strong>而它的两个子结点的位置则分别为 <strong>2k</strong> 和 <strong>2k+1</strong>。这样在不使用指针的情况下（我们在第 3 章中讨论二叉树时会用到它们）我们也可以通过计算数组的索引在树中上下移动：从 a[k] 向上一层就令 k 等于 k/2，向下一层则令 k 等于 2k 或 2k+1。</p>\n<p><strong>命题 P</strong>。一棵大小为  的完全二叉树的高度为 。</p>\n<p>证明。通过归纳很容易可以证明这一点，且当 达到 2 的幂时树的高度会加 1。</p>\n<h3>堆的算法</h3>\n<p>我们用长度为 <strong>k + 1</strong> 的私有数组 pq[] 来表示一个大小为 <strong>k</strong> 的堆，我们不会使用 pq[0]，堆元素放在 pq[1] 至 pq[N] 中</p>\n<h4>堆实现的比较和交换方法</h4>\n<p>因为所有的元素都在数组 pq[] 中，不再将数组作为参数传递</p>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">less</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span>\n{  <span class=\"hljs-keyword\">return</span> pq[i].compareTo(pq[j]) &lt; <span class=\"hljs-number\">0</span>;  }\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">exch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span>\n{  <span class=\"hljs-type\">Key</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> pq[i]; pq[i] = pq[j]; pq[j] = t;  }\n\n</code></pre>\n<h4>由下自上的堆有序化（上浮）</h4>\n<p>当调用优先队列的insert方法时，我们首先把元素放置到数组的结尾，然后再把该元素上浮到正确的节点，最终形成堆有序状态。</p>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">swim</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k)</span>\n{\n   <span class=\"hljs-keyword\">while</span> (k &gt; <span class=\"hljs-number\">1</span> &amp;&amp; less(k/<span class=\"hljs-number\">2</span>, k))\n   {\n      exch(k/<span class=\"hljs-number\">2</span>, k);\n      k = k/<span class=\"hljs-number\">2</span>;\n   }\n}\n\n\n</code></pre>\n<h4>由上至下的堆有序化（下沉）</h4>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\">\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sink</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k)</span>\n{\n   <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">2</span>*k &lt;= N)\n   {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>*k;\n      <span class=\"hljs-keyword\">if</span> (j &lt; N &amp;&amp; less(j, j+<span class=\"hljs-number\">1</span>)) j++;\n      <span class=\"hljs-keyword\">if</span> (!less(k, j)) <span class=\"hljs-keyword\">break</span>;\n      exch(k, j);\n      k = j;\n   }\n}\n\n</code></pre>\n<p><img src=\"'../assets/%E5%A0%86%E7%9A%84%E6%93%8D%E4%BD%9C.png'\" alt=\"堆的操作\"></p>\n<h4></h4>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MaxPQ</span>&lt;Key <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;Key&gt;&gt;\n{\n  <span class=\"hljs-keyword\">private</span> Key[] pq;             <span class=\"hljs-comment\">// 基于堆的完全按二叉树”</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;            <span class=\"hljs-comment\">// 存储于pq[1..N]中，pq[0]没有使用</span>\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MaxPQ</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> maxN)</span>\n   {  pq = (Key[]) <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparable</span>[maxN+<span class=\"hljs-number\">1</span>];  }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span>\n   {  <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">0</span>;  }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span>\n   {  <span class=\"hljs-keyword\">return</span> N;  }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(Key v)</span>\n   {\n      pq[++N] = v;\n      swim(N);\n   }\n\n   <span class=\"hljs-keyword\">public</span> Key <span class=\"hljs-title function_\">delMax</span><span class=\"hljs-params\">()</span>\n   {\n      <span class=\"hljs-type\">Key</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> pq[<span class=\"hljs-number\">1</span>];           <span class=\"hljs-comment\">// 从根结点得到最大元素</span>\n      exch(<span class=\"hljs-number\">1</span>, N--);              <span class=\"hljs-comment\">// 将其和最后一个结点交换</span>\n      pq[N+<span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">null</span>;            <span class=\"hljs-comment\">// 防止对象游离</span>\n      sink(<span class=\"hljs-number\">1</span>);                   <span class=\"hljs-comment\">// 恢复堆的有序性</span>\n      <span class=\"hljs-keyword\">return</span> max;\n   }\n\n   <span class=\"hljs-comment\">// 辅助方法的实现请见本节前面的代码框</span>\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">less</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span>\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">exch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span>\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">swim</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k)</span>\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sink</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k)</span>\n}\n\n</code></pre>\n</body></html></section></template>\n\n"]},"metadata":{},"sourceType":"module"}