{"version":3,"file":"js/app.78899eff.js","mappings":"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","sources":["webpack://myblog/./src/pages/Home.vue","webpack://myblog/./src/pages/Home.vue?b9ed","webpack://myblog/./src/pages/Sort.vue","webpack://myblog/./src/md/sort.md","webpack://myblog/./src/md/sort.md?a9eb","webpack://myblog/./src/pages/Sort.vue?50d0","webpack://myblog/./src/pages/PriorityQueue.vue","webpack://myblog/./src/md/PriorityQueue.md","webpack://myblog/./src/md/PriorityQueue.md?0898","webpack://myblog/./src/pages/PriorityQueue.vue?b34b","webpack://myblog/./src/routes.js","webpack://myblog/./src/App.vue","webpack://myblog/./src/App.vue?7ccd","webpack://myblog/./src/main.js","webpack://myblog/webpack/bootstrap","webpack://myblog/webpack/runtime/chunk loaded","webpack://myblog/webpack/runtime/define property getters","webpack://myblog/webpack/runtime/global","webpack://myblog/webpack/runtime/hasOwnProperty shorthand","webpack://myblog/webpack/runtime/jsonp chunk loading","webpack://myblog/webpack/startup"],"sourcesContent":["<template>\n    <h2>最近文章</h2>\n    <ul>\n      <li>\n        <router-link :to=\"'/sort'\">排序</router-link>\n      </li>\n      <li>\n        <router-link :to=\"'/priority-queue'\">优先队列</router-link>\n      </li>\n    </ul>\n</template>\n<script>\nexport default {\n  /* eslint-disable */\n  name: 'About',\n  data() {\n    return {\n      aboutMsg: '我是about组件',\n    };\n  },\n};\n</script>\n","import { render } from \"./Home.vue?vue&type=template&id=5b4a3937\"\nimport script from \"./Home.vue?vue&type=script&lang=js\"\nexport * from \"./Home.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/gexiaolong/Downloads/others/coding/myblog/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"markdown-body\">\n    <SortMd />\n  </div>\n</template>\n\n<script>\nimport SortMd from '../md/sort.md';\nimport 'highlight.js/styles/github.css';\n\nexport default {\n  /* eslint-disable-next-line */\n  name: 'Sort',\n  components: {\n    SortMd,\n  },\n};\n</script>\n\n<style>\n\n</style>\n","<template><section><html><head></head><body><h2>排序</h2>\n<h3>归并排序</h3>\n<p>归并排序的性能不受输入数据的影响,为稳定排序算法, 速度仅次于快速排序.</p>\n<h4>思想</h4>\n<p>采用分治法Divide and Conquer）, 分治模式在每一层递归上有三个步骤:</p>\n<ul>\n<li>分解（Divide）：将n个元素分成个含n/2个元素的子序列。</li>\n<li>解决（Conquer）：用合并排序法对两个子序列递归的排序。</li>\n<li>合并（Combine）：合并两个已排序的子序列已得到排序结果。</li>\n</ul>\n<h4>实现逻辑(算法第四版 2.2.1):</h4>\n<p>先将所有元素复制到aux[], 然后再归并到a[]中. 在归并时,进行4个条件判断:</p>\n<ul>\n<li>\n<p>左半边用尽(取右半边元素),</p>\n</li>\n<li>\n<p>右半边用尽(取右半边元素),</p>\n</li>\n<li>\n<p>右半边当前元素小于左半边当前元素(取右半边元素),</p>\n</li>\n<li>\n<p>右半边当前元素小于等于左半边元素(取左半边元素)</p>\n</li>\n</ul>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-ts\">\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">merge</span>(<span class=\"hljs-params\">a: Comparable[], lo: <span class=\"hljs-built_in\">number</span>, mid: <span class=\"hljs-built_in\">number</span>, hi: <span class=\"hljs-built_in\">number</span></span>) {\n  <span class=\"hljs-keyword\">let</span> i = lo; <span class=\"hljs-keyword\">let</span> j = mid + <span class=\"hljs-number\">1</span>;\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">aux</span>: <span class=\"hljs-title class_\">Comparable</span>[] = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(a);\n\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k = lo; k &lt;= hi; k++) {\n    <span class=\"hljs-keyword\">if</span>(i &gt; mid) a[k] = aux[j++];\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>( j &gt; hi) a[k] = aux[i++];\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_\">less</span>(aux[j], aux[i])) a[k] = aux[j++];\n    <span class=\"hljs-keyword\">else</span> a[k] = a[i++];\n  }\n}\n\n</code></pre>\n<h5>递归法(2.2.2)</h5>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-ts\">\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">mergeSort</span>(<span class=\"hljs-params\">arr: Comparable[]</span>) {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">aux</span>: <span class=\"hljs-title class_\">Comparable</span>[] = [];\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-params\">array: Comparable[], lo: <span class=\"hljs-built_in\">number</span>, hi: <span class=\"hljs-built_in\">number</span></span>) {\n    <span class=\"hljs-keyword\">if</span>(hi &lt;= lo) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">mid</span>: <span class=\"hljs-built_in\">number</span> = lo + (hi - lo) / <span class=\"hljs-number\">2</span>;\n\n    <span class=\"hljs-title function_\">sort</span>(array, lo, mid);\n    <span class=\"hljs-title function_\">sort</span>(array, mid + <span class=\"hljs-number\">1</span>, hi);\n\n    <span class=\"hljs-title function_\">merge</span>(array, lo, mid , hi);\n  }\n\n  <span class=\"hljs-title function_\">sort</span>(arr, <span class=\"hljs-number\">0</span> , arr.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>);\n\n  <span class=\"hljs-keyword\">return</span> arr;\n}\n\n</code></pre>\n<h5>迭代法(2.2.3)</h5>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-ts\">\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">mergeSort</span>(<span class=\"hljs-params\">arr: Comparable[]</span>) {\n  <span class=\"hljs-keyword\">const</span> { length } = arr;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">aux</span>: <span class=\"hljs-title class_\">Comparable</span>[] = [];\n\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> sz = <span class=\"hljs-number\">1</span>; sz &lt; length; sz += sz + sz) { <span class=\"hljs-comment\">// sz 子数组大小</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> lo = <span class=\"hljs-number\">0</span>; lo &lt; length - sz; lo += sz + sz) { <span class=\"hljs-comment\">// 子数组索引</span>\n      <span class=\"hljs-title function_\">merge</span>(arr, lo, lo + sz - <span class=\"hljs-number\">1</span>, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(lo + sz + sz - <span class=\"hljs-number\">1</span>, length -<span class=\"hljs-number\">1</span>))\n    }\n  }\n\n}\n\n</code></pre>\n<p>不管元素在什么情况下都要做这些步骤，所以花销的时间是不变的，所以该算法的最优时间复杂度和最差时间复杂度及平均时间复杂度都是一样的为：O( nlogn )</p>\n<p>空间复杂度为: O(n)。</p>\n<h3>快速排序</h3>\n<p>快速排序的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据比另一部分的所有数据要小，再按这种方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，使整个数据变成有序序列。</p>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-ts\">\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">quickSort</span>(<span class=\"hljs-params\">arr: Comparable[]</span>) {\n    <span class=\"hljs-title function_\">sort</span>(arr, <span class=\"hljs-number\">0</span>, arr.<span class=\"hljs-property\">lenght</span> - <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-params\">array: Comparable[], lo, hi</span>) {\n      <span class=\"hljs-keyword\">if</span>(hi &lt;= lo) <span class=\"hljs-keyword\">return</span>;\n\n      <span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-title function_\">partition</span>(array, lo, hi); <span class=\"hljs-comment\">// 切分</span>\n\n      <span class=\"hljs-title function_\">sort</span>(array, lo, j - <span class=\"hljs-number\">1</span>);\n      <span class=\"hljs-title function_\">sort</span>(array, j + <span class=\"hljs-number\">1</span>, hi);\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">partition</span>(<span class=\"hljs-params\">array: Comparable[], lo , hi</span>) {\n      <span class=\"hljs-keyword\">let</span> i = lo; <span class=\"hljs-keyword\">let</span> j = hi + <span class=\"hljs-number\">1</span>;\n\n      <span class=\"hljs-keyword\">const</span> v = array[lo];\n\n      <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) {\n        <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-title function_\">less</span>(array[++i], v)) <span class=\"hljs-keyword\">if</span>(i == hi) <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-title function_\">less</span>(v, arry[--j])) <span class=\"hljs-keyword\">if</span>(j == lo) <span class=\"hljs-keyword\">break</span>;\n\n        <span class=\"hljs-keyword\">if</span>(j &lt;= i ) <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-title function_\">exch</span>(array, i, j);\n      }\n\n      <span class=\"hljs-title function_\">exch</span>(array, lo, j);\n\n      <span class=\"hljs-keyword\">return</span> j;\n\n    }\n  }\n\n</code></pre>\n<p>快速排序的平均时间复杂度是 O(nlogn), 但是快速排序在最坏情况下的时间复杂度和冒泡排序一样，是 O(n2) <strong>(即已经排序好的数组))</strong> , 所以开始可以先打乱数组的顺序保持随机性.而且对于小数组,其实快速排序比插入排序慢;所以可以混合使用;</p>\n<p>快速排序只是使用数组原本的空间进行排序;</p>\n<p>快速排序是一个不稳定的算法，在经过排序之后，可能会对相同值的元素的相对位置造成改变。</p>\n<p>快速排序基本上被认为是相同数量级的所有排序算法中，平均性能最好的。</p>\n<h3>堆排序</h3>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sort</span><span class=\"hljs-params\">(Comparable[] a)</span>\n{\n   <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span> a.length;\n   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> N/<span class=\"hljs-number\">2</span>; k &gt;= <span class=\"hljs-number\">1</span>; k--)\n      sink(a, k, N);\n   <span class=\"hljs-keyword\">while</span> (N &gt; <span class=\"hljs-number\">1</span>)\n   {\n      exch(a, <span class=\"hljs-number\">1</span>, N--);\n      sink(a, <span class=\"hljs-number\">1</span>, N);\n   }\n}\n</code></pre>\n<p>以上代码中,第一个循环,构造了一个二叉堆, 第二个循环,依次将堆顶元素和最后一个元素交换,并通过缩小数组N的值来弹出原堆顶 <strong>(最值)</strong> 缩小堆的大小.</p>\n<p>在前面文章 <strong>(优先队列)</strong> 里介绍过的,由数组构造的二叉堆中,父节点位置为<strong>k</strong>时,子节点分别为<strong>2k</strong>和<strong>2k+1</strong>,所以从 <strong>N/2</strong>的位置找到最大的父节点,并依次<strong>sink</strong>操作(sink操作见优先队列),从而达到堆有序.</p>\n<p>如下图:</p>\n<p><img src=\"'../assets/%E5%A0%86%E6%8E%92%E5%BA%8F.png'\" alt=\"堆排序\"></p>\n</body></html></section></template>\n\n","import { render } from \"./sort.md?vue&type=template&id=44e37353\"\nconst script = {}\n\nimport exportComponent from \"/Users/gexiaolong/Downloads/others/coding/myblog/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Sort.vue?vue&type=template&id=bf0faf50\"\nimport script from \"./Sort.vue?vue&type=script&lang=js\"\nexport * from \"./Sort.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/gexiaolong/Downloads/others/coding/myblog/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n <div class=\"markdown-body\">\n    <PriorityQueueMd />\n  </div>\n</template>\n\n<script>\nimport PriorityQueueMd from '../md/PriorityQueue.md';\n\nexport default {\n  name: 'PriorityQueue',\n  components: {\n    PriorityQueueMd,\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n\n</style>\n","<template><section><html><head></head><body><h2>优先队列 (算法第四版2.4)</h2>\n<p>普通队列是一种先进先出的数据结构，先放进队列的元素取值时优先被取出来。而优先队列是一种具有最高优先级元素先出的数据结构，比如每次取值都取最大的元素, 它包含最重要的两种操作: 删除最大元素delMax和插入元素insert().</p>\n<h3>堆的定义</h3>\n<p>当一颗二叉树的每个节点都大于等于它的两个子节点时,它被称为堆有序, 所以根节点是堆有序的二叉树中的最大节点</p>\n<h3>二叉堆表示法</h3>\n<h4>完全二叉树的定义</h4>\n<p>二叉树除开最后一层，其他层结点数都达到最大，最后一层的所有结点都集中在左边（左边结点排列满的情况下，右边才能缺失结点）</p>\n<h4>数组表示完全二叉树</h4>\n<p>如果我们用指针来表示堆有序的二叉树，那么每个元素都需要三个指针来找到它的上下结点（父结点和两个子结点各需要一个）. 如果我们使用完全二叉树，表达就会变得特别方便</p>\n<p>完全二叉树只用数组而不需要指针就可以表示。具体方法就是将二叉树的结点按照层级顺序放入数组中，根结点在位置 1，它的子结点在位置 2 和 3，而子结点的子结点则分别在位置 4、5、6 和 7，以此类推。 <strong>（不使用数组的第一个位置, 哨兵）</strong></p>\n<p><strong>简单起见，在下文中我们将二叉堆简称为堆）</strong> 在一个堆中，位置 <strong>k</strong> 的结点的父结点的位置为 <strong>k / 2</strong>而它的两个子结点的位置则分别为 <strong>2k</strong> 和 <strong>2k+1</strong>。这样在不使用指针的情况下（我们在第 3 章中讨论二叉树时会用到它们）我们也可以通过计算数组的索引在树中上下移动：从 a[k] 向上一层就令 k 等于 k/2，向下一层则令 k 等于 2k 或 2k+1。</p>\n<blockquote>\n<p><strong>命题 P</strong>。一棵大小为 <strong>N</strong> 的完全二叉树的高度为 <strong>lgN</strong>。</p>\n</blockquote>\n<blockquote>\n<p><strong>证明</strong>。通过归纳很容易可以证明这一点，且当 达到 2 的幂时树的高度会加 1。</p>\n</blockquote>\n<h3>堆的算法</h3>\n<p>我们用长度为 <strong>k + 1</strong> 的私有数组 pq[] 来表示一个大小为 <strong>k</strong> 的堆，我们不会使用 pq[0]，堆元素放在 pq[1] 至 pq[N] 中</p>\n<h4>堆实现的比较和交换方法</h4>\n<p>因为所有的元素都在数组 pq[] 中，不再将数组作为参数传递</p>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">less</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span>\n{  <span class=\"hljs-keyword\">return</span> pq[i].compareTo(pq[j]) &lt; <span class=\"hljs-number\">0</span>;  }\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">exch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span>\n{  <span class=\"hljs-type\">Key</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> pq[i]; pq[i] = pq[j]; pq[j] = t;  }\n\n</code></pre>\n<h4>由下自上的堆有序化（上浮）</h4>\n<p>当调用优先队列的insert方法时，我们首先把元素放置到数组的结尾，然后再把该元素上浮到正确的节点，最终形成堆有序状态。</p>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">swim</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k)</span>\n{\n   <span class=\"hljs-keyword\">while</span> (k &gt; <span class=\"hljs-number\">1</span> &amp;&amp; less(k/<span class=\"hljs-number\">2</span>, k))\n   {\n      exch(k/<span class=\"hljs-number\">2</span>, k);\n      k = k/<span class=\"hljs-number\">2</span>;\n   }\n}\n\n\n</code></pre>\n<h4>由上至下的堆有序化（下沉）</h4>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\">\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sink</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k)</span>\n{\n   <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">2</span>*k &lt;= N)\n   {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>*k;\n      <span class=\"hljs-keyword\">if</span> (j &lt; N &amp;&amp; less(j, j+<span class=\"hljs-number\">1</span>)) j++;\n      <span class=\"hljs-keyword\">if</span> (!less(k, j)) <span class=\"hljs-keyword\">break</span>;\n      exch(k, j);\n      k = j;\n   }\n}\n\n</code></pre>\n<p><img src=\"'../assets/%E5%A0%86%E7%9A%84%E6%93%8D%E4%BD%9C.png'\" alt=\"堆的操作\"></p>\n<h4></h4>\n<pre v-pre=\"\"><code v-pre=\"\" class=\"language-java\">\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MaxPQ</span>&lt;Key <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;Key&gt;&gt;\n{\n  <span class=\"hljs-keyword\">private</span> Key[] pq;             <span class=\"hljs-comment\">// 基于堆的完全按二叉树”</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;            <span class=\"hljs-comment\">// 存储于pq[1..N]中，pq[0]没有使用</span>\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MaxPQ</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> maxN)</span>\n   {  pq = (Key[]) <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparable</span>[maxN+<span class=\"hljs-number\">1</span>];  }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span>\n   {  <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">0</span>;  }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span>\n   {  <span class=\"hljs-keyword\">return</span> N;  }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(Key v)</span>\n   {\n      pq[++N] = v;\n      swim(N);\n   }\n\n   <span class=\"hljs-keyword\">public</span> Key <span class=\"hljs-title function_\">delMax</span><span class=\"hljs-params\">()</span>\n   {\n      <span class=\"hljs-type\">Key</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> pq[<span class=\"hljs-number\">1</span>];           <span class=\"hljs-comment\">// 从根结点得到最大元素</span>\n      exch(<span class=\"hljs-number\">1</span>, N--);              <span class=\"hljs-comment\">// 将其和最后一个结点交换</span>\n      pq[N+<span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">null</span>;            <span class=\"hljs-comment\">// 防止对象游离</span>\n      sink(<span class=\"hljs-number\">1</span>);                   <span class=\"hljs-comment\">// 恢复堆的有序性</span>\n      <span class=\"hljs-keyword\">return</span> max;\n   }\n\n   <span class=\"hljs-comment\">// 辅助方法的实现请见本节前面的代码框</span>\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">less</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span>\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">exch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span>\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">swim</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k)</span>\n   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sink</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k)</span>\n}\n\n</code></pre>\n<p>优先队列由一个基于堆的完全二叉树表示，存储于数组 pq[1..N] 中，pq[0] 没有使用。在 insert() 中，我们将 N 加一并把新元素添加在数组最后，然后用 swim() 恢复堆的秩序。在 delMax() 中，我们从 pq[1] 中得到需要返回的元素，然后将 pq[N] 移动到 pq[1]，将 N 减一并用 sink() 恢复堆的秩序。同时我们还将不再使用的 pq[N+1] 设为 null，以便系统回收它所占用的空间。这里省略了动态调整数组大小的代码</p>\n<blockquote>\n<p><strong>命题 Q</strong>。对于一个含有 <strong>N</strong> 个元素的基于堆的优先队列，插入元素操作只需不超过（<strong>lgN + 1</strong>）次比较，删除最大元素的操作需要不超过 <strong>2lgN</strong> 次比较。</p>\n</blockquote>\n<blockquote>\n<p><strong>证明</strong>。由命题 P 可知，两种操作都需要在根结点和堆底之间移动元素，而路径的长度不超过 <strong>lgN</strong>。对于路径上的每个结点，删除最大元素需要两次比较（除了堆底元素），一次用来找出较大的子结点，一次用来确定该子结点是否需要上浮。</p>\n</blockquote>\n</body></html></section></template>\n\n","import { render } from \"./PriorityQueue.md?vue&type=template&id=884884d0\"\nconst script = {}\n\nimport exportComponent from \"/Users/gexiaolong/Downloads/others/coding/myblog/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./PriorityQueue.vue?vue&type=template&id=23247019\"\nimport script from \"./PriorityQueue.vue?vue&type=script&lang=js\"\nexport * from \"./PriorityQueue.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/gexiaolong/Downloads/others/coding/myblog/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import Home from './pages/Home.vue';\nimport Sort from './pages/Sort.vue';\nimport PriorityQueue from './pages/PriorityQueue.vue';\n\nconst routes = [\n  { path: '/', component: Home },\n  { path: '/sort', component: Sort },\n  { path: '/priority-queue', component: PriorityQueue },\n];\n\nexport default routes;\n","<template>\n  <router-view></router-view>\n</template>\n\n<script>\n\nexport default {\n  name: 'App',\n  components: {\n  },\n};\n</script>\n\n<style>\n/* #app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n} */\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=458265cf\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=458265cf&lang=css\"\n\nimport exportComponent from \"/Users/gexiaolong/Downloads/others/coding/myblog/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { createApp } from 'vue';\nimport { createRouter, createWebHashHistory } from 'vue-router';\nimport routes from './routes';\nimport App from './App.vue';\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes,\n});\n\n// 5. 创建并挂载根实例\nconst app = createApp(App);\n// 确保 _use_ 路由实例使\n// 整个应用支持路由。\napp.use(router);\n\napp.mount('#app');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkmyblog\"] = self[\"webpackChunkmyblog\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(510); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","_hoisted_1","_createVNode","_component_router_link","to","name","data","aboutMsg","__exports__","render","class","_createElementBlock","_component_SortMd","_createTextVNode","src","alt","script","components","SortMd","_component_PriorityQueueMd","PriorityQueueMd","routes","path","component","Home","Sort","PriorityQueue","_createBlock","_component_router_view","router","createRouter","history","createWebHashHistory","app","createApp","App","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","Object","keys","every","key","splice","r","d","definition","o","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","id","chunkLoadingGlobal","self","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}