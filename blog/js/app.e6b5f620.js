(function(){"use strict";var s={472:function(s,n,l){var a=l(963),r=l(119),e=l(252);const t=(0,e._)("h2",null,"最近文章",-1),o=(0,e.Uk)("排序");function c(s,n,l,a,r,c){const _=(0,e.up)("router-link");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(_,{to:"/sort"},{default:(0,e.w5)((()=>[o])),_:1})])])],64)}var _={name:"About",data(){return{aboutMsg:"我是about组件"}}},i=l(744);const p=(0,i.Z)(_,[["render",c]]);var u=p;const k={class:"markdown-body"};function h(s,n,l,a,r,t){const o=(0,e.up)("SortMd");return(0,e.wg)(),(0,e.iD)("div",k,[(0,e.Wm)(o)])}const j=(0,e._)("html",null,[(0,e._)("head"),(0,e._)("body",null,[(0,e._)("h2",null,"排序"),(0,e._)("h3",null,"归并排序"),(0,e._)("p",null,"归并排序的性能不受输入数据的影响,为稳定排序算法, 速度仅次于快速排序."),(0,e._)("h4",null,"思想"),(0,e._)("p",null,"采用分治法Divide and Conquer）, 分治模式在每一层递归上有三个步骤:"),(0,e._)("ul",null,[(0,e._)("li",null,"分解（Divide）：将n个元素分成个含n/2个元素的子序列。"),(0,e._)("li",null,"解决（Conquer）：用合并排序法对两个子序列递归的排序。"),(0,e._)("li",null,"合并（Combine）：合并两个已排序的子序列已得到排序结果。")]),(0,e._)("h4",null,"实现逻辑(算法第四版 2.2.1):"),(0,e._)("p",null,"先将所有元素复制到aux[], 然后再归并到a[]中. 在归并时,进行4个条件判断:"),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("p",null,"左半边用尽(取右半边元素),")]),(0,e._)("li",null,[(0,e._)("p",null,"右半边用尽(取右半边元素),")]),(0,e._)("li",null,[(0,e._)("p",null,"右半边当前元素小于左半边当前元素(取右半边元素),")]),(0,e._)("li",null,[(0,e._)("p",null,"右半边当前元素小于等于左半边元素(取左半边元素)")])]),(0,e._)("pre",null,[(0,e._)("code",{"v-pre":"",class:"language-ts"},[(0,e.Uk)("\n"),(0,e._)("span",{class:"hljs-keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"hljs-title function_"},"merge"),(0,e.Uk)("("),(0,e._)("span",{class:"hljs-params"},[(0,e.Uk)("a: Comparable[], lo: "),(0,e._)("span",{class:"hljs-built_in"},"number"),(0,e.Uk)(", mid: "),(0,e._)("span",{class:"hljs-built_in"},"number"),(0,e.Uk)(", hi: "),(0,e._)("span",{class:"hljs-built_in"},"number")]),(0,e.Uk)(") {\n  "),(0,e._)("span",{class:"hljs-keyword"},"let"),(0,e.Uk)(" i = lo; "),(0,e._)("span",{class:"hljs-keyword"},"let"),(0,e.Uk)(" j = mid + "),(0,e._)("span",{class:"hljs-number"},"1"),(0,e.Uk)(";\n\n  "),(0,e._)("span",{class:"hljs-keyword"},"const"),(0,e.Uk)(),(0,e._)("span",{class:"hljs-attr"},"aux"),(0,e.Uk)(": "),(0,e._)("span",{class:"hljs-title class_"},"Comparable"),(0,e.Uk)("[] = "),(0,e._)("span",{class:"hljs-title class_"},"Array"),(0,e.Uk)("."),(0,e._)("span",{class:"hljs-title function_"},"from"),(0,e.Uk)("(a);\n\n  "),(0,e._)("span",{class:"hljs-keyword"},"for"),(0,e.Uk)("("),(0,e._)("span",{class:"hljs-keyword"},"let"),(0,e.Uk)(" k = lo; k <= hi; k++) {\n    "),(0,e._)("span",{class:"hljs-keyword"},"if"),(0,e.Uk)("(i > mid) a[k] = aux[j++];\n    "),(0,e._)("span",{class:"hljs-keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"hljs-keyword"},"if"),(0,e.Uk)("( j > hi) a[k] = aux[i++];\n    "),(0,e._)("span",{class:"hljs-keyword"},"else"),(0,e.Uk)(),(0,e._)("span",{class:"hljs-keyword"},"if"),(0,e.Uk)("("),(0,e._)("span",{class:"hljs-title function_"},"less"),(0,e.Uk)("(aux[j], aux[i])) a[k] = aux[j++];\n    "),(0,e._)("span",{class:"hljs-keyword"},"else"),(0,e.Uk)(" a[k] = a[i++];\n  }\n}\n\n")])]),(0,e._)("h5",null,"递归法(2.2.2)"),(0,e._)("pre",null,[(0,e._)("code",{"v-pre":"",class:"language-ts"},[(0,e.Uk)("\n"),(0,e._)("span",{class:"hljs-keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"hljs-title function_"},"mergeSort"),(0,e.Uk)("("),(0,e._)("span",{class:"hljs-params"},"arr: Comparable[]"),(0,e.Uk)(") {\n  "),(0,e._)("span",{class:"hljs-keyword"},"const"),(0,e.Uk)(),(0,e._)("span",{class:"hljs-attr"},"aux"),(0,e.Uk)(": "),(0,e._)("span",{class:"hljs-title class_"},"Comparable"),(0,e.Uk)("[] = [];\n\n  "),(0,e._)("span",{class:"hljs-keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"hljs-title function_"},"sort"),(0,e.Uk)("("),(0,e._)("span",{class:"hljs-params"},[(0,e.Uk)("array: Comparable[], lo: "),(0,e._)("span",{class:"hljs-built_in"},"number"),(0,e.Uk)(", hi: "),(0,e._)("span",{class:"hljs-built_in"},"number")]),(0,e.Uk)(") {\n    "),(0,e._)("span",{class:"hljs-keyword"},"if"),(0,e.Uk)("(hi <= lo) "),(0,e._)("span",{class:"hljs-keyword"},"return"),(0,e.Uk)(";\n    "),(0,e._)("span",{class:"hljs-keyword"},"const"),(0,e.Uk)(),(0,e._)("span",{class:"hljs-attr"},"mid"),(0,e.Uk)(": "),(0,e._)("span",{class:"hljs-built_in"},"number"),(0,e.Uk)(" = lo + (hi - lo) / "),(0,e._)("span",{class:"hljs-number"},"2"),(0,e.Uk)(";\n\n    "),(0,e._)("span",{class:"hljs-title function_"},"sort"),(0,e.Uk)("(array, lo, mid);\n    "),(0,e._)("span",{class:"hljs-title function_"},"sort"),(0,e.Uk)("(array, mid + "),(0,e._)("span",{class:"hljs-number"},"1"),(0,e.Uk)(", hi);\n\n    "),(0,e._)("span",{class:"hljs-title function_"},"merge"),(0,e.Uk)("(array, lo, mid , hi);\n  }\n\n  "),(0,e._)("span",{class:"hljs-title function_"},"sort"),(0,e.Uk)("(arr, "),(0,e._)("span",{class:"hljs-number"},"0"),(0,e.Uk)(" , arr."),(0,e._)("span",{class:"hljs-property"},"length"),(0,e.Uk)(" - "),(0,e._)("span",{class:"hljs-number"},"1"),(0,e.Uk)(");\n\n  "),(0,e._)("span",{class:"hljs-keyword"},"return"),(0,e.Uk)(" arr;\n}\n\n")])]),(0,e._)("h5",null,"迭代法(2.2.3)"),(0,e._)("pre",null,[(0,e._)("code",{"v-pre":"",class:"language-ts"},[(0,e.Uk)("\n"),(0,e._)("span",{class:"hljs-keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"hljs-title function_"},"mergeSort"),(0,e.Uk)("("),(0,e._)("span",{class:"hljs-params"},"arr: Comparable[]"),(0,e.Uk)(") {\n  "),(0,e._)("span",{class:"hljs-keyword"},"const"),(0,e.Uk)(" { length } = arr;\n  "),(0,e._)("span",{class:"hljs-keyword"},"const"),(0,e.Uk)(),(0,e._)("span",{class:"hljs-attr"},"aux"),(0,e.Uk)(": "),(0,e._)("span",{class:"hljs-title class_"},"Comparable"),(0,e.Uk)("[] = [];\n\n  "),(0,e._)("span",{class:"hljs-keyword"},"for"),(0,e.Uk)("("),(0,e._)("span",{class:"hljs-keyword"},"let"),(0,e.Uk)(" sz = "),(0,e._)("span",{class:"hljs-number"},"1"),(0,e.Uk)("; sz < length; sz += sz + sz) { "),(0,e._)("span",{class:"hljs-comment"},"// sz 子数组大小"),(0,e.Uk)("\n    "),(0,e._)("span",{class:"hljs-keyword"},"for"),(0,e.Uk)("("),(0,e._)("span",{class:"hljs-keyword"},"let"),(0,e.Uk)(" lo = "),(0,e._)("span",{class:"hljs-number"},"0"),(0,e.Uk)("; lo < length - sz; lo += sz + sz) { "),(0,e._)("span",{class:"hljs-comment"},"// 子数组索引"),(0,e.Uk)("\n      "),(0,e._)("span",{class:"hljs-title function_"},"merge"),(0,e.Uk)("(arr, lo, lo + sz - "),(0,e._)("span",{class:"hljs-number"},"1"),(0,e.Uk)(", "),(0,e._)("span",{class:"hljs-title class_"},"Math"),(0,e.Uk)("."),(0,e._)("span",{class:"hljs-title function_"},"min"),(0,e.Uk)("(lo + sz + sz - "),(0,e._)("span",{class:"hljs-number"},"1"),(0,e.Uk)(", length -"),(0,e._)("span",{class:"hljs-number"},"1"),(0,e.Uk)("))\n    }\n  }\n\n}\n\n")])]),(0,e._)("p",null,"不管元素在什么情况下都要做这些步骤，所以花销的时间是不变的，所以该算法的最优时间复杂度和最差时间复杂度及平均时间复杂度都是一样的为：O( nlogn )"),(0,e._)("p",null,"空间复杂度为: O(n)。"),(0,e._)("h3",null,"快速排序"),(0,e._)("p",null,"快速排序的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据比另一部分的所有数据要小，再按这种方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，使整个数据变成有序序列。"),(0,e._)("pre",null,[(0,e._)("code",{"v-pre":"",class:"language-ts"},[(0,e.Uk)("\n  "),(0,e._)("span",{class:"hljs-keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"hljs-title function_"},"quickSort"),(0,e.Uk)("("),(0,e._)("span",{class:"hljs-params"},"arr: Comparable[]"),(0,e.Uk)(") {\n    "),(0,e._)("span",{class:"hljs-title function_"},"sort"),(0,e.Uk)("(arr, "),(0,e._)("span",{class:"hljs-number"},"0"),(0,e.Uk)(", arr."),(0,e._)("span",{class:"hljs-property"},"lenght"),(0,e.Uk)(" - "),(0,e._)("span",{class:"hljs-number"},"1"),(0,e.Uk)(");\n\n    "),(0,e._)("span",{class:"hljs-keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"hljs-title function_"},"sort"),(0,e.Uk)("("),(0,e._)("span",{class:"hljs-params"},"array: Comparable[], lo, hi"),(0,e.Uk)(") {\n      "),(0,e._)("span",{class:"hljs-keyword"},"if"),(0,e.Uk)("(hi <= lo) "),(0,e._)("span",{class:"hljs-keyword"},"return"),(0,e.Uk)(";\n\n      "),(0,e._)("span",{class:"hljs-keyword"},"let"),(0,e.Uk)(" j = "),(0,e._)("span",{class:"hljs-title function_"},"partition"),(0,e.Uk)("(array, lo, hi); "),(0,e._)("span",{class:"hljs-comment"},"// 切分"),(0,e.Uk)("\n\n      "),(0,e._)("span",{class:"hljs-title function_"},"sort"),(0,e.Uk)("(array, lo, j - "),(0,e._)("span",{class:"hljs-number"},"1"),(0,e.Uk)(");\n      "),(0,e._)("span",{class:"hljs-title function_"},"sort"),(0,e.Uk)("(array, j + "),(0,e._)("span",{class:"hljs-number"},"1"),(0,e.Uk)(", hi);\n    }\n\n    "),(0,e._)("span",{class:"hljs-keyword"},"function"),(0,e.Uk)(),(0,e._)("span",{class:"hljs-title function_"},"partition"),(0,e.Uk)("("),(0,e._)("span",{class:"hljs-params"},"array: Comparable[], lo , hi"),(0,e.Uk)(") {\n      "),(0,e._)("span",{class:"hljs-keyword"},"let"),(0,e.Uk)(" i = lo; "),(0,e._)("span",{class:"hljs-keyword"},"let"),(0,e.Uk)(" j = hi + "),(0,e._)("span",{class:"hljs-number"},"1"),(0,e.Uk)(";\n\n      "),(0,e._)("span",{class:"hljs-keyword"},"const"),(0,e.Uk)(" v = array[lo];\n\n      "),(0,e._)("span",{class:"hljs-keyword"},"while"),(0,e.Uk)("("),(0,e._)("span",{class:"hljs-literal"},"true"),(0,e.Uk)(") {\n        "),(0,e._)("span",{class:"hljs-keyword"},"while"),(0,e.Uk)("("),(0,e._)("span",{class:"hljs-title function_"},"less"),(0,e.Uk)("(array[++i], v)) "),(0,e._)("span",{class:"hljs-keyword"},"if"),(0,e.Uk)("(i == hi) "),(0,e._)("span",{class:"hljs-keyword"},"break"),(0,e.Uk)(";\n        "),(0,e._)("span",{class:"hljs-keyword"},"while"),(0,e.Uk)("("),(0,e._)("span",{class:"hljs-title function_"},"less"),(0,e.Uk)("(v, arry[--j])) "),(0,e._)("span",{class:"hljs-keyword"},"if"),(0,e.Uk)("(j == lo) "),(0,e._)("span",{class:"hljs-keyword"},"break"),(0,e.Uk)(";\n\n        "),(0,e._)("span",{class:"hljs-keyword"},"if"),(0,e.Uk)("(j <= i ) "),(0,e._)("span",{class:"hljs-keyword"},"break"),(0,e.Uk)(";\n        "),(0,e._)("span",{class:"hljs-title function_"},"exch"),(0,e.Uk)("(array, i, j);\n      }\n\n      "),(0,e._)("span",{class:"hljs-title function_"},"exch"),(0,e.Uk)("(array, lo, j);\n\n      "),(0,e._)("span",{class:"hljs-keyword"},"return"),(0,e.Uk)(" j;\n\n    }\n  }\n\n")])]),(0,e._)("p",null,[(0,e.Uk)("快速排序的平均时间复杂度是 O(nlogn), 但是快速排序在最坏情况下的时间复杂度和冒泡排序一样，是 O(n2) "),(0,e._)("strong",null,"(即已经排序好的数组))"),(0,e.Uk)(" , 所以开始可以先打乱数组的顺序保持随机性.而且对于小数组,其实快速排序比插入排序慢;所以可以混合使用;")]),(0,e._)("p",null,"快速排序只是使用数组原本的空间进行排序;"),(0,e._)("p",null,"快速排序是一个不稳定的算法，在经过排序之后，可能会对相同值的元素的相对位置造成改变。"),(0,e._)("p",null,"快速排序基本上被认为是相同数量级的所有排序算法中，平均性能最好的。")])],-1),U=[j];function f(s,n){return(0,e.wg)(),(0,e.iD)("section",null,U)}const d={},m=(0,i.Z)(d,[["render",f]]);var y=m,w=(l(29),{name:"Sort",components:{SortMd:y}});const b=(0,i.Z)(w,[["render",h]]);var g=b;const v=[{path:"/",component:u},{path:"/sort",component:g}];var x=v;function C(s,n,l,a,r,t){const o=(0,e.up)("router-view");return(0,e.wg)(),(0,e.j4)(o)}var O={name:"App",components:{}};const z=(0,i.Z)(O,[["render",C]]);var S=z;const D=(0,r.p7)({history:(0,r.r5)(),routes:x}),M=(0,a.ri)(S);M.use(D),M.mount("#app")}},n={};function l(a){var r=n[a];if(void 0!==r)return r.exports;var e=n[a]={exports:{}};return s[a](e,e.exports,l),e.exports}l.m=s,function(){var s=[];l.O=function(n,a,r,e){if(!a){var t=1/0;for(i=0;i<s.length;i++){a=s[i][0],r=s[i][1],e=s[i][2];for(var o=!0,c=0;c<a.length;c++)(!1&e||t>=e)&&Object.keys(l.O).every((function(s){return l.O[s](a[c])}))?a.splice(c--,1):(o=!1,e<t&&(t=e));if(o){s.splice(i--,1);var _=r();void 0!==_&&(n=_)}}return n}e=e||0;for(var i=s.length;i>0&&s[i-1][2]>e;i--)s[i]=s[i-1];s[i]=[a,r,e]}}(),function(){l.d=function(s,n){for(var a in n)l.o(n,a)&&!l.o(s,a)&&Object.defineProperty(s,a,{enumerable:!0,get:n[a]})}}(),function(){l.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(s){if("object"===typeof window)return window}}()}(),function(){l.o=function(s,n){return Object.prototype.hasOwnProperty.call(s,n)}}(),function(){var s={143:0};l.O.j=function(n){return 0===s[n]};var n=function(n,a){var r,e,t=a[0],o=a[1],c=a[2],_=0;if(t.some((function(n){return 0!==s[n]}))){for(r in o)l.o(o,r)&&(l.m[r]=o[r]);if(c)var i=c(l)}for(n&&n(a);_<t.length;_++)e=t[_],l.o(s,e)&&s[e]&&s[e][0](),s[e]=0;return l.O(i)},a=self["webpackChunkmyblog"]=self["webpackChunkmyblog"]||[];a.forEach(n.bind(null,0)),a.push=n.bind(null,a.push.bind(a))}();var a=l.O(void 0,[998],(function(){return l(472)}));a=l.O(a)})();
//# sourceMappingURL=app.e6b5f620.js.map